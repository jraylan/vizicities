/*! For license information please see vizicities.js.LICENSE.txt */
(()=>{var __webpack_modules__={5550:n=>{"use strict";function t(n,t){this.x=n,this.y=t}n.exports=t,t.prototype={clone:function(){return new t(this.x,this.y)},add:function(n){return this.clone()._add(n)},sub:function(n){return this.clone()._sub(n)},multByPoint:function(n){return this.clone()._multByPoint(n)},divByPoint:function(n){return this.clone()._divByPoint(n)},mult:function(n){return this.clone()._mult(n)},div:function(n){return this.clone()._div(n)},rotate:function(n){return this.clone()._rotate(n)},rotateAround:function(n,t){return this.clone()._rotateAround(n,t)},matMult:function(n){return this.clone()._matMult(n)},unit:function(){return this.clone()._unit()},perp:function(){return this.clone()._perp()},round:function(){return this.clone()._round()},mag:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},equals:function(n){return this.x===n.x&&this.y===n.y},dist:function(n){return Math.sqrt(this.distSqr(n))},distSqr:function(n){var t=n.x-this.x,e=n.y-this.y;return t*t+e*e},angle:function(){return Math.atan2(this.y,this.x)},angleTo:function(n){return Math.atan2(this.y-n.y,this.x-n.x)},angleWith:function(n){return this.angleWithSep(n.x,n.y)},angleWithSep:function(n,t){return Math.atan2(this.x*t-this.y*n,this.x*n+this.y*t)},_matMult:function(n){var t=n[0]*this.x+n[1]*this.y,e=n[2]*this.x+n[3]*this.y;return this.x=t,this.y=e,this},_add:function(n){return this.x+=n.x,this.y+=n.y,this},_sub:function(n){return this.x-=n.x,this.y-=n.y,this},_mult:function(n){return this.x*=n,this.y*=n,this},_div:function(n){return this.x/=n,this.y/=n,this},_multByPoint:function(n){return this.x*=n.x,this.y*=n.y,this},_divByPoint:function(n){return this.x/=n.x,this.y/=n.y,this},_unit:function(){return this._div(this.mag()),this},_perp:function(){var n=this.y;return this.y=this.x,this.x=-n,this},_rotate:function(n){var t=Math.cos(n),e=Math.sin(n),l=t*this.x-e*this.y,r=e*this.x+t*this.y;return this.x=l,this.y=r,this},_rotateAround:function(n,t){var e=Math.cos(n),l=Math.sin(n),r=t.x+e*(this.x-t.x)-l*(this.y-t.y),i=t.y+l*(this.x-t.x)+e*(this.y-t.y);return this.x=r,this.y=i,this},_round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}},t.convert=function(n){return n instanceof t?n:Array.isArray(n)?new t(n[0],n[1]):n}},8929:(n,t,e)=>{n.exports.VectorTile=e(2779),e(6024),e(9701)},2779:(n,t,e)=>{"use strict";var l=e(9701);function r(n,t,e){if(3===n){var r=new l(e,e.readVarint()+e.pos);r.length&&(t[r.name]=r)}}n.exports=function(n,t){this.layers=n.readFields(r,{},t)}},6024:(n,t,e)=>{"use strict";var l=e(5550);function r(n,t,e,l,r){this.properties={},this.extent=e,this.type=0,this._pbf=n,this._geometry=-1,this._keys=l,this._values=r,n.readFields(i,this,t)}function i(n,t,e){1==n?t.id=e.readVarint():2==n?function(n,t){for(var e=n.readVarint()+n.pos;n.pos<e;){var l=t._keys[n.readVarint()],r=t._values[n.readVarint()];t.properties[l]=r}}(e,t):3==n?t.type=e.readVarint():4==n&&(t._geometry=e.pos)}function u(n){for(var t,e,l=0,r=0,i=n.length,u=i-1;r<i;u=r++)t=n[r],l+=((e=n[u]).x-t.x)*(t.y+e.y);return l}n.exports=r,r.types=["Unknown","Point","LineString","Polygon"],r.prototype.loadGeometry=function(){var n=this._pbf;n.pos=this._geometry;for(var t,e=n.readVarint()+n.pos,r=1,i=0,u=0,o=0,a=[];n.pos<e;){if(i<=0){var s=n.readVarint();r=7&s,i=s>>3}if(i--,1===r||2===r)u+=n.readSVarint(),o+=n.readSVarint(),1===r&&(t&&a.push(t),t=[]),t.push(new l(u,o));else{if(7!==r)throw new Error("unknown command "+r);t&&t.push(t[0].clone())}}return t&&a.push(t),a},r.prototype.bbox=function(){var n=this._pbf;n.pos=this._geometry;for(var t=n.readVarint()+n.pos,e=1,l=0,r=0,i=0,u=1/0,o=-1/0,a=1/0,s=-1/0;n.pos<t;){if(l<=0){var c=n.readVarint();e=7&c,l=c>>3}if(l--,1===e||2===e)(r+=n.readSVarint())<u&&(u=r),r>o&&(o=r),(i+=n.readSVarint())<a&&(a=i),i>s&&(s=i);else if(7!==e)throw new Error("unknown command "+e)}return[u,a,o,s]},r.prototype.toGeoJSON=function(n,t,e){var l,i,o=this.extent*Math.pow(2,e),a=this.extent*n,s=this.extent*t,c=this.loadGeometry(),h=r.types[this.type];function p(n){for(var t=0;t<n.length;t++){var e=n[t],l=180-360*(e.y+s)/o;n[t]=[360*(e.x+a)/o-180,360/Math.PI*Math.atan(Math.exp(l*Math.PI/180))-90]}}switch(this.type){case 1:var d=[];for(l=0;l<c.length;l++)d[l]=c[l][0];p(c=d);break;case 2:for(l=0;l<c.length;l++)p(c[l]);break;case 3:for(c=function(n){var t=n.length;if(t<=1)return[n];for(var e,l,r=[],i=0;i<t;i++){var o=u(n[i]);0!==o&&(void 0===l&&(l=o<0),l===o<0?(e&&r.push(e),e=[n[i]]):e.push(n[i]))}return e&&r.push(e),r}(c),l=0;l<c.length;l++)for(i=0;i<c[l].length;i++)p(c[l][i])}1===c.length?c=c[0]:h="Multi"+h;var f={type:"Feature",geometry:{type:h,coordinates:c},properties:this.properties};return"id"in this&&(f.id=this.id),f}},9701:(n,t,e)=>{"use strict";var l=e(6024);function r(n,t){this.version=1,this.name=null,this.extent=4096,this.length=0,this._pbf=n,this._keys=[],this._values=[],this._features=[],n.readFields(i,this,t),this.length=this._features.length}function i(n,t,e){15===n?t.version=e.readVarint():1===n?t.name=e.readString():5===n?t.extent=e.readVarint():2===n?t._features.push(e.pos):3===n?t._keys.push(e.readString()):4===n&&t._values.push(function(n){for(var t=null,e=n.readVarint()+n.pos;n.pos<e;){var l=n.readVarint()>>3;t=1===l?n.readString():2===l?n.readFloat():3===l?n.readDouble():4===l?n.readVarint64():5===l?n.readVarint():6===l?n.readSVarint():7===l?n.readBoolean():null}return t}(e))}n.exports=r,r.prototype.feature=function(n){if(n<0||n>=this._features.length)throw new Error("feature index out of bounds");this._pbf.pos=this._features[n];var t=this._pbf.readVarint()+this._pbf.pos;return new l(this._pbf,t,this.extent,this._keys,this._values)}},4017:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var Stringify=function(){var functionToString=function(n){return n.toString()},stringToFunction=function(str){var f;if("string"==typeof str&&null!=str.match(/^\s*function\s*\w*\s*\([\s\S]*\)\s*\{[\s\S]*\}/m))try{return eval("f = "+str),f}catch(n){return str}};return{functionToString,stringToFunction}}();const __WEBPACK_DEFAULT_EXPORT__=Stringify},1924:(n,t,e)=>{"use strict";var l=e(210),r=e(5559),i=r(l("String.prototype.indexOf"));n.exports=function(n,t){var e=l(n,!!t);return"function"==typeof e&&i(n,".prototype.")>-1?r(e):e}},5559:(n,t,e)=>{"use strict";var l=e(8612),r=e(210),i=e(7771),u=r("%TypeError%"),o=r("%Function.prototype.apply%"),a=r("%Function.prototype.call%"),s=r("%Reflect.apply%",!0)||l.call(a,o),c=r("%Object.defineProperty%",!0),h=r("%Math.max%");if(c)try{c({},"a",{value:1})}catch(n){c=null}n.exports=function(n){if("function"!=typeof n)throw new u("a function is required");var t=s(l,a,arguments);return i(t,1+h(0,n.length-(arguments.length-1)),!0)};var p=function(){return s(l,o,arguments)};c?c(n.exports,"apply",{value:p}):n.exports.apply=p},3762:(n,t,e)=>{"use strict";var l=e(7537),r=e.n(l),i=e(3645);e.n(i)()(r()).push([n.id,".vizicities-attribution {\n  position: relative;\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 3px 0 0;\n  bottom: 0;\n  color: #666;\n  font-family: Arial, Verdana, sans-serif;\n  font-size: 11px;\n  padding: 4px 7px;\n  position: absolute;\n  right: 0;\n  z-index: 9998;\n}\n\n.vizicities-attribution a, .vizicities-attribution a:visited {\n  color: #2bb2ed;\n  text-decoration: none;\n}\n\n.vizicities-attribution a:hover {\ncolor: #2bb2ed;\ntext-decoration: underline;\n}\n\n#attribution-container {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  z-index: -1;\n  width: 250px;\n  padding: 4px 7px;\n  padding-right: 120px;\n  background: #ffffff;\n  border-radius: 3px 0 0;\n  opacity: 0;\n  transition: opacity 100ms linear;\n}\n\n.is-visible #attribution-container {\n  opacity: 1;\n}\n","",{version:3,sources:["webpack://./src/vizicities.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,oCAAoC;EACpC,sBAAsB;EACtB,SAAS;EACT,WAAW;EACX,uCAAuC;EACvC,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,QAAQ;EACR,aAAa;AACf;;AAEA;EACE,cAAc;EACd,qBAAqB;AACvB;;AAEA;AACA,cAAc;AACd,0BAA0B;AAC1B;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,oBAAoB;EACpB,mBAAmB;EACnB,sBAAsB;EACtB,UAAU;EACV,gCAAgC;AAClC;;AAEA;EACE,UAAU;AACZ",sourcesContent:[".vizicities-attribution {\n  position: relative;\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 3px 0 0;\n  bottom: 0;\n  color: #666;\n  font-family: Arial, Verdana, sans-serif;\n  font-size: 11px;\n  padding: 4px 7px;\n  position: absolute;\n  right: 0;\n  z-index: 9998;\n}\n\n.vizicities-attribution a, .vizicities-attribution a:visited {\n  color: #2bb2ed;\n  text-decoration: none;\n}\n\n.vizicities-attribution a:hover {\ncolor: #2bb2ed;\ntext-decoration: underline;\n}\n\n#attribution-container {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  z-index: -1;\n  width: 250px;\n  padding: 4px 7px;\n  padding-right: 120px;\n  background: #ffffff;\n  border-radius: 3px 0 0;\n  opacity: 0;\n  transition: opacity 100ms linear;\n}\n\n.is-visible #attribution-container {\n  opacity: 1;\n}\n"],sourceRoot:""}])},3645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",l=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),l&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),l&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,l,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var u={};if(l)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(u[a]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);l&&u[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),t.push(c))}},t}},7537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},2296:(n,t,e)=>{"use strict";var l=e(1044)(),r=e(210),i=l&&r("%Object.defineProperty%",!0);if(i)try{i({},"a",{value:1})}catch(n){i=!1}var u=r("%SyntaxError%"),o=r("%TypeError%"),a=e(7296);n.exports=function(n,t,e){if(!n||"object"!=typeof n&&"function"!=typeof n)throw new o("`obj` must be an object or a function`");if("string"!=typeof t&&"symbol"!=typeof t)throw new o("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new o("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new o("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new o("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new o("`loose`, if provided, must be a boolean");var l=arguments.length>3?arguments[3]:null,r=arguments.length>4?arguments[4]:null,s=arguments.length>5?arguments[5]:null,c=arguments.length>6&&arguments[6],h=!!a&&a(n,t);if(i)i(n,t,{configurable:null===s&&h?h.configurable:!s,enumerable:null===l&&h?h.enumerable:!l,value:e,writable:null===r&&h?h.writable:!r});else{if(!c&&(l||r||s))throw new u("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");n[t]=e}}},9187:n=>{"use strict";function t(n,t,l){l=l||2;var i,u,o,a,h,p,f,m=t&&t.length,v=m?t[0]*l:n.length,g=e(n,0,v,l,!0),y=[];if(!g||g.next===g.prev)return y;if(m&&(g=function(n,t,l,r){var i,u,o,a=[];for(i=0,u=t.length;i<u;i++)(o=e(n,t[i]*r,i<u-1?t[i+1]*r:n.length,r,!1))===o.next&&(o.steiner=!0),a.push(d(o));for(a.sort(s),i=0;i<a.length;i++)l=c(a[i],l);return l}(n,t,g,l)),n.length>80*l){i=o=n[0],u=a=n[1];for(var x=l;x<v;x+=l)(h=n[x])<i&&(i=h),(p=n[x+1])<u&&(u=p),h>o&&(o=h),p>a&&(a=p);f=0!==(f=Math.max(o-i,a-u))?32767/f:0}return r(g,y,l,i,u,f,0),y}function e(n,t,e,l,r){var i,u;if(r===T(n,t,e,l)>0)for(i=t;i<e;i+=l)u=M(i,n[i],n[i+1],u);else for(i=e-l;i>=t;i-=l)u=M(i,n[i],n[i+1],u);return u&&g(u,u.next)&&(E(u),u=u.next),u}function l(n,t){if(!n)return n;t||(t=n);var e,l=n;do{if(e=!1,l.steiner||!g(l,l.next)&&0!==v(l.prev,l,l.next))l=l.next;else{if(E(l),(l=t=l.prev)===l.next)break;e=!0}}while(e||l!==t);return t}function r(n,t,e,s,c,h,d){if(n){!d&&h&&function(n,t,e,l){var r=n;do{0===r.z&&(r.z=p(r.x,r.y,t,e,l)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==n);r.prevZ.nextZ=null,r.prevZ=null,function(n){var t,e,l,r,i,u,o,a,s=1;do{for(e=n,n=null,i=null,u=0;e;){for(u++,l=e,o=0,t=0;t<s&&(o++,l=l.nextZ);t++);for(a=s;o>0||a>0&&l;)0!==o&&(0===a||!l||e.z<=l.z)?(r=e,e=e.nextZ,o--):(r=l,l=l.nextZ,a--),i?i.nextZ=r:n=r,r.prevZ=i,i=r;e=l}i.nextZ=null,s*=2}while(u>1)}(r)}(n,s,c,h);for(var f,m,v=n;n.prev!==n.next;)if(f=n.prev,m=n.next,h?u(n,s,c,h):i(n))t.push(f.i/e|0),t.push(n.i/e|0),t.push(m.i/e|0),E(n),n=m.next,v=m.next;else if((n=m)===v){d?1===d?r(n=o(l(n),t,e),t,e,s,c,h,2):2===d&&a(n,t,e,s,c,h):r(l(n),t,e,s,c,h,1);break}}}function i(n){var t=n.prev,e=n,l=n.next;if(v(t,e,l)>=0)return!1;for(var r=t.x,i=e.x,u=l.x,o=t.y,a=e.y,s=l.y,c=r<i?r<u?r:u:i<u?i:u,h=o<a?o<s?o:s:a<s?a:s,p=r>i?r>u?r:u:i>u?i:u,d=o>a?o>s?o:s:a>s?a:s,m=l.next;m!==t;){if(m.x>=c&&m.x<=p&&m.y>=h&&m.y<=d&&f(r,o,i,a,u,s,m.x,m.y)&&v(m.prev,m,m.next)>=0)return!1;m=m.next}return!0}function u(n,t,e,l){var r=n.prev,i=n,u=n.next;if(v(r,i,u)>=0)return!1;for(var o=r.x,a=i.x,s=u.x,c=r.y,h=i.y,d=u.y,m=o<a?o<s?o:s:a<s?a:s,g=c<h?c<d?c:d:h<d?h:d,y=o>a?o>s?o:s:a>s?a:s,x=c>h?c>d?c:d:h>d?h:d,b=p(m,g,t,e,l),_=p(y,x,t,e,l),w=n.prevZ,M=n.nextZ;w&&w.z>=b&&M&&M.z<=_;){if(w.x>=m&&w.x<=y&&w.y>=g&&w.y<=x&&w!==r&&w!==u&&f(o,c,a,h,s,d,w.x,w.y)&&v(w.prev,w,w.next)>=0)return!1;if(w=w.prevZ,M.x>=m&&M.x<=y&&M.y>=g&&M.y<=x&&M!==r&&M!==u&&f(o,c,a,h,s,d,M.x,M.y)&&v(M.prev,M,M.next)>=0)return!1;M=M.nextZ}for(;w&&w.z>=b;){if(w.x>=m&&w.x<=y&&w.y>=g&&w.y<=x&&w!==r&&w!==u&&f(o,c,a,h,s,d,w.x,w.y)&&v(w.prev,w,w.next)>=0)return!1;w=w.prevZ}for(;M&&M.z<=_;){if(M.x>=m&&M.x<=y&&M.y>=g&&M.y<=x&&M!==r&&M!==u&&f(o,c,a,h,s,d,M.x,M.y)&&v(M.prev,M,M.next)>=0)return!1;M=M.nextZ}return!0}function o(n,t,e){var r=n;do{var i=r.prev,u=r.next.next;!g(i,u)&&y(i,r,r.next,u)&&_(i,u)&&_(u,i)&&(t.push(i.i/e|0),t.push(r.i/e|0),t.push(u.i/e|0),E(r),E(r.next),r=n=u),r=r.next}while(r!==n);return l(r)}function a(n,t,e,i,u,o){var a=n;do{for(var s=a.next.next;s!==a.prev;){if(a.i!==s.i&&m(a,s)){var c=w(a,s);return a=l(a,a.next),c=l(c,c.next),r(a,t,e,i,u,o,0),void r(c,t,e,i,u,o,0)}s=s.next}a=a.next}while(a!==n)}function s(n,t){return n.x-t.x}function c(n,t){var e=function(n,t){var e,l=t,r=n.x,i=n.y,u=-1/0;do{if(i<=l.y&&i>=l.next.y&&l.next.y!==l.y){var o=l.x+(i-l.y)*(l.next.x-l.x)/(l.next.y-l.y);if(o<=r&&o>u&&(u=o,e=l.x<l.next.x?l:l.next,o===r))return e}l=l.next}while(l!==t);if(!e)return null;var a,s=e,c=e.x,p=e.y,d=1/0;l=e;do{r>=l.x&&l.x>=c&&r!==l.x&&f(i<p?r:u,i,c,p,i<p?u:r,i,l.x,l.y)&&(a=Math.abs(i-l.y)/(r-l.x),_(l,n)&&(a<d||a===d&&(l.x>e.x||l.x===e.x&&h(e,l)))&&(e=l,d=a)),l=l.next}while(l!==s);return e}(n,t);if(!e)return t;var r=w(e,n);return l(r,r.next),l(e,e.next)}function h(n,t){return v(n.prev,n,t.prev)<0&&v(t.next,n,n.next)<0}function p(n,t,e,l,r){return(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=(n-e)*r|0)|n<<8))|n<<4))|n<<2))|n<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-l)*r|0)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function d(n){var t=n,e=n;do{(t.x<e.x||t.x===e.x&&t.y<e.y)&&(e=t),t=t.next}while(t!==n);return e}function f(n,t,e,l,r,i,u,o){return(r-u)*(t-o)>=(n-u)*(i-o)&&(n-u)*(l-o)>=(e-u)*(t-o)&&(e-u)*(i-o)>=(r-u)*(l-o)}function m(n,t){return n.next.i!==t.i&&n.prev.i!==t.i&&!function(n,t){var e=n;do{if(e.i!==n.i&&e.next.i!==n.i&&e.i!==t.i&&e.next.i!==t.i&&y(e,e.next,n,t))return!0;e=e.next}while(e!==n);return!1}(n,t)&&(_(n,t)&&_(t,n)&&function(n,t){var e=n,l=!1,r=(n.x+t.x)/2,i=(n.y+t.y)/2;do{e.y>i!=e.next.y>i&&e.next.y!==e.y&&r<(e.next.x-e.x)*(i-e.y)/(e.next.y-e.y)+e.x&&(l=!l),e=e.next}while(e!==n);return l}(n,t)&&(v(n.prev,n,t.prev)||v(n,t.prev,t))||g(n,t)&&v(n.prev,n,n.next)>0&&v(t.prev,t,t.next)>0)}function v(n,t,e){return(t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y)}function g(n,t){return n.x===t.x&&n.y===t.y}function y(n,t,e,l){var r=b(v(n,t,e)),i=b(v(n,t,l)),u=b(v(e,l,n)),o=b(v(e,l,t));return r!==i&&u!==o||!(0!==r||!x(n,e,t))||!(0!==i||!x(n,l,t))||!(0!==u||!x(e,n,l))||!(0!==o||!x(e,t,l))}function x(n,t,e){return t.x<=Math.max(n.x,e.x)&&t.x>=Math.min(n.x,e.x)&&t.y<=Math.max(n.y,e.y)&&t.y>=Math.min(n.y,e.y)}function b(n){return n>0?1:n<0?-1:0}function _(n,t){return v(n.prev,n,n.next)<0?v(n,t,n.next)>=0&&v(n,n.prev,t)>=0:v(n,t,n.prev)<0||v(n,n.next,t)<0}function w(n,t){var e=new S(n.i,n.x,n.y),l=new S(t.i,t.x,t.y),r=n.next,i=t.prev;return n.next=t,t.prev=n,e.next=r,r.prev=e,l.next=e,e.prev=l,i.next=l,l.prev=i,l}function M(n,t,e,l){var r=new S(n,t,e);return l?(r.next=l.next,r.prev=l,l.next.prev=r,l.next=r):(r.prev=r,r.next=r),r}function E(n){n.next.prev=n.prev,n.prev.next=n.next,n.prevZ&&(n.prevZ.nextZ=n.nextZ),n.nextZ&&(n.nextZ.prevZ=n.prevZ)}function S(n,t,e){this.i=n,this.x=t,this.y=e,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function T(n,t,e,l){for(var r=0,i=t,u=e-l;i<e;i+=l)r+=(n[u]-n[i])*(n[i+1]+n[u+1]),u=i;return r}n.exports=t,n.exports.default=t,t.deviation=function(n,t,e,l){var r=t&&t.length,i=r?t[0]*e:n.length,u=Math.abs(T(n,0,i,e));if(r)for(var o=0,a=t.length;o<a;o++){var s=t[o]*e,c=o<a-1?t[o+1]*e:n.length;u-=Math.abs(T(n,s,c,e))}var h=0;for(o=0;o<l.length;o+=3){var p=l[o]*e,d=l[o+1]*e,f=l[o+2]*e;h+=Math.abs((n[p]-n[f])*(n[d+1]-n[p+1])-(n[p]-n[d])*(n[f+1]-n[p+1]))}return 0===u&&0===h?0:Math.abs((h-u)/u)},t.flatten=function(n){for(var t=n[0][0].length,e={vertices:[],holes:[],dimensions:t},l=0,r=0;r<n.length;r++){for(var i=0;i<n[r].length;i++)for(var u=0;u<t;u++)e.vertices.push(n[r][i][u]);r>0&&(l+=n[r-1].length,e.holes.push(l))}return e}},6729:n=>{"use strict";var t=Object.prototype.hasOwnProperty,e="function"!=typeof Object.create&&"~";function l(n,t,e){this.fn=n,this.context=t,this.once=e||!1}function r(){}r.prototype._events=void 0,r.prototype.eventNames=function(){var n,l=this._events,r=[];if(!l)return r;for(n in l)t.call(l,n)&&r.push(e?n.slice(1):n);return Object.getOwnPropertySymbols?r.concat(Object.getOwnPropertySymbols(l)):r},r.prototype.listeners=function(n,t){var l=e?e+n:n,r=this._events&&this._events[l];if(t)return!!r;if(!r)return[];if(r.fn)return[r.fn];for(var i=0,u=r.length,o=new Array(u);i<u;i++)o[i]=r[i].fn;return o},r.prototype.emit=function(n,t,l,r,i,u){var o=e?e+n:n;if(!this._events||!this._events[o])return!1;var a,s,c=this._events[o],h=arguments.length;if("function"==typeof c.fn){switch(c.once&&this.removeListener(n,c.fn,void 0,!0),h){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,t),!0;case 3:return c.fn.call(c.context,t,l),!0;case 4:return c.fn.call(c.context,t,l,r),!0;case 5:return c.fn.call(c.context,t,l,r,i),!0;case 6:return c.fn.call(c.context,t,l,r,i,u),!0}for(s=1,a=new Array(h-1);s<h;s++)a[s-1]=arguments[s];c.fn.apply(c.context,a)}else{var p,d=c.length;for(s=0;s<d;s++)switch(c[s].once&&this.removeListener(n,c[s].fn,void 0,!0),h){case 1:c[s].fn.call(c[s].context);break;case 2:c[s].fn.call(c[s].context,t);break;case 3:c[s].fn.call(c[s].context,t,l);break;default:if(!a)for(p=1,a=new Array(h-1);p<h;p++)a[p-1]=arguments[p];c[s].fn.apply(c[s].context,a)}}return!0},r.prototype.on=function(n,t,r){var i=new l(t,r||this),u=e?e+n:n;return this._events||(this._events=e?{}:Object.create(null)),this._events[u]?this._events[u].fn?this._events[u]=[this._events[u],i]:this._events[u].push(i):this._events[u]=i,this},r.prototype.once=function(n,t,r){var i=new l(t,r||this,!0),u=e?e+n:n;return this._events||(this._events=e?{}:Object.create(null)),this._events[u]?this._events[u].fn?this._events[u]=[this._events[u],i]:this._events[u].push(i):this._events[u]=i,this},r.prototype.removeListener=function(n,t,l,r){var i=e?e+n:n;if(!this._events||!this._events[i])return this;var u=this._events[i],o=[];if(t)if(u.fn)(u.fn!==t||r&&!u.once||l&&u.context!==l)&&o.push(u);else for(var a=0,s=u.length;a<s;a++)(u[a].fn!==t||r&&!u[a].once||l&&u[a].context!==l)&&o.push(u[a]);return o.length?this._events[i]=1===o.length?o[0]:o:delete this._events[i],this},r.prototype.removeAllListeners=function(n){return this._events?(n?delete this._events[e?e+n:n]:this._events=e?{}:Object.create(null),this):this},r.prototype.off=r.prototype.removeListener,r.prototype.addListener=r.prototype.on,r.prototype.setMaxListeners=function(){return this},r.prefixed=e,n.exports=r},4029:(n,t,e)=>{"use strict";var l=e(5320),r=Object.prototype.toString,i=Object.prototype.hasOwnProperty;n.exports=function(n,t,e){if(!l(t))throw new TypeError("iterator must be a function");var u;arguments.length>=3&&(u=e),"[object Array]"===r.call(n)?function(n,t,e){for(var l=0,r=n.length;l<r;l++)i.call(n,l)&&(null==e?t(n[l],l,n):t.call(e,n[l],l,n))}(n,t,u):"string"==typeof n?function(n,t,e){for(var l=0,r=n.length;l<r;l++)null==e?t(n.charAt(l),l,n):t.call(e,n.charAt(l),l,n)}(n,t,u):function(n,t,e){for(var l in n)i.call(n,l)&&(null==e?t(n[l],l,n):t.call(e,n[l],l,n))}(n,t,u)}},7648:n=>{"use strict";var t=Object.prototype.toString,e=Math.max,l=function(n,t){for(var e=[],l=0;l<n.length;l+=1)e[l]=n[l];for(var r=0;r<t.length;r+=1)e[r+n.length]=t[r];return e};n.exports=function(n){var r=this;if("function"!=typeof r||"[object Function]"!==t.apply(r))throw new TypeError("Function.prototype.bind called on incompatible "+r);for(var i,u=function(n,t){for(var e=[],l=1,r=0;l<n.length;l+=1,r+=1)e[r]=n[l];return e}(arguments),o=e(0,r.length-u.length),a=[],s=0;s<o;s++)a[s]="$"+s;if(i=Function("binder","return function ("+function(n,t){for(var e="",l=0;l<n.length;l+=1)e+=n[l],l+1<n.length&&(e+=",");return e}(a)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof i){var t=r.apply(this,l(u,arguments));return Object(t)===t?t:this}return r.apply(n,l(u,arguments))})),r.prototype){var c=function(){};c.prototype=r.prototype,i.prototype=new c,c.prototype=null}return i}},8612:(n,t,e)=>{"use strict";var l=e(7648);n.exports=Function.prototype.bind||l},9370:(n,t,e)=>{var l=e(4625);n.exports=function(n){return{type:"FeatureCollection",features:n.reduce((function(n,t){return n.concat(l(t).features)}),[])}}},4625:n=>{n.exports=function(n){if(!n||!n.type)return null;var e=t[n.type];return e?"geometry"===e?{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:n}]}:"feature"===e?{type:"FeatureCollection",features:[n]}:"featurecollection"===e?n:void 0:null};var t={Point:"geometry",MultiPoint:"geometry",LineString:"geometry",MultiLineString:"geometry",Polygon:"geometry",MultiPolygon:"geometry",GeometryCollection:"geometry",Feature:"feature",FeatureCollection:"featurecollection"}},210:(n,t,e)=>{"use strict";var l,r=SyntaxError,i=Function,u=TypeError,o=function(n){try{return i('"use strict"; return ('+n+").constructor;")()}catch(n){}},a=Object.getOwnPropertyDescriptor;if(a)try{a({},"")}catch(n){a=null}var s=function(){throw new u},c=a?function(){try{return s}catch(n){try{return a(arguments,"callee").get}catch(n){return s}}}():s,h=e(1405)(),p=e(8185)(),d=Object.getPrototypeOf||(p?function(n){return n.__proto__}:null),f={},m="undefined"!=typeof Uint8Array&&d?d(Uint8Array):l,v={"%AggregateError%":"undefined"==typeof AggregateError?l:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?l:ArrayBuffer,"%ArrayIteratorPrototype%":h&&d?d([][Symbol.iterator]()):l,"%AsyncFromSyncIteratorPrototype%":l,"%AsyncFunction%":f,"%AsyncGenerator%":f,"%AsyncGeneratorFunction%":f,"%AsyncIteratorPrototype%":f,"%Atomics%":"undefined"==typeof Atomics?l:Atomics,"%BigInt%":"undefined"==typeof BigInt?l:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?l:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?l:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?l:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?l:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?l:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?l:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":f,"%Int8Array%":"undefined"==typeof Int8Array?l:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?l:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?l:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":h&&d?d(d([][Symbol.iterator]())):l,"%JSON%":"object"==typeof JSON?JSON:l,"%Map%":"undefined"==typeof Map?l:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&h&&d?d((new Map)[Symbol.iterator]()):l,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?l:Promise,"%Proxy%":"undefined"==typeof Proxy?l:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?l:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?l:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&h&&d?d((new Set)[Symbol.iterator]()):l,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?l:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":h&&d?d(""[Symbol.iterator]()):l,"%Symbol%":h?Symbol:l,"%SyntaxError%":r,"%ThrowTypeError%":c,"%TypedArray%":m,"%TypeError%":u,"%Uint8Array%":"undefined"==typeof Uint8Array?l:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?l:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?l:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?l:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?l:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?l:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?l:WeakSet};if(d)try{null.error}catch(n){var g=d(d(n));v["%Error.prototype%"]=g}var y=function n(t){var e;if("%AsyncFunction%"===t)e=o("async function () {}");else if("%GeneratorFunction%"===t)e=o("function* () {}");else if("%AsyncGeneratorFunction%"===t)e=o("async function* () {}");else if("%AsyncGenerator%"===t){var l=n("%AsyncGeneratorFunction%");l&&(e=l.prototype)}else if("%AsyncIteratorPrototype%"===t){var r=n("%AsyncGenerator%");r&&d&&(e=d(r.prototype))}return v[t]=e,e},x={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},b=e(8612),_=e(8824),w=b.call(Function.call,Array.prototype.concat),M=b.call(Function.apply,Array.prototype.splice),E=b.call(Function.call,String.prototype.replace),S=b.call(Function.call,String.prototype.slice),T=b.call(Function.call,RegExp.prototype.exec),A=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,L=/\\(\\)?/g,P=function(n,t){var e,l=n;if(_(x,l)&&(l="%"+(e=x[l])[0]+"%"),_(v,l)){var i=v[l];if(i===f&&(i=y(l)),void 0===i&&!t)throw new u("intrinsic "+n+" exists, but is not available. Please file an issue!");return{alias:e,name:l,value:i}}throw new r("intrinsic "+n+" does not exist!")};n.exports=function(n,t){if("string"!=typeof n||0===n.length)throw new u("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new u('"allowMissing" argument must be a boolean');if(null===T(/^%?[^%]*%?$/,n))throw new r("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var e=function(n){var t=S(n,0,1),e=S(n,-1);if("%"===t&&"%"!==e)throw new r("invalid intrinsic syntax, expected closing `%`");if("%"===e&&"%"!==t)throw new r("invalid intrinsic syntax, expected opening `%`");var l=[];return E(n,A,(function(n,t,e,r){l[l.length]=e?E(r,L,"$1"):t||n})),l}(n),l=e.length>0?e[0]:"",i=P("%"+l+"%",t),o=i.name,s=i.value,c=!1,h=i.alias;h&&(l=h[0],M(e,w([0,1],h)));for(var p=1,d=!0;p<e.length;p+=1){var f=e[p],m=S(f,0,1),g=S(f,-1);if(('"'===m||"'"===m||"`"===m||'"'===g||"'"===g||"`"===g)&&m!==g)throw new r("property names with quotes must have matching quotes");if("constructor"!==f&&d||(c=!0),_(v,o="%"+(l+="."+f)+"%"))s=v[o];else if(null!=s){if(!(f in s)){if(!t)throw new u("base intrinsic for "+n+" exists, but the property is not available.");return}if(a&&p+1>=e.length){var y=a(s,f);s=(d=!!y)&&"get"in y&&!("originalValue"in y.get)?y.get:s[f]}else d=_(s,f),s=s[f];d&&!c&&(v[o]=s)}}return s}},7296:(n,t,e)=>{"use strict";var l=e(210)("%Object.getOwnPropertyDescriptor%",!0);if(l)try{l([],"length")}catch(n){l=null}n.exports=l},1044:(n,t,e)=>{"use strict";var l=e(210)("%Object.defineProperty%",!0),r=function(){if(l)try{return l({},"a",{value:1}),!0}catch(n){return!1}return!1};r.hasArrayLengthDefineBug=function(){if(!r())return null;try{return 1!==l([],"length",{value:1}).length}catch(n){return!0}},n.exports=r},8185:n=>{"use strict";var t={foo:{}},e=Object;n.exports=function(){return{__proto__:t}.foo===t.foo&&!({__proto__:null}instanceof e)}},1405:(n,t,e)=>{"use strict";var l="undefined"!=typeof Symbol&&Symbol,r=e(5419);n.exports=function(){return"function"==typeof l&&"function"==typeof Symbol&&"symbol"==typeof l("foo")&&"symbol"==typeof Symbol("bar")&&r()}},5419:n=>{"use strict";n.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var n={},t=Symbol("test"),e=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;for(t in n[t]=42,n)return!1;if("function"==typeof Object.keys&&0!==Object.keys(n).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(n).length)return!1;var l=Object.getOwnPropertySymbols(n);if(1!==l.length||l[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(n,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var r=Object.getOwnPropertyDescriptor(n,t);if(42!==r.value||!0!==r.enumerable)return!1}return!0}},6410:(n,t,e)=>{"use strict";var l=e(5419);n.exports=function(){return l()&&!!Symbol.toStringTag}},8824:(n,t,e)=>{"use strict";var l=Function.prototype.call,r=Object.prototype.hasOwnProperty,i=e(8612);n.exports=i.call(l,r)},645:(n,t)=>{t.read=function(n,t,e,l,r){var i,u,o=8*r-l-1,a=(1<<o)-1,s=a>>1,c=-7,h=e?r-1:0,p=e?-1:1,d=n[t+h];for(h+=p,i=d&(1<<-c)-1,d>>=-c,c+=o;c>0;i=256*i+n[t+h],h+=p,c-=8);for(u=i&(1<<-c)-1,i>>=-c,c+=l;c>0;u=256*u+n[t+h],h+=p,c-=8);if(0===i)i=1-s;else{if(i===a)return u?NaN:1/0*(d?-1:1);u+=Math.pow(2,l),i-=s}return(d?-1:1)*u*Math.pow(2,i-l)},t.write=function(n,t,e,l,r,i){var u,o,a,s=8*i-r-1,c=(1<<s)-1,h=c>>1,p=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,d=l?0:i-1,f=l?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,u=c):(u=Math.floor(Math.log(t)/Math.LN2),t*(a=Math.pow(2,-u))<1&&(u--,a*=2),(t+=u+h>=1?p/a:p*Math.pow(2,1-h))*a>=2&&(u++,a/=2),u+h>=c?(o=0,u=c):u+h>=1?(o=(t*a-1)*Math.pow(2,r),u+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,r),u=0));r>=8;n[e+d]=255&o,d+=f,o/=256,r-=8);for(u=u<<r|o,s+=r;s>0;n[e+d]=255&u,d+=f,u/=256,s-=8);n[e+d-f]|=128*m}},5717:n=>{"function"==typeof Object.create?n.exports=function(n,t){t&&(n.super_=t,n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}))}:n.exports=function(n,t){if(t){n.super_=t;var e=function(){};e.prototype=t.prototype,n.prototype=new e,n.prototype.constructor=n}}},2584:(n,t,e)=>{"use strict";var l=e(6410)(),r=e(1924)("Object.prototype.toString"),i=function(n){return!(l&&n&&"object"==typeof n&&Symbol.toStringTag in n)&&"[object Arguments]"===r(n)},u=function(n){return!!i(n)||null!==n&&"object"==typeof n&&"number"==typeof n.length&&n.length>=0&&"[object Array]"!==r(n)&&"[object Function]"===r(n.callee)},o=function(){return i(arguments)}();i.isLegacyArguments=u,n.exports=o?i:u},5320:n=>{"use strict";var t,e,l=Function.prototype.toString,r="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof r&&"function"==typeof Object.defineProperty)try{t=Object.defineProperty({},"length",{get:function(){throw e}}),e={},r((function(){throw 42}),null,t)}catch(n){n!==e&&(r=null)}else r=null;var i=/^\s*class\b/,u=function(n){try{var t=l.call(n);return i.test(t)}catch(n){return!1}},o=function(n){try{return!u(n)&&(l.call(n),!0)}catch(n){return!1}},a=Object.prototype.toString,s="function"==typeof Symbol&&!!Symbol.toStringTag,c=!(0 in[,]),h=function(){return!1};if("object"==typeof document){var p=document.all;a.call(p)===a.call(document.all)&&(h=function(n){if((c||!n)&&(void 0===n||"object"==typeof n))try{var t=a.call(n);return("[object HTMLAllCollection]"===t||"[object HTML document.all class]"===t||"[object HTMLCollection]"===t||"[object Object]"===t)&&null==n("")}catch(n){}return!1})}n.exports=r?function(n){if(h(n))return!0;if(!n)return!1;if("function"!=typeof n&&"object"!=typeof n)return!1;try{r(n,null,t)}catch(n){if(n!==e)return!1}return!u(n)&&o(n)}:function(n){if(h(n))return!0;if(!n)return!1;if("function"!=typeof n&&"object"!=typeof n)return!1;if(s)return o(n);if(u(n))return!1;var t=a.call(n);return!("[object Function]"!==t&&"[object GeneratorFunction]"!==t&&!/^\[object HTML/.test(t))&&o(n)}},8662:(n,t,e)=>{"use strict";var l,r=Object.prototype.toString,i=Function.prototype.toString,u=/^\s*(?:function)?\*/,o=e(6410)(),a=Object.getPrototypeOf;n.exports=function(n){if("function"!=typeof n)return!1;if(u.test(i.call(n)))return!0;if(!o)return"[object GeneratorFunction]"===r.call(n);if(!a)return!1;if(void 0===l){var t=function(){if(!o)return!1;try{return Function("return function*() {}")()}catch(n){}}();l=!!t&&a(t)}return a(n)===l}},5692:(n,t,e)=>{"use strict";var l=e(6430);n.exports=function(n){return!!l(n)}},1730:n=>{var t,e,l=9007199254740991,r="[object Function]",i="[object GeneratorFunction]",u=/^(?:0|[1-9]\d*)$/,o=Object.prototype,a=o.hasOwnProperty,s=o.toString,c=o.propertyIsEnumerable,h=(t=Object.keys,e=Object,function(n){return t(e(n))}),p=Math.max,d=!c.call({valueOf:1},"valueOf");function f(n,t,e){var l=n[t];a.call(n,t)&&g(l,e)&&(void 0!==e||t in n)||(n[t]=e)}function m(n,t){return!!(t=null==t?l:t)&&("number"==typeof n||u.test(n))&&n>-1&&n%1==0&&n<t}function v(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||o)}function g(n,t){return n===t||n!=n&&t!=t}var y=Array.isArray;function x(n){return null!=n&&function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=l}(n.length)&&!function(n){var t=b(n)?s.call(n):"";return t==r||t==i}(n)}function b(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}var _,w=(_=function(n,t){if(d||v(t)||x(t))!function(n,t,e,l){e||(e={});for(var r=-1,i=t.length;++r<i;){var u=t[r];f(e,u,n[u])}}(t,function(n){return x(n)?function(n,t){var e=y(n)||function(n){return function(n){return function(n){return!!n&&"object"==typeof n}(n)&&x(n)}(n)&&a.call(n,"callee")&&(!c.call(n,"callee")||"[object Arguments]"==s.call(n))}(n)?function(n,t){for(var e=-1,l=Array(n);++e<n;)l[e]=t(e);return l}(n.length,String):[],l=e.length,r=!!l;for(var i in n)!t&&!a.call(n,i)||r&&("length"==i||m(i,l))||e.push(i);return e}(n):function(n){if(!v(n))return h(n);var t=[];for(var e in Object(n))a.call(n,e)&&"constructor"!=e&&t.push(e);return t}(n)}(t),n);else for(var e in t)a.call(t,e)&&f(n,e,t[e])},function(n,t){return t=p(void 0===t?n.length-1:t,0),function(){for(var e=arguments,l=-1,r=p(e.length-t,0),i=Array(r);++l<r;)i[l]=e[t+l];l=-1;for(var u=Array(t+1);++l<t;)u[l]=e[l];return u[t]=i,function(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}(n,this,u)}}((function(n,t){var e=-1,l=t.length,r=l>1?t[l-1]:void 0,i=l>2?t[2]:void 0;for(r=_.length>3&&"function"==typeof r?(l--,r):void 0,i&&function(n,t,e){if(!b(e))return!1;var l=typeof t;return!!("number"==l?x(e)&&m(t,e.length):"string"==l&&t in e)&&g(e[t],n)}(t[0],t[1],i)&&(r=l<3?void 0:r,l=1),n=Object(n);++e<l;){var u=t[e];u&&_(n,u)}return n})));n.exports=w},3096:(n,t,e)=>{var l="Expected a function",r=NaN,i="[object Symbol]",u=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,s=/^0o[0-7]+$/i,c=parseInt,h="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,p="object"==typeof self&&self&&self.Object===Object&&self,d=h||p||Function("return this")(),f=Object.prototype.toString,m=Math.max,v=Math.min,g=function(){return d.Date.now()};function y(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}function x(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&f.call(n)==i}(n))return r;if(y(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=y(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(u,"");var e=a.test(n);return e||s.test(n)?c(n.slice(2),e?2:8):o.test(n)?r:+n}n.exports=function(n,t,e){var r=!0,i=!0;if("function"!=typeof n)throw new TypeError(l);return y(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),function(n,t,e){var r,i,u,o,a,s,c=0,h=!1,p=!1,d=!0;if("function"!=typeof n)throw new TypeError(l);function f(t){var e=r,l=i;return r=i=void 0,c=t,o=n.apply(l,e)}function b(n){var e=n-s;return void 0===s||e>=t||e<0||p&&n-c>=u}function _(){var n=g();if(b(n))return w(n);a=setTimeout(_,function(n){var e=t-(n-s);return p?v(e,u-(n-c)):e}(n))}function w(n){return a=void 0,d&&r?f(n):(r=i=void 0,o)}function M(){var n=g(),e=b(n);if(r=arguments,i=this,s=n,e){if(void 0===a)return function(n){return c=n,a=setTimeout(_,t),h?f(n):o}(s);if(p)return a=setTimeout(_,t),f(s)}return void 0===a&&(a=setTimeout(_,t)),o}return t=x(t)||0,y(e)&&(h=!!e.leading,u=(p="maxWait"in e)?m(x(e.maxWait)||0,t):u,d="trailing"in e?!!e.trailing:d),M.cancel=function(){void 0!==a&&clearTimeout(a),c=0,r=s=i=a=void 0},M.flush=function(){return void 0===a?o:w(g())},M}(n,t,{leading:r,maxWait:t,trailing:i})}},9593:(n,t,e)=>{"use strict";n.exports=g;var l,r=e(9246),i=e(9539),u=e(4411),o=(l="function"==typeof Symbol&&"1"!==process.env._nodeLRUCacheForceNoSymbol?function(n){return Symbol(n)}:function(n){return"_"+n})("max"),a=l("length"),s=l("lengthCalculator"),c=l("allowStale"),h=l("maxAge"),p=l("dispose"),d=l("noDisposeOnSet"),f=l("lruList"),m=l("cache");function v(){return 1}function g(n){if(!(this instanceof g))return new g(n);"number"==typeof n&&(n={max:n}),n||(n={});var t=this[o]=n.max;(!t||"number"!=typeof t||t<=0)&&(this[o]=1/0);var e=n.length||v;"function"!=typeof e&&(e=v),this[s]=e,this[c]=n.stale||!1,this[h]=n.maxAge||0,this[p]=n.dispose,this[d]=n.noDisposeOnSet||!1,this.reset()}function y(n,t,e,l){var r=e.value;b(n,r)&&(w(n,e),n[c]||(r=void 0)),r&&t.call(l,r.value,r.key,n)}function x(n,t,e){var l=n[m].get(t);if(l){var r=l.value;b(n,r)?(w(n,l),n[c]||(r=void 0)):e&&n[f].unshiftNode(l),r&&(r=r.value)}return r}function b(n,t){if(!t||!t.maxAge&&!n[h])return!1;var e=Date.now()-t.now;return t.maxAge?e>t.maxAge:n[h]&&e>n[h]}function _(n){if(n[a]>n[o])for(var t=n[f].tail;n[a]>n[o]&&null!==t;){var e=t.prev;w(n,t),t=e}}function w(n,t){if(t){var e=t.value;n[p]&&n[p](e.key,e.value),n[a]-=e.length,n[m].delete(e.key),n[f].removeNode(t)}}function M(n,t,e,l,r){this.key=n,this.value=t,this.length=e,this.now=l,this.maxAge=r||0}Object.defineProperty(g.prototype,"max",{set:function(n){(!n||"number"!=typeof n||n<=0)&&(n=1/0),this[o]=n,_(this)},get:function(){return this[o]},enumerable:!0}),Object.defineProperty(g.prototype,"allowStale",{set:function(n){this[c]=!!n},get:function(){return this[c]},enumerable:!0}),Object.defineProperty(g.prototype,"maxAge",{set:function(n){(!n||"number"!=typeof n||n<0)&&(n=0),this[h]=n,_(this)},get:function(){return this[h]},enumerable:!0}),Object.defineProperty(g.prototype,"lengthCalculator",{set:function(n){"function"!=typeof n&&(n=v),n!==this[s]&&(this[s]=n,this[a]=0,this[f].forEach((function(n){n.length=this[s](n.value,n.key),this[a]+=n.length}),this)),_(this)},get:function(){return this[s]},enumerable:!0}),Object.defineProperty(g.prototype,"length",{get:function(){return this[a]},enumerable:!0}),Object.defineProperty(g.prototype,"itemCount",{get:function(){return this[f].length},enumerable:!0}),g.prototype.rforEach=function(n,t){t=t||this;for(var e=this[f].tail;null!==e;){var l=e.prev;y(this,n,e,t),e=l}},g.prototype.forEach=function(n,t){t=t||this;for(var e=this[f].head;null!==e;){var l=e.next;y(this,n,e,t),e=l}},g.prototype.keys=function(){return this[f].toArray().map((function(n){return n.key}),this)},g.prototype.values=function(){return this[f].toArray().map((function(n){return n.value}),this)},g.prototype.reset=function(){this[p]&&this[f]&&this[f].length&&this[f].forEach((function(n){this[p](n.key,n.value)}),this),this[m]=new r,this[f]=new u,this[a]=0},g.prototype.dump=function(){return this[f].map((function(n){if(!b(this,n))return{k:n.key,v:n.value,e:n.now+(n.maxAge||0)}}),this).toArray().filter((function(n){return n}))},g.prototype.dumpLru=function(){return this[f]},g.prototype.inspect=function(n,t){var e="LRUCache {",l=!1;this[c]&&(e+="\n  allowStale: true",l=!0);var r=this[o];r&&r!==1/0&&(l&&(e+=","),e+="\n  max: "+i.inspect(r,t),l=!0);var u=this[h];u&&(l&&(e+=","),e+="\n  maxAge: "+i.inspect(u,t),l=!0);var p=this[s];p&&p!==v&&(l&&(e+=","),e+="\n  length: "+i.inspect(this[a],t),l=!0);var d=!1;return this[f].forEach((function(n){d?e+=",\n  ":(l&&(e+=",\n"),d=!0,e+="\n  ");var r=i.inspect(n.key).split("\n").join("\n  "),o={value:n.value};n.maxAge!==u&&(o.maxAge=n.maxAge),p!==v&&(o.length=n.length),b(this,n)&&(o.stale=!0),o=i.inspect(o,t).split("\n").join("\n  "),e+=r+" => "+o})),(d||l)&&(e+="\n"),e+="}"},g.prototype.set=function(n,t,e){var l=(e=e||this[h])?Date.now():0,r=this[s](t,n);if(this[m].has(n)){if(r>this[o])return w(this,this[m].get(n)),!1;var i=this[m].get(n).value;return this[p]&&(this[d]||this[p](n,i.value)),i.now=l,i.maxAge=e,i.value=t,this[a]+=r-i.length,i.length=r,this.get(n),_(this),!0}var u=new M(n,t,r,l,e);return u.length>this[o]?(this[p]&&this[p](n,t),!1):(this[a]+=u.length,this[f].unshift(u),this[m].set(n,this[f].head),_(this),!0)},g.prototype.has=function(n){return!!this[m].has(n)&&!b(this,this[m].get(n).value)},g.prototype.get=function(n){return x(this,n,!0)},g.prototype.peek=function(n){return x(this,n,!1)},g.prototype.pop=function(){var n=this[f].tail;return n?(w(this,n),n.value):null},g.prototype.del=function(n){w(this,this[m].get(n))},g.prototype.load=function(n){this.reset();for(var t=Date.now(),e=n.length-1;e>=0;e--){var l=n[e],r=l.e||0;if(0===r)this.set(l.k,l.v);else{var i=r-t;i>0&&this.set(l.k,l.v,i)}}},g.prototype.prune=function(){var n=this;this[m].forEach((function(t,e){x(n,e,!1)}))}},921:n=>{n.exports=function(n,t,e){for(var l=(2<<Math.log(t.length-1)/Math.LN2)-1,r=-~(1.6*l*e/t.length),i="";;)for(var u=n(r),o=r;o--;)if((i+=t[u[o]&l]||"").length===+e)return i}},3614:(n,t,e)=>{"use strict";n.exports=r;var l=e(645);function r(n){this.buf=ArrayBuffer.isView&&ArrayBuffer.isView(n)?n:new Uint8Array(n||0),this.pos=0,this.type=0,this.length=this.buf.length}r.Varint=0,r.Fixed64=1,r.Bytes=2,r.Fixed32=5;var i=4294967296,u=1/i,o="undefined"==typeof TextDecoder?null:new TextDecoder("utf8");function a(n){return n.type===r.Bytes?n.readVarint()+n.pos:n.pos+1}function s(n,t,e){return e?4294967296*t+(n>>>0):4294967296*(t>>>0)+(n>>>0)}function c(n,t,e){var l=t<=16383?1:t<=2097151?2:t<=268435455?3:Math.floor(Math.log(t)/(7*Math.LN2));e.realloc(l);for(var r=e.pos-1;r>=n;r--)e.buf[r+l]=e.buf[r]}function h(n,t){for(var e=0;e<n.length;e++)t.writeVarint(n[e])}function p(n,t){for(var e=0;e<n.length;e++)t.writeSVarint(n[e])}function d(n,t){for(var e=0;e<n.length;e++)t.writeFloat(n[e])}function f(n,t){for(var e=0;e<n.length;e++)t.writeDouble(n[e])}function m(n,t){for(var e=0;e<n.length;e++)t.writeBoolean(n[e])}function v(n,t){for(var e=0;e<n.length;e++)t.writeFixed32(n[e])}function g(n,t){for(var e=0;e<n.length;e++)t.writeSFixed32(n[e])}function y(n,t){for(var e=0;e<n.length;e++)t.writeFixed64(n[e])}function x(n,t){for(var e=0;e<n.length;e++)t.writeSFixed64(n[e])}function b(n,t){return(n[t]|n[t+1]<<8|n[t+2]<<16)+16777216*n[t+3]}function _(n,t,e){n[e]=t,n[e+1]=t>>>8,n[e+2]=t>>>16,n[e+3]=t>>>24}function w(n,t){return(n[t]|n[t+1]<<8|n[t+2]<<16)+(n[t+3]<<24)}r.prototype={destroy:function(){this.buf=null},readFields:function(n,t,e){for(e=e||this.length;this.pos<e;){var l=this.readVarint(),r=l>>3,i=this.pos;this.type=7&l,n(r,t,this),this.pos===i&&this.skip(l)}return t},readMessage:function(n,t){return this.readFields(n,t,this.readVarint()+this.pos)},readFixed32:function(){var n=b(this.buf,this.pos);return this.pos+=4,n},readSFixed32:function(){var n=w(this.buf,this.pos);return this.pos+=4,n},readFixed64:function(){var n=b(this.buf,this.pos)+b(this.buf,this.pos+4)*i;return this.pos+=8,n},readSFixed64:function(){var n=b(this.buf,this.pos)+w(this.buf,this.pos+4)*i;return this.pos+=8,n},readFloat:function(){var n=l.read(this.buf,this.pos,!0,23,4);return this.pos+=4,n},readDouble:function(){var n=l.read(this.buf,this.pos,!0,52,8);return this.pos+=8,n},readVarint:function(n){var t,e,l=this.buf;return t=127&(e=l[this.pos++]),e<128?t:(t|=(127&(e=l[this.pos++]))<<7,e<128?t:(t|=(127&(e=l[this.pos++]))<<14,e<128?t:(t|=(127&(e=l[this.pos++]))<<21,e<128?t:function(n,t,e){var l,r,i=e.buf;if(l=(112&(r=i[e.pos++]))>>4,r<128)return s(n,l,t);if(l|=(127&(r=i[e.pos++]))<<3,r<128)return s(n,l,t);if(l|=(127&(r=i[e.pos++]))<<10,r<128)return s(n,l,t);if(l|=(127&(r=i[e.pos++]))<<17,r<128)return s(n,l,t);if(l|=(127&(r=i[e.pos++]))<<24,r<128)return s(n,l,t);if(l|=(1&(r=i[e.pos++]))<<31,r<128)return s(n,l,t);throw new Error("Expected varint not more than 10 bytes")}(t|=(15&(e=l[this.pos]))<<28,n,this))))},readVarint64:function(){return this.readVarint(!0)},readSVarint:function(){var n=this.readVarint();return n%2==1?(n+1)/-2:n/2},readBoolean:function(){return Boolean(this.readVarint())},readString:function(){var n=this.readVarint()+this.pos,t=this.pos;return this.pos=n,n-t>=12&&o?function(n,t,e){return o.decode(n.subarray(t,e))}(this.buf,t,n):function(n,t,e){for(var l="",r=t;r<e;){var i,u,o,a=n[r],s=null,c=a>239?4:a>223?3:a>191?2:1;if(r+c>e)break;1===c?a<128&&(s=a):2===c?128==(192&(i=n[r+1]))&&(s=(31&a)<<6|63&i)<=127&&(s=null):3===c?(i=n[r+1],u=n[r+2],128==(192&i)&&128==(192&u)&&((s=(15&a)<<12|(63&i)<<6|63&u)<=2047||s>=55296&&s<=57343)&&(s=null)):4===c&&(i=n[r+1],u=n[r+2],o=n[r+3],128==(192&i)&&128==(192&u)&&128==(192&o)&&((s=(15&a)<<18|(63&i)<<12|(63&u)<<6|63&o)<=65535||s>=1114112)&&(s=null)),null===s?(s=65533,c=1):s>65535&&(s-=65536,l+=String.fromCharCode(s>>>10&1023|55296),s=56320|1023&s),l+=String.fromCharCode(s),r+=c}return l}(this.buf,t,n)},readBytes:function(){var n=this.readVarint()+this.pos,t=this.buf.subarray(this.pos,n);return this.pos=n,t},readPackedVarint:function(n,t){if(this.type!==r.Bytes)return n.push(this.readVarint(t));var e=a(this);for(n=n||[];this.pos<e;)n.push(this.readVarint(t));return n},readPackedSVarint:function(n){if(this.type!==r.Bytes)return n.push(this.readSVarint());var t=a(this);for(n=n||[];this.pos<t;)n.push(this.readSVarint());return n},readPackedBoolean:function(n){if(this.type!==r.Bytes)return n.push(this.readBoolean());var t=a(this);for(n=n||[];this.pos<t;)n.push(this.readBoolean());return n},readPackedFloat:function(n){if(this.type!==r.Bytes)return n.push(this.readFloat());var t=a(this);for(n=n||[];this.pos<t;)n.push(this.readFloat());return n},readPackedDouble:function(n){if(this.type!==r.Bytes)return n.push(this.readDouble());var t=a(this);for(n=n||[];this.pos<t;)n.push(this.readDouble());return n},readPackedFixed32:function(n){if(this.type!==r.Bytes)return n.push(this.readFixed32());var t=a(this);for(n=n||[];this.pos<t;)n.push(this.readFixed32());return n},readPackedSFixed32:function(n){if(this.type!==r.Bytes)return n.push(this.readSFixed32());var t=a(this);for(n=n||[];this.pos<t;)n.push(this.readSFixed32());return n},readPackedFixed64:function(n){if(this.type!==r.Bytes)return n.push(this.readFixed64());var t=a(this);for(n=n||[];this.pos<t;)n.push(this.readFixed64());return n},readPackedSFixed64:function(n){if(this.type!==r.Bytes)return n.push(this.readSFixed64());var t=a(this);for(n=n||[];this.pos<t;)n.push(this.readSFixed64());return n},skip:function(n){var t=7&n;if(t===r.Varint)for(;this.buf[this.pos++]>127;);else if(t===r.Bytes)this.pos=this.readVarint()+this.pos;else if(t===r.Fixed32)this.pos+=4;else{if(t!==r.Fixed64)throw new Error("Unimplemented type: "+t);this.pos+=8}},writeTag:function(n,t){this.writeVarint(n<<3|t)},realloc:function(n){for(var t=this.length||16;t<this.pos+n;)t*=2;if(t!==this.length){var e=new Uint8Array(t);e.set(this.buf),this.buf=e,this.length=t}},finish:function(){return this.length=this.pos,this.pos=0,this.buf.subarray(0,this.length)},writeFixed32:function(n){this.realloc(4),_(this.buf,n,this.pos),this.pos+=4},writeSFixed32:function(n){this.realloc(4),_(this.buf,n,this.pos),this.pos+=4},writeFixed64:function(n){this.realloc(8),_(this.buf,-1&n,this.pos),_(this.buf,Math.floor(n*u),this.pos+4),this.pos+=8},writeSFixed64:function(n){this.realloc(8),_(this.buf,-1&n,this.pos),_(this.buf,Math.floor(n*u),this.pos+4),this.pos+=8},writeVarint:function(n){(n=+n||0)>268435455||n<0?function(n,t){var e,l;if(n>=0?(e=n%4294967296|0,l=n/4294967296|0):(l=~(-n/4294967296),4294967295^(e=~(-n%4294967296))?e=e+1|0:(e=0,l=l+1|0)),n>=0x10000000000000000||n<-0x10000000000000000)throw new Error("Given varint doesn't fit into 10 bytes");t.realloc(10),function(n,t,e){e.buf[e.pos++]=127&n|128,n>>>=7,e.buf[e.pos++]=127&n|128,n>>>=7,e.buf[e.pos++]=127&n|128,n>>>=7,e.buf[e.pos++]=127&n|128,n>>>=7,e.buf[e.pos]=127&n}(e,0,t),function(n,t){var e=(7&n)<<4;t.buf[t.pos++]|=e|((n>>>=3)?128:0),n&&(t.buf[t.pos++]=127&n|((n>>>=7)?128:0),n&&(t.buf[t.pos++]=127&n|((n>>>=7)?128:0),n&&(t.buf[t.pos++]=127&n|((n>>>=7)?128:0),n&&(t.buf[t.pos++]=127&n|((n>>>=7)?128:0),n&&(t.buf[t.pos++]=127&n)))))}(l,t)}(n,this):(this.realloc(4),this.buf[this.pos++]=127&n|(n>127?128:0),n<=127||(this.buf[this.pos++]=127&(n>>>=7)|(n>127?128:0),n<=127||(this.buf[this.pos++]=127&(n>>>=7)|(n>127?128:0),n<=127||(this.buf[this.pos++]=n>>>7&127))))},writeSVarint:function(n){this.writeVarint(n<0?2*-n-1:2*n)},writeBoolean:function(n){this.writeVarint(Boolean(n))},writeString:function(n){n=String(n),this.realloc(4*n.length),this.pos++;var t=this.pos;this.pos=function(n,t,e){for(var l,r,i=0;i<t.length;i++){if((l=t.charCodeAt(i))>55295&&l<57344){if(!r){l>56319||i+1===t.length?(n[e++]=239,n[e++]=191,n[e++]=189):r=l;continue}if(l<56320){n[e++]=239,n[e++]=191,n[e++]=189,r=l;continue}l=r-55296<<10|l-56320|65536,r=null}else r&&(n[e++]=239,n[e++]=191,n[e++]=189,r=null);l<128?n[e++]=l:(l<2048?n[e++]=l>>6|192:(l<65536?n[e++]=l>>12|224:(n[e++]=l>>18|240,n[e++]=l>>12&63|128),n[e++]=l>>6&63|128),n[e++]=63&l|128)}return e}(this.buf,n,this.pos);var e=this.pos-t;e>=128&&c(t,e,this),this.pos=t-1,this.writeVarint(e),this.pos+=e},writeFloat:function(n){this.realloc(4),l.write(this.buf,n,this.pos,!0,23,4),this.pos+=4},writeDouble:function(n){this.realloc(8),l.write(this.buf,n,this.pos,!0,52,8),this.pos+=8},writeBytes:function(n){var t=n.length;this.writeVarint(t),this.realloc(t);for(var e=0;e<t;e++)this.buf[this.pos++]=n[e]},writeRawMessage:function(n,t){this.pos++;var e=this.pos;n(t,this);var l=this.pos-e;l>=128&&c(e,l,this),this.pos=e-1,this.writeVarint(l),this.pos+=l},writeMessage:function(n,t,e){this.writeTag(n,r.Bytes),this.writeRawMessage(t,e)},writePackedVarint:function(n,t){t.length&&this.writeMessage(n,h,t)},writePackedSVarint:function(n,t){t.length&&this.writeMessage(n,p,t)},writePackedBoolean:function(n,t){t.length&&this.writeMessage(n,m,t)},writePackedFloat:function(n,t){t.length&&this.writeMessage(n,d,t)},writePackedDouble:function(n,t){t.length&&this.writeMessage(n,f,t)},writePackedFixed32:function(n,t){t.length&&this.writeMessage(n,v,t)},writePackedSFixed32:function(n,t){t.length&&this.writeMessage(n,g,t)},writePackedFixed64:function(n,t){t.length&&this.writeMessage(n,y,t)},writePackedSFixed64:function(n,t){t.length&&this.writeMessage(n,x,t)},writeBytesField:function(n,t){this.writeTag(n,r.Bytes),this.writeBytes(t)},writeFixed32Field:function(n,t){this.writeTag(n,r.Fixed32),this.writeFixed32(t)},writeSFixed32Field:function(n,t){this.writeTag(n,r.Fixed32),this.writeSFixed32(t)},writeFixed64Field:function(n,t){this.writeTag(n,r.Fixed64),this.writeFixed64(t)},writeSFixed64Field:function(n,t){this.writeTag(n,r.Fixed64),this.writeSFixed64(t)},writeVarintField:function(n,t){this.writeTag(n,r.Varint),this.writeVarint(t)},writeSVarintField:function(n,t){this.writeTag(n,r.Varint),this.writeSVarint(t)},writeStringField:function(n,t){this.writeTag(n,r.Bytes),this.writeString(t)},writeFloatField:function(n,t){this.writeTag(n,r.Fixed32),this.writeFloat(t)},writeDoubleField:function(n,t){this.writeTag(n,r.Fixed64),this.writeDouble(t)},writeBooleanField:function(n,t){this.writeVarintField(n,Boolean(t))}}},9246:(n,t,e)=>{"pseudomap"===process.env.npm_package_name&&"test"===process.env.npm_lifecycle_script&&(process.env.TEST_PSEUDOMAP="true"),"function"!=typeof Map||process.env.TEST_PSEUDOMAP?n.exports=e(2477):n.exports=Map},2477:n=>{var t=Object.prototype.hasOwnProperty;function e(n){if(!(this instanceof e))throw new TypeError("Constructor PseudoMap requires 'new'");if(this.clear(),n)if(n instanceof e||"function"==typeof Map&&n instanceof Map)n.forEach((function(n,t){this.set(t,n)}),this);else{if(!Array.isArray(n))throw new TypeError("invalid argument");n.forEach((function(n){this.set(n[0],n[1])}),this)}}function l(n,t){return n===t||n!=n&&t!=t}function r(n,t,e){this.key=n,this.value=t,this._index=e}function i(n,e){for(var r=0,i="_"+e,u=i;t.call(n,u);u=i+r++)if(l(n[u].key,e))return n[u]}n.exports=e,e.prototype.forEach=function(n,t){t=t||this,Object.keys(this._data).forEach((function(e){"size"!==e&&n.call(t,this._data[e].value,this._data[e].key)}),this)},e.prototype.has=function(n){return!!i(this._data,n)},e.prototype.get=function(n){var t=i(this._data,n);return t&&t.value},e.prototype.set=function(n,e){!function(n,e,i){for(var u=0,o="_"+e,a=o;t.call(n,a);a=o+u++)if(l(n[a].key,e))return void(n[a].value=i);n.size++,n[a]=new r(e,i,a)}(this._data,n,e)},e.prototype.delete=function(n){var t=i(this._data,n);t&&(delete this._data[t._index],this._data.size--)},e.prototype.clear=function(){var n=Object.create(null);n.size=0,Object.defineProperty(this,"_data",{value:n,enumerable:!1,configurable:!0,writable:!1})},Object.defineProperty(e.prototype,"size",{get:function(){return this._data.size},set:function(n){},enumerable:!0,configurable:!0}),e.prototype.values=e.prototype.keys=e.prototype.entries=function(){throw new Error("iterators are not implemented in this version")}},7643:function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__,definition;definition=function(){var context=this,XHR2;if("window"in context)var doc=document,byTag="getElementsByTagName",head=doc[byTag]("head")[0];else try{XHR2=__webpack_require__(2676)}catch(n){throw new Error("Peer dependency `xhr2` required! Please npm install xhr2")}var httpsRe=/^http/,protocolRe=/(^\w+):\/\//,twoHundo=/^(20\d|1223)$/,readyState="readyState",contentType="Content-Type",requestedWith="X-Requested-With",uniqid=0,callbackPrefix="reqwest_"+ +new Date,lastValue,xmlHttpRequest="XMLHttpRequest",xDomainRequest="XDomainRequest",noop=function(){},isArray="function"==typeof Array.isArray?Array.isArray:function(n){return n instanceof Array},defaultHeaders={contentType:"application/x-www-form-urlencoded",requestedWith:xmlHttpRequest,accept:{"*":"text/javascript, text/html, application/xml, text/xml, */*",xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript",js:"application/javascript, text/javascript"}},xhr=function(n){if(!0===n.crossOrigin){var t=context[xmlHttpRequest]?new XMLHttpRequest:null;if(t&&"withCredentials"in t)return t;if(context[xDomainRequest])return new XDomainRequest;throw new Error("Browser does not support cross-origin requests")}return context[xmlHttpRequest]?new XMLHttpRequest:XHR2?new XHR2:new ActiveXObject("Microsoft.XMLHTTP")},globalSetupOptions={dataFilter:function(n){return n}};function succeed(n){var t=protocolRe.exec(n.url);return t=t&&t[1]||context.location.protocol,httpsRe.test(t)?twoHundo.test(n.request.status):!!n.request.response}function handleReadyState(n,t,e){return function(){return n._aborted?e(n.request):n._timedOut?e(n.request,"Request is aborted: timeout"):void(n.request&&4==n.request[readyState]&&(n.request.onreadystatechange=noop,succeed(n)?t(n.request):e(n.request)))}}function setHeaders(n,t){var e,l=t.headers||{};l.Accept=l.Accept||defaultHeaders.accept[t.type]||defaultHeaders.accept["*"];var r="undefined"!=typeof FormData&&t.data instanceof FormData;for(e in t.crossOrigin||l[requestedWith]||(l[requestedWith]=defaultHeaders.requestedWith),l[contentType]||r||(l[contentType]=t.contentType||defaultHeaders.contentType),l)l.hasOwnProperty(e)&&"setRequestHeader"in n&&n.setRequestHeader(e,l[e])}function setCredentials(n,t){void 0!==t.withCredentials&&void 0!==n.withCredentials&&(n.withCredentials=!!t.withCredentials)}function generalCallback(n){lastValue=n}function urlappend(n,t){return n+(/\?/.test(n)?"&":"?")+t}function handleJsonp(n,t,e,l){var r=uniqid++,i=n.jsonpCallback||"callback",u=n.jsonpCallbackName||reqwest.getcallbackPrefix(r),o=new RegExp("((^|\\?|&)"+i+")=([^&]+)"),a=l.match(o),s=doc.createElement("script"),c=0,h=-1!==navigator.userAgent.indexOf("MSIE 10.0");return a?"?"===a[3]?l=l.replace(o,"$1="+u):u=a[3]:l=urlappend(l,i+"="+u),context[u]=generalCallback,s.type="text/javascript",s.src=l,s.async=!0,void 0===s.onreadystatechange||h||(s.htmlFor=s.id="_reqwest_"+r),s.onload=s.onreadystatechange=function(){if(s[readyState]&&"complete"!==s[readyState]&&"loaded"!==s[readyState]||c)return!1;s.onload=s.onreadystatechange=null,s.onclick&&s.onclick(),t(lastValue),lastValue=void 0,head.removeChild(s),c=1},head.appendChild(s),{abort:function(){s.onload=s.onreadystatechange=null,e({},"Request is aborted: timeout",{}),lastValue=void 0,head.removeChild(s),c=1}}}function getRequest(n,t){var e,l=this.o,r=(l.method||"GET").toUpperCase(),i="string"==typeof l?l:l.url,u=!1!==l.processData&&l.data&&"string"!=typeof l.data?reqwest.toQueryString(l.data):l.data||null,o=!1;return"jsonp"!=l.type&&"GET"!=r||!u||(i=urlappend(i,u),u=null),"jsonp"==l.type?handleJsonp(l,n,t,i):((e=l.xhr&&l.xhr(l)||xhr(l)).open(r,i,!1!==l.async),setHeaders(e,l),setCredentials(e,l),context[xDomainRequest]&&e instanceof context[xDomainRequest]?(e.onload=n,e.onerror=t,e.onprogress=function(){},o=!0):e.onreadystatechange=handleReadyState(this,n,t),l.before&&l.before(e),o?setTimeout((function(){e.send(u)}),200):e.send(u),e)}function Reqwest(n,t){this.o=n,this.fn=t,init.apply(this,arguments)}function setType(n){if(null!==n)return n.match("json")?"json":n.match("javascript")?"js":n.match("text")?"html":n.match("xml")?"xml":void 0}function init(o,fn){this.url="string"==typeof o?o:o.url,this.timeout=null,this._fulfilled=!1,this._successHandler=function(){},this._fulfillmentHandlers=[],this._errorHandlers=[],this._completeHandlers=[],this._erred=!1,this._responseArgs={};var self=this;function complete(n){for(o.timeout&&clearTimeout(self.timeout),self.timeout=null;self._completeHandlers.length>0;)self._completeHandlers.shift()(n)}function success(resp){var type=o.type||resp&&setType(resp.getResponseHeader("Content-Type"));resp="jsonp"!==type?self.request:resp;var filteredResponse=globalSetupOptions.dataFilter(resp.responseText,type),r=filteredResponse;try{resp.responseText=r}catch(n){}if(r)switch(type){case"json":try{resp=context.JSON?context.JSON.parse(r):eval("("+r+")")}catch(n){return error(resp,"Could not parse JSON in response",n)}break;case"js":resp=eval(r);break;case"html":resp=r;break;case"xml":resp=resp.responseXML&&resp.responseXML.parseError&&resp.responseXML.parseError.errorCode&&resp.responseXML.parseError.reason?null:resp.responseXML}for(self._responseArgs.resp=resp,self._fulfilled=!0,fn(resp),self._successHandler(resp);self._fulfillmentHandlers.length>0;)resp=self._fulfillmentHandlers.shift()(resp);complete(resp)}function timedOut(){self._timedOut=!0,self.request.abort()}function error(n,t,e){for(n=self.request,self._responseArgs.resp=n,self._responseArgs.msg=t,self._responseArgs.t=e,self._erred=!0;self._errorHandlers.length>0;)self._errorHandlers.shift()(n,t,e);complete(n)}fn=fn||function(){},o.timeout&&(this.timeout=setTimeout((function(){timedOut()}),o.timeout)),o.success&&(this._successHandler=function(){o.success.apply(o,arguments)}),o.error&&this._errorHandlers.push((function(){o.error.apply(o,arguments)})),o.complete&&this._completeHandlers.push((function(){o.complete.apply(o,arguments)})),this.request=getRequest.call(this,success,error)}function reqwest(n,t){return new Reqwest(n,t)}function normalize(n){return n?n.replace(/\r?\n/g,"\r\n"):""}function serial(n,t){var e,l,r,i,u=n.name,o=n.tagName.toLowerCase(),a=function(n){n&&!n.disabled&&t(u,normalize(n.attributes.value&&n.attributes.value.specified?n.value:n.text))};if(!n.disabled&&u)switch(o){case"input":/reset|button|image|file/i.test(n.type)||(e=/checkbox/i.test(n.type),l=/radio/i.test(n.type),r=n.value,(!e&&!l||n.checked)&&t(u,normalize(e&&""===r?"on":r)));break;case"textarea":t(u,normalize(n.value));break;case"select":if("select-one"===n.type.toLowerCase())a(n.selectedIndex>=0?n.options[n.selectedIndex]:null);else for(i=0;n.length&&i<n.length;i++)n.options[i].selected&&a(n.options[i])}}function eachFormElement(){var n,t,e=this,l=function(n,t){var l,r,i;for(l=0;l<t.length;l++)for(i=n[byTag](t[l]),r=0;r<i.length;r++)serial(i[r],e)};for(t=0;t<arguments.length;t++)/input|select|textarea/i.test((n=arguments[t]).tagName)&&serial(n,e),l(n,["input","select","textarea"])}function serializeQueryString(){return reqwest.toQueryString(reqwest.serializeArray.apply(null,arguments))}function serializeHash(){var n={};return eachFormElement.apply((function(t,e){t in n?(n[t]&&!isArray(n[t])&&(n[t]=[n[t]]),n[t].push(e)):n[t]=e}),arguments),n}function buildParams(n,t,e,l){var r,i,u,o=/\[\]$/;if(isArray(t))for(i=0;t&&i<t.length;i++)u=t[i],e||o.test(n)?l(n,u):buildParams(n+"["+("object"==typeof u?i:"")+"]",u,e,l);else if(t&&"[object Object]"===t.toString())for(r in t)buildParams(n+"["+r+"]",t[r],e,l);else l(n,t)}return Reqwest.prototype={abort:function(){this._aborted=!0,this.request.abort()},retry:function(){init.call(this,this.o,this.fn)},then:function(n,t){return n=n||function(){},t=t||function(){},this._fulfilled?this._responseArgs.resp=n(this._responseArgs.resp):this._erred?t(this._responseArgs.resp,this._responseArgs.msg,this._responseArgs.t):(this._fulfillmentHandlers.push(n),this._errorHandlers.push(t)),this},always:function(n){return this._fulfilled||this._erred?n(this._responseArgs.resp):this._completeHandlers.push(n),this},fail:function(n){return this._erred?n(this._responseArgs.resp,this._responseArgs.msg,this._responseArgs.t):this._errorHandlers.push(n),this},catch:function(n){return this.fail(n)}},reqwest.serializeArray=function(){var n=[];return eachFormElement.apply((function(t,e){n.push({name:t,value:e})}),arguments),n},reqwest.serialize=function(){if(0===arguments.length)return"";var n,t=Array.prototype.slice.call(arguments,0);return(n=t.pop())&&n.nodeType&&t.push(n)&&(n=null),n&&(n=n.type),("map"==n?serializeHash:"array"==n?reqwest.serializeArray:serializeQueryString).apply(null,t)},reqwest.toQueryString=function(n,t){var e,l,r=t||!1,i=[],u=encodeURIComponent,o=function(n,t){t="function"==typeof t?t():null==t?"":t,i[i.length]=u(n)+"="+u(t)};if(isArray(n))for(l=0;n&&l<n.length;l++)o(n[l].name,n[l].value);else for(e in n)n.hasOwnProperty(e)&&buildParams(e,n[e],r,o);return i.join("&").replace(/%20/g,"+")},reqwest.getcallbackPrefix=function(){return callbackPrefix},reqwest.compat=function(n,t){return n&&(n.type&&(n.method=n.type)&&delete n.type,n.dataType&&(n.type=n.dataType),n.jsonpCallback&&(n.jsonpCallbackName=n.jsonpCallback)&&delete n.jsonpCallback,n.jsonp&&(n.jsonpCallback=n.jsonp)),new Reqwest(n,t)},reqwest.ajaxSetup=function(n){for(var t in n=n||{})globalSetupOptions[t]=n[t]},reqwest},module.exports?module.exports=definition():void 0===(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof(__WEBPACK_AMD_DEFINE_FACTORY__=definition)?__WEBPACK_AMD_DEFINE_FACTORY__.call(exports,__webpack_require__,exports,module):__WEBPACK_AMD_DEFINE_FACTORY__)||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},7771:(n,t,e)=>{"use strict";var l=e(210),r=e(2296),i=e(1044)(),u=e(7296),o=l("%TypeError%"),a=l("%Math.floor%");n.exports=function(n,t){if("function"!=typeof n)throw new o("`fn` is not a function");if("number"!=typeof t||t<0||t>4294967295||a(t)!==t)throw new o("`length` must be a positive 32-bit integer");var e=arguments.length>2&&!!arguments[2],l=!0,s=!0;if("length"in n&&u){var c=u(n,"length");c&&!c.configurable&&(l=!1),c&&!c.writable&&(s=!1)}return(l||s||!e)&&(i?r(n,"length",t,!0,!0):r(n,"length",t)),n}},4670:(n,t,e)=>{"use strict";n.exports=e(5607)},9829:(n,t,e)=>{"use strict";var l,r,i,u=e(8946),o="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-";function a(){i=!1}function s(n){if(n){if(n!==l){if(n.length!==o.length)throw new Error("Custom alphabet for shortid must be "+o.length+" unique characters. You submitted "+n.length+" characters: "+n);var t=n.split("").filter((function(n,t,e){return t!==e.lastIndexOf(n)}));if(t.length)throw new Error("Custom alphabet for shortid must be "+o.length+" unique characters. These characters were not unique: "+t.join(", "));l=n,a()}}else l!==o&&(l=o,a())}function c(){return i||(i=function(){l||s(o);for(var n,t=l.split(""),e=[],r=u.nextValue();t.length>0;)r=u.nextValue(),n=Math.floor(r*t.length),e.push(t.splice(n,1)[0]);return e.join("")}())}n.exports={get:function(){return l||o},characters:function(n){return s(n),l},seed:function(n){u.seed(n),r!==n&&(a(),r=n)},lookup:function(n){return c()[n]},shuffled:c}},480:(n,t,e)=>{"use strict";var l,r,i=e(8416);e(9829),n.exports=function(n){var t="",e=Math.floor(.001*(Date.now()-1567752802062));return e===r?l++:(l=0,r=e),t+=i(7),t+=i(n),l>0&&(t+=i(l)),t+i(e)}},8416:(n,t,e)=>{"use strict";var l=e(9829),r=e(3766),i=e(921);n.exports=function(n){for(var t,e=0,u="";!t;)u+=i(r,l.get(),1),t=n<Math.pow(16,e+1),e++;return u}},5607:(n,t,e)=>{"use strict";var l=e(9829),r=e(480),i=e(1082),u=e(5636)||0;function o(){return r(u)}n.exports=o,n.exports.generate=o,n.exports.seed=function(t){return l.seed(t),n.exports},n.exports.worker=function(t){return u=t,n.exports},n.exports.characters=function(n){return void 0!==n&&l.characters(n),l.shuffled()},n.exports.isValid=i},1082:(n,t,e)=>{"use strict";var l=e(9829);n.exports=function(n){return!(!n||"string"!=typeof n||n.length<6||new RegExp("[^"+l.get().replace(/[|\\{}()[\]^$+*?.-]/g,"\\$&")+"]").test(n))}},3766:n=>{"use strict";var t,e="object"==typeof window&&(window.crypto||window.msCrypto);t=e&&e.getRandomValues?function(n){return e.getRandomValues(new Uint8Array(n))}:function(n){for(var t=[],e=0;e<n;e++)t.push(Math.floor(256*Math.random()));return t},n.exports=t},8946:n=>{"use strict";var t=1;n.exports={nextValue:function(){return(t=(9301*t+49297)%233280)/233280},seed:function(n){t=n}}},5636:n=>{"use strict";n.exports=0},8731:(n,t,e)=>{var l=e(4498);n.exports={TextEncoder:l.TextEncoder,TextDecoder:l.TextDecoder}},2162:function(n){!function(t){"use strict";n.exports&&(n.exports=t),t["encoding-indexes"]={big5:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17392,19506,17923,17830,17784,160359,19831,17843,162993,19682,163013,15253,18230,18244,19527,19520,148159,144919,160594,159371,159954,19543,172881,18255,17882,19589,162924,19719,19108,18081,158499,29221,154196,137827,146950,147297,26189,22267,null,32149,22813,166841,15860,38708,162799,23515,138590,23204,13861,171696,23249,23479,23804,26478,34195,170309,29793,29853,14453,138579,145054,155681,16108,153822,15093,31484,40855,147809,166157,143850,133770,143966,17162,33924,40854,37935,18736,34323,22678,38730,37400,31184,31282,26208,27177,34973,29772,31685,26498,31276,21071,36934,13542,29636,155065,29894,40903,22451,18735,21580,16689,145038,22552,31346,162661,35727,18094,159368,16769,155033,31662,140476,40904,140481,140489,140492,40905,34052,144827,16564,40906,17633,175615,25281,28782,40907,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12736,12737,12738,12739,12740,131340,12741,131281,131277,12742,12743,131275,139240,12744,131274,12745,12746,12747,12748,131342,12749,12750,256,193,461,192,274,201,282,200,332,211,465,210,null,7870,null,7872,202,257,225,462,224,593,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,null,7871,null,7873,234,609,9178,9179,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,172969,135493,null,25866,null,null,20029,28381,40270,37343,null,null,161589,25745,20250,20264,20392,20822,20852,20892,20964,21153,21160,21307,21326,21457,21464,22242,22768,22788,22791,22834,22836,23398,23454,23455,23706,24198,24635,25993,26622,26628,26725,27982,28860,30005,32420,32428,32442,32455,32463,32479,32518,32567,33402,33487,33647,35270,35774,35810,36710,36711,36718,29713,31996,32205,26950,31433,21031,null,null,null,null,37260,30904,37214,32956,null,36107,33014,133607,null,null,32927,40647,19661,40393,40460,19518,171510,159758,40458,172339,13761,null,28314,33342,29977,null,18705,39532,39567,40857,31111,164972,138698,132560,142054,20004,20097,20096,20103,20159,20203,20279,13388,20413,15944,20483,20616,13437,13459,13477,20870,22789,20955,20988,20997,20105,21113,21136,21287,13767,21417,13649,21424,13651,21442,21539,13677,13682,13953,21651,21667,21684,21689,21712,21743,21784,21795,21800,13720,21823,13733,13759,21975,13765,163204,21797,null,134210,134421,151851,21904,142534,14828,131905,36422,150968,169189,16467,164030,30586,142392,14900,18389,164189,158194,151018,25821,134524,135092,134357,135412,25741,36478,134806,134155,135012,142505,164438,148691,null,134470,170573,164073,18420,151207,142530,39602,14951,169460,16365,13574,152263,169940,161992,142660,40302,38933,null,17369,155813,25780,21731,142668,142282,135287,14843,135279,157402,157462,162208,25834,151634,134211,36456,139681,166732,132913,null,18443,131497,16378,22643,142733,null,148936,132348,155799,134988,134550,21881,16571,17338,null,19124,141926,135325,33194,39157,134556,25465,14846,141173,36288,22177,25724,15939,null,173569,134665,142031,142537,null,135368,145858,14738,14854,164507,13688,155209,139463,22098,134961,142514,169760,13500,27709,151099,null,null,161140,142987,139784,173659,167117,134778,134196,157724,32659,135375,141315,141625,13819,152035,134796,135053,134826,16275,134960,134471,135503,134732,null,134827,134057,134472,135360,135485,16377,140950,25650,135085,144372,161337,142286,134526,134527,142417,142421,14872,134808,135367,134958,173618,158544,167122,167321,167114,38314,21708,33476,21945,null,171715,39974,39606,161630,142830,28992,33133,33004,23580,157042,33076,14231,21343,164029,37302,134906,134671,134775,134907,13789,151019,13833,134358,22191,141237,135369,134672,134776,135288,135496,164359,136277,134777,151120,142756,23124,135197,135198,135413,135414,22428,134673,161428,164557,135093,134779,151934,14083,135094,135552,152280,172733,149978,137274,147831,164476,22681,21096,13850,153405,31666,23400,18432,19244,40743,18919,39967,39821,154484,143677,22011,13810,22153,20008,22786,138177,194680,38737,131206,20059,20155,13630,23587,24401,24516,14586,25164,25909,27514,27701,27706,28780,29227,20012,29357,149737,32594,31035,31993,32595,156266,13505,null,156491,32770,32896,157202,158033,21341,34916,35265,161970,35744,36125,38021,38264,38271,38376,167439,38886,39029,39118,39134,39267,17e4,40060,40479,40644,27503,63751,20023,131207,38429,25143,38050,null,20539,28158,171123,40870,15817,34959,147790,28791,23797,19232,152013,13657,154928,24866,166450,36775,37366,29073,26393,29626,144001,172295,15499,137600,19216,30948,29698,20910,165647,16393,27235,172730,16931,34319,133743,31274,170311,166634,38741,28749,21284,139390,37876,30425,166371,40871,30685,20131,20464,20668,20015,20247,40872,21556,32139,22674,22736,138678,24210,24217,24514,141074,25995,144377,26905,27203,146531,27903,null,29184,148741,29580,16091,150035,23317,29881,35715,154788,153237,31379,31724,31939,32364,33528,34199,40873,34960,40874,36537,40875,36815,34143,39392,37409,40876,167353,136255,16497,17058,23066,null,null,null,39016,26475,17014,22333,null,34262,149883,33471,160013,19585,159092,23931,158485,159678,40877,40878,23446,40879,26343,32347,28247,31178,15752,17603,143958,141206,17306,17718,null,23765,146202,35577,23672,15634,144721,23928,40882,29015,17752,147692,138787,19575,14712,13386,131492,158785,35532,20404,131641,22975,33132,38998,170234,24379,134047,null,139713,166253,16642,18107,168057,16135,40883,172469,16632,14294,18167,158790,16764,165554,160767,17773,14548,152730,17761,17691,19849,19579,19830,17898,16328,150287,13921,17630,17597,16877,23870,23880,23894,15868,14351,23972,23993,14368,14392,24130,24253,24357,24451,14600,14612,14655,14669,24791,24893,23781,14729,25015,25017,25039,14776,25132,25232,25317,25368,14840,22193,14851,25570,25595,25607,25690,14923,25792,23829,22049,40863,14999,25990,15037,26111,26195,15090,26258,15138,26390,15170,26532,26624,15192,26698,26756,15218,15217,15227,26889,26947,29276,26980,27039,27013,15292,27094,15325,27237,27252,27249,27266,15340,27289,15346,27307,27317,27348,27382,27521,27585,27626,27765,27818,15563,27906,27910,27942,28033,15599,28068,28081,28181,28184,28201,28294,166336,28347,28386,28378,40831,28392,28393,28452,28468,15686,147265,28545,28606,15722,15733,29111,23705,15754,28716,15761,28752,28756,28783,28799,28809,131877,17345,13809,134872,147159,22462,159443,28990,153568,13902,27042,166889,23412,31305,153825,169177,31333,31357,154028,31419,31408,31426,31427,29137,156813,16842,31450,31453,31466,16879,21682,154625,31499,31573,31529,152334,154878,31650,31599,33692,154548,158847,31696,33825,31634,31672,154912,15789,154725,33938,31738,31750,31797,154817,31812,31875,149634,31910,26237,148856,31945,31943,31974,31860,31987,31989,31950,32359,17693,159300,32093,159446,29837,32137,32171,28981,32179,32210,147543,155689,32228,15635,32245,137209,32229,164717,32285,155937,155994,32366,32402,17195,37996,32295,32576,32577,32583,31030,156368,39393,32663,156497,32675,136801,131176,17756,145254,17667,164666,32762,156809,32773,32776,32797,32808,32815,172167,158915,32827,32828,32865,141076,18825,157222,146915,157416,26405,32935,166472,33031,33050,22704,141046,27775,156824,151480,25831,136330,33304,137310,27219,150117,150165,17530,33321,133901,158290,146814,20473,136445,34018,33634,158474,149927,144688,137075,146936,33450,26907,194964,16859,34123,33488,33562,134678,137140,14017,143741,144730,33403,33506,33560,147083,159139,158469,158615,144846,15807,33565,21996,33669,17675,159141,33708,33729,33747,13438,159444,27223,34138,13462,159298,143087,33880,154596,33905,15827,17636,27303,33866,146613,31064,33960,158614,159351,159299,34014,33807,33681,17568,33939,34020,154769,16960,154816,17731,34100,23282,159385,17703,34163,17686,26559,34326,165413,165435,34241,159880,34306,136578,159949,194994,17770,34344,13896,137378,21495,160666,34430,34673,172280,34798,142375,34737,34778,34831,22113,34412,26710,17935,34885,34886,161248,146873,161252,34910,34972,18011,34996,34997,25537,35013,30583,161551,35207,35210,35238,35241,35239,35260,166437,35303,162084,162493,35484,30611,37374,35472,162393,31465,162618,147343,18195,162616,29052,35596,35615,152624,152933,35647,35660,35661,35497,150138,35728,35739,35503,136927,17941,34895,35995,163156,163215,195028,14117,163155,36054,163224,163261,36114,36099,137488,36059,28764,36113,150729,16080,36215,36265,163842,135188,149898,15228,164284,160012,31463,36525,36534,36547,37588,36633,36653,164709,164882,36773,37635,172703,133712,36787,18730,166366,165181,146875,24312,143970,36857,172052,165564,165121,140069,14720,159447,36919,165180,162494,36961,165228,165387,37032,165651,37060,165606,37038,37117,37223,15088,37289,37316,31916,166195,138889,37390,27807,37441,37474,153017,37561,166598,146587,166668,153051,134449,37676,37739,166625,166891,28815,23235,166626,166629,18789,37444,166892,166969,166911,37747,37979,36540,38277,38310,37926,38304,28662,17081,140922,165592,135804,146990,18911,27676,38523,38550,16748,38563,159445,25050,38582,30965,166624,38589,21452,18849,158904,131700,156688,168111,168165,150225,137493,144138,38705,34370,38710,18959,17725,17797,150249,28789,23361,38683,38748,168405,38743,23370,168427,38751,37925,20688,143543,143548,38793,38815,38833,38846,38848,38866,38880,152684,38894,29724,169011,38911,38901,168989,162170,19153,38964,38963,38987,39014,15118,160117,15697,132656,147804,153350,39114,39095,39112,39111,19199,159015,136915,21936,39137,39142,39148,37752,39225,150057,19314,170071,170245,39413,39436,39483,39440,39512,153381,14020,168113,170965,39648,39650,170757,39668,19470,39700,39725,165376,20532,39732,158120,14531,143485,39760,39744,171326,23109,137315,39822,148043,39938,39935,39948,171624,40404,171959,172434,172459,172257,172323,172511,40318,40323,172340,40462,26760,40388,139611,172435,172576,137531,172595,40249,172217,172724,40592,40597,40606,40610,19764,40618,40623,148324,40641,15200,14821,15645,20274,14270,166955,40706,40712,19350,37924,159138,40727,40726,40761,22175,22154,40773,39352,168075,38898,33919,40802,40809,31452,40846,29206,19390,149877,149947,29047,150008,148296,150097,29598,166874,137466,31135,166270,167478,37737,37875,166468,37612,37761,37835,166252,148665,29207,16107,30578,31299,28880,148595,148472,29054,137199,28835,137406,144793,16071,137349,152623,137208,14114,136955,137273,14049,137076,137425,155467,14115,136896,22363,150053,136190,135848,136134,136374,34051,145062,34051,33877,149908,160101,146993,152924,147195,159826,17652,145134,170397,159526,26617,14131,15381,15847,22636,137506,26640,16471,145215,147681,147595,147727,158753,21707,22174,157361,22162,135135,134056,134669,37830,166675,37788,20216,20779,14361,148534,20156,132197,131967,20299,20362,153169,23144,131499,132043,14745,131850,132116,13365,20265,131776,167603,131701,35546,131596,20120,20685,20749,20386,20227,150030,147082,20290,20526,20588,20609,20428,20453,20568,20732,20825,20827,20829,20830,28278,144789,147001,147135,28018,137348,147081,20904,20931,132576,17629,132259,132242,132241,36218,166556,132878,21081,21156,133235,21217,37742,18042,29068,148364,134176,149932,135396,27089,134685,29817,16094,29849,29716,29782,29592,19342,150204,147597,21456,13700,29199,147657,21940,131909,21709,134086,22301,37469,38644,37734,22493,22413,22399,13886,22731,23193,166470,136954,137071,136976,23084,22968,37519,23166,23247,23058,153926,137715,137313,148117,14069,27909,29763,23073,155267,23169,166871,132115,37856,29836,135939,28933,18802,37896,166395,37821,14240,23582,23710,24158,24136,137622,137596,146158,24269,23375,137475,137476,14081,137376,14045,136958,14035,33066,166471,138682,144498,166312,24332,24334,137511,137131,23147,137019,23364,34324,161277,34912,24702,141408,140843,24539,16056,140719,140734,168072,159603,25024,131134,131142,140827,24985,24984,24693,142491,142599,149204,168269,25713,149093,142186,14889,142114,144464,170218,142968,25399,173147,25782,25393,25553,149987,142695,25252,142497,25659,25963,26994,15348,143502,144045,149897,144043,21773,144096,137433,169023,26318,144009,143795,15072,16784,152964,166690,152975,136956,152923,152613,30958,143619,137258,143924,13412,143887,143746,148169,26254,159012,26219,19347,26160,161904,138731,26211,144082,144097,26142,153714,14545,145466,145340,15257,145314,144382,29904,15254,26511,149034,26806,26654,15300,27326,14435,145365,148615,27187,27218,27337,27397,137490,25873,26776,27212,15319,27258,27479,147392,146586,37792,37618,166890,166603,37513,163870,166364,37991,28069,28427,149996,28007,147327,15759,28164,147516,23101,28170,22599,27940,30786,28987,148250,148086,28913,29264,29319,29332,149391,149285,20857,150180,132587,29818,147192,144991,150090,149783,155617,16134,16049,150239,166947,147253,24743,16115,29900,29756,37767,29751,17567,159210,17745,30083,16227,150745,150790,16216,30037,30323,173510,15129,29800,166604,149931,149902,15099,15821,150094,16127,149957,149747,37370,22322,37698,166627,137316,20703,152097,152039,30584,143922,30478,30479,30587,149143,145281,14942,149744,29752,29851,16063,150202,150215,16584,150166,156078,37639,152961,30750,30861,30856,30930,29648,31065,161601,153315,16654,31131,33942,31141,27181,147194,31290,31220,16750,136934,16690,37429,31217,134476,149900,131737,146874,137070,13719,21867,13680,13994,131540,134157,31458,23129,141045,154287,154268,23053,131675,30960,23082,154566,31486,16889,31837,31853,16913,154547,155324,155302,31949,150009,137136,31886,31868,31918,27314,32220,32263,32211,32590,156257,155996,162632,32151,155266,17002,158581,133398,26582,131150,144847,22468,156690,156664,149858,32733,31527,133164,154345,154947,31500,155150,39398,34373,39523,27164,144447,14818,150007,157101,39455,157088,33920,160039,158929,17642,33079,17410,32966,33033,33090,157620,39107,158274,33378,33381,158289,33875,159143,34320,160283,23174,16767,137280,23339,137377,23268,137432,34464,195004,146831,34861,160802,23042,34926,20293,34951,35007,35046,35173,35149,153219,35156,161669,161668,166901,166873,166812,166393,16045,33955,18165,18127,14322,35389,35356,169032,24397,37419,148100,26068,28969,28868,137285,40301,35999,36073,163292,22938,30659,23024,17262,14036,36394,36519,150537,36656,36682,17140,27736,28603,140065,18587,28537,28299,137178,39913,14005,149807,37051,37015,21873,18694,37307,37892,166475,16482,166652,37927,166941,166971,34021,35371,38297,38311,38295,38294,167220,29765,16066,149759,150082,148458,16103,143909,38543,167655,167526,167525,16076,149997,150136,147438,29714,29803,16124,38721,168112,26695,18973,168083,153567,38749,37736,166281,166950,166703,156606,37562,23313,35689,18748,29689,147995,38811,38769,39224,134950,24001,166853,150194,38943,169178,37622,169431,37349,17600,166736,150119,166756,39132,166469,16128,37418,18725,33812,39227,39245,162566,15869,39323,19311,39338,39516,166757,153800,27279,39457,23294,39471,170225,19344,170312,39356,19389,19351,37757,22642,135938,22562,149944,136424,30788,141087,146872,26821,15741,37976,14631,24912,141185,141675,24839,40015,40019,40059,39989,39952,39807,39887,171565,39839,172533,172286,40225,19630,147716,40472,19632,40204,172468,172269,172275,170287,40357,33981,159250,159711,158594,34300,17715,159140,159364,159216,33824,34286,159232,145367,155748,31202,144796,144960,18733,149982,15714,37851,37566,37704,131775,30905,37495,37965,20452,13376,36964,152925,30781,30804,30902,30795,137047,143817,149825,13978,20338,28634,28633,28702,28702,21524,147893,22459,22771,22410,40214,22487,28980,13487,147884,29163,158784,151447,23336,137141,166473,24844,23246,23051,17084,148616,14124,19323,166396,37819,37816,137430,134941,33906,158912,136211,148218,142374,148417,22932,146871,157505,32168,155995,155812,149945,149899,166394,37605,29666,16105,29876,166755,137375,16097,150195,27352,29683,29691,16086,150078,150164,137177,150118,132007,136228,149989,29768,149782,28837,149878,37508,29670,37727,132350,37681,166606,166422,37766,166887,153045,18741,166530,29035,149827,134399,22180,132634,134123,134328,21762,31172,137210,32254,136898,150096,137298,17710,37889,14090,166592,149933,22960,137407,137347,160900,23201,14050,146779,14e3,37471,23161,166529,137314,37748,15565,133812,19094,14730,20724,15721,15692,136092,29045,17147,164376,28175,168164,17643,27991,163407,28775,27823,15574,147437,146989,28162,28428,15727,132085,30033,14012,13512,18048,16090,18545,22980,37486,18750,36673,166940,158656,22546,22472,14038,136274,28926,148322,150129,143331,135856,140221,26809,26983,136088,144613,162804,145119,166531,145366,144378,150687,27162,145069,158903,33854,17631,17614,159014,159057,158850,159710,28439,160009,33597,137018,33773,158848,159827,137179,22921,23170,137139,23137,23153,137477,147964,14125,23023,137020,14023,29070,37776,26266,148133,23150,23083,148115,27179,147193,161590,148571,148170,28957,148057,166369,20400,159016,23746,148686,163405,148413,27148,148054,135940,28838,28979,148457,15781,27871,194597,150095,32357,23019,23855,15859,24412,150109,137183,32164,33830,21637,146170,144128,131604,22398,133333,132633,16357,139166,172726,28675,168283,23920,29583,31955,166489,168992,20424,32743,29389,29456,162548,29496,29497,153334,29505,29512,16041,162584,36972,29173,149746,29665,33270,16074,30476,16081,27810,22269,29721,29726,29727,16098,16112,16116,16122,29907,16142,16211,30018,30061,30066,30093,16252,30152,30172,16320,30285,16343,30324,16348,30330,151388,29064,22051,35200,22633,16413,30531,16441,26465,16453,13787,30616,16490,16495,23646,30654,30667,22770,30744,28857,30748,16552,30777,30791,30801,30822,33864,152885,31027,26627,31026,16643,16649,31121,31129,36795,31238,36796,16743,31377,16818,31420,33401,16836,31439,31451,16847,20001,31586,31596,31611,31762,31771,16992,17018,31867,31900,17036,31928,17044,31981,36755,28864,134351,32207,32212,32208,32253,32686,32692,29343,17303,32800,32805,31545,32814,32817,32852,15820,22452,28832,32951,33001,17389,33036,29482,33038,33042,30048,33044,17409,15161,33110,33113,33114,17427,22586,33148,33156,17445,33171,17453,33189,22511,33217,33252,33364,17551,33446,33398,33482,33496,33535,17584,33623,38505,27018,33797,28917,33892,24803,33928,17668,33982,34017,34040,34064,34104,34130,17723,34159,34160,34272,17783,34418,34450,34482,34543,38469,34699,17926,17943,34990,35071,35108,35143,35217,162151,35369,35384,35476,35508,35921,36052,36082,36124,18328,22623,36291,18413,20206,36410,21976,22356,36465,22005,36528,18487,36558,36578,36580,36589,36594,36791,36801,36810,36812,36915,39364,18605,39136,37395,18718,37416,37464,37483,37553,37550,37567,37603,37611,37619,37620,37629,37699,37764,37805,18757,18769,40639,37911,21249,37917,37933,37950,18794,37972,38009,38189,38306,18855,38388,38451,18917,26528,18980,38720,18997,38834,38850,22100,19172,24808,39097,19225,39153,22596,39182,39193,20916,39196,39223,39234,39261,39266,19312,39365,19357,39484,39695,31363,39785,39809,39901,39921,39924,19565,39968,14191,138178,40265,39994,40702,22096,40339,40381,40384,40444,38134,36790,40571,40620,40625,40637,40646,38108,40674,40689,40696,31432,40772,131220,131767,132e3,26906,38083,22956,132311,22592,38081,14265,132565,132629,132726,136890,22359,29043,133826,133837,134079,21610,194619,134091,21662,134139,134203,134227,134245,134268,24807,134285,22138,134325,134365,134381,134511,134578,134600,26965,39983,34725,134660,134670,134871,135056,134957,134771,23584,135100,24075,135260,135247,135286,26398,135291,135304,135318,13895,135359,135379,135471,135483,21348,33965,135907,136053,135990,35713,136567,136729,137155,137159,20088,28859,137261,137578,137773,137797,138282,138352,138412,138952,25283,138965,139029,29080,26709,139333,27113,14024,139900,140247,140282,141098,141425,141647,33533,141671,141715,142037,35237,142056,36768,142094,38840,142143,38983,39613,142412,null,142472,142519,154600,142600,142610,142775,142741,142914,143220,143308,143411,143462,144159,144350,24497,26184,26303,162425,144743,144883,29185,149946,30679,144922,145174,32391,131910,22709,26382,26904,146087,161367,155618,146961,147129,161278,139418,18640,19128,147737,166554,148206,148237,147515,148276,148374,150085,132554,20946,132625,22943,138920,15294,146687,148484,148694,22408,149108,14747,149295,165352,170441,14178,139715,35678,166734,39382,149522,149755,150037,29193,150208,134264,22885,151205,151430,132985,36570,151596,21135,22335,29041,152217,152601,147274,150183,21948,152646,152686,158546,37332,13427,152895,161330,152926,18200,152930,152934,153543,149823,153693,20582,13563,144332,24798,153859,18300,166216,154286,154505,154630,138640,22433,29009,28598,155906,162834,36950,156082,151450,35682,156674,156746,23899,158711,36662,156804,137500,35562,150006,156808,147439,156946,19392,157119,157365,141083,37989,153569,24981,23079,194765,20411,22201,148769,157436,20074,149812,38486,28047,158909,13848,35191,157593,157806,156689,157790,29151,157895,31554,168128,133649,157990,37124,158009,31301,40432,158202,39462,158253,13919,156777,131105,31107,158260,158555,23852,144665,33743,158621,18128,158884,30011,34917,159150,22710,14108,140685,159819,160205,15444,160384,160389,37505,139642,160395,37680,160486,149968,27705,38047,160848,134904,34855,35061,141606,164979,137137,28344,150058,137248,14756,14009,23568,31203,17727,26294,171181,170148,35139,161740,161880,22230,16607,136714,14753,145199,164072,136133,29101,33638,162269,168360,23143,19639,159919,166315,162301,162314,162571,163174,147834,31555,31102,163849,28597,172767,27139,164632,21410,159239,37823,26678,38749,164207,163875,158133,136173,143919,163912,23941,166960,163971,22293,38947,166217,23979,149896,26046,27093,21458,150181,147329,15377,26422,163984,164084,164142,139169,164175,164233,164271,164378,164614,164655,164746,13770,164968,165546,18682,25574,166230,30728,37461,166328,17394,166375,17375,166376,166726,166868,23032,166921,36619,167877,168172,31569,168208,168252,15863,168286,150218,36816,29327,22155,169191,169449,169392,169400,169778,170193,170313,170346,170435,170536,170766,171354,171419,32415,171768,171811,19620,38215,172691,29090,172799,19857,36882,173515,19868,134300,36798,21953,36794,140464,36793,150163,17673,32383,28502,27313,20202,13540,166700,161949,14138,36480,137205,163876,166764,166809,162366,157359,15851,161365,146615,153141,153942,20122,155265,156248,22207,134765,36366,23405,147080,150686,25566,25296,137206,137339,25904,22061,154698,21530,152337,15814,171416,19581,22050,22046,32585,155352,22901,146752,34672,19996,135146,134473,145082,33047,40286,36120,30267,40005,30286,30649,37701,21554,33096,33527,22053,33074,33816,32957,21994,31074,22083,21526,134813,13774,22021,22001,26353,164578,13869,30004,22e3,21946,21655,21874,134209,134294,24272,151880,134774,142434,134818,40619,32090,21982,135285,25245,38765,21652,36045,29174,37238,25596,25529,25598,21865,142147,40050,143027,20890,13535,134567,20903,21581,21790,21779,30310,36397,157834,30129,32950,34820,34694,35015,33206,33820,135361,17644,29444,149254,23440,33547,157843,22139,141044,163119,147875,163187,159440,160438,37232,135641,37384,146684,173737,134828,134905,29286,138402,18254,151490,163833,135147,16634,40029,25887,142752,18675,149472,171388,135148,134666,24674,161187,135149,null,155720,135559,29091,32398,40272,19994,19972,13687,23309,27826,21351,13996,14812,21373,13989,149016,22682,150382,33325,21579,22442,154261,133497,null,14930,140389,29556,171692,19721,39917,146686,171824,19547,151465,169374,171998,33884,146870,160434,157619,145184,25390,32037,147191,146988,14890,36872,21196,15988,13946,17897,132238,30272,23280,134838,30842,163630,22695,16575,22140,39819,23924,30292,173108,40581,19681,30201,14331,24857,143578,148466,null,22109,135849,22439,149859,171526,21044,159918,13741,27722,40316,31830,39737,22494,137068,23635,25811,169168,156469,160100,34477,134440,159010,150242,134513,null,20990,139023,23950,38659,138705,40577,36940,31519,39682,23761,31651,25192,25397,39679,31695,39722,31870,39726,31810,31878,39957,31740,39689,40727,39963,149822,40794,21875,23491,20477,40600,20466,21088,15878,21201,22375,20566,22967,24082,38856,40363,36700,21609,38836,39232,38842,21292,24880,26924,21466,39946,40194,19515,38465,27008,20646,30022,137069,39386,21107,null,37209,38529,37212,null,37201,167575,25471,159011,27338,22033,37262,30074,25221,132092,29519,31856,154657,146685,null,149785,30422,39837,20010,134356,33726,34882,null,23626,27072,20717,22394,21023,24053,20174,27697,131570,20281,21660,21722,21146,36226,13822,24332,13811,null,27474,37244,40869,39831,38958,39092,39610,40616,40580,29050,31508,null,27642,34840,32632,null,22048,173642,36471,40787,null,36308,36431,40476,36353,25218,164733,36392,36469,31443,150135,31294,30936,27882,35431,30215,166490,40742,27854,34774,30147,172722,30803,194624,36108,29410,29553,35629,29442,29937,36075,150203,34351,24506,34976,17591,null,137275,159237,null,35454,140571,null,24829,30311,39639,40260,37742,39823,34805,null,34831,36087,29484,38689,39856,13782,29362,19463,31825,39242,155993,24921,19460,40598,24957,null,22367,24943,25254,25145,25294,14940,25058,21418,144373,25444,26626,13778,23895,166850,36826,167481,null,20697,138566,30982,21298,38456,134971,16485,null,30718,null,31938,155418,31962,31277,32870,32867,32077,29957,29938,35220,33306,26380,32866,160902,32859,29936,33027,30500,35209,157644,30035,159441,34729,34766,33224,34700,35401,36013,35651,30507,29944,34010,13877,27058,36262,null,35241,29800,28089,34753,147473,29927,15835,29046,24740,24988,15569,29026,24695,null,32625,166701,29264,24809,19326,21024,15384,146631,155351,161366,152881,137540,135934,170243,159196,159917,23745,156077,166415,145015,131310,157766,151310,17762,23327,156492,40784,40614,156267,12288,65292,12289,12290,65294,8231,65307,65306,65311,65281,65072,8230,8229,65104,65105,65106,183,65108,65109,65110,65111,65372,8211,65073,8212,65075,9588,65076,65103,65288,65289,65077,65078,65371,65373,65079,65080,12308,12309,65081,65082,12304,12305,65083,65084,12298,12299,65085,65086,12296,12297,65087,65088,12300,12301,65089,65090,12302,12303,65091,65092,65113,65114,65115,65116,65117,65118,8216,8217,8220,8221,12317,12318,8245,8242,65283,65286,65290,8251,167,12291,9675,9679,9651,9650,9678,9734,9733,9671,9670,9633,9632,9661,9660,12963,8453,175,65507,65343,717,65097,65098,65101,65102,65099,65100,65119,65120,65121,65291,65293,215,247,177,8730,65308,65310,65309,8806,8807,8800,8734,8786,8801,65122,65123,65124,65125,65126,65374,8745,8746,8869,8736,8735,8895,13266,13265,8747,8750,8757,8756,9792,9794,8853,8857,8593,8595,8592,8594,8598,8599,8601,8600,8741,8739,65295,65340,8725,65128,65284,65509,12306,65504,65505,65285,65312,8451,8457,65129,65130,65131,13269,13212,13213,13214,13262,13217,13198,13199,13252,176,20825,20827,20830,20829,20833,20835,21991,29929,31950,9601,9602,9603,9604,9605,9606,9607,9608,9615,9614,9613,9612,9611,9610,9609,9532,9524,9516,9508,9500,9620,9472,9474,9621,9484,9488,9492,9496,9581,9582,9584,9583,9552,9566,9578,9569,9698,9699,9701,9700,9585,9586,9587,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,12321,12322,12323,12324,12325,12326,12327,12328,12329,21313,21316,21317,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,729,713,714,711,715,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9249,8364,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19968,20057,19969,19971,20035,20061,20102,20108,20154,20799,20837,20843,20960,20992,20993,21147,21269,21313,21340,21448,19977,19979,19976,19978,20011,20024,20961,20037,20040,20063,20062,20110,20129,20800,20995,21242,21315,21449,21475,22303,22763,22805,22823,22899,23376,23377,23379,23544,23567,23586,23608,23665,24029,24037,24049,24050,24051,24062,24178,24318,24331,24339,25165,19985,19984,19981,20013,20016,20025,20043,23609,20104,20113,20117,20114,20116,20130,20161,20160,20163,20166,20167,20173,20170,20171,20164,20803,20801,20839,20845,20846,20844,20887,20982,20998,20999,21e3,21243,21246,21247,21270,21305,21320,21319,21317,21342,21380,21451,21450,21453,22764,22825,22827,22826,22829,23380,23569,23588,23610,23663,24052,24187,24319,24340,24341,24515,25096,25142,25163,25166,25903,25991,26007,26020,26041,26085,26352,26376,26408,27424,27490,27513,27595,27604,27611,27663,27700,28779,29226,29238,29243,29255,29273,29275,29356,29579,19993,19990,19989,19988,19992,20027,20045,20047,20046,20197,20184,20180,20181,20182,20183,20195,20196,20185,20190,20805,20804,20873,20874,20908,20985,20986,20984,21002,21152,21151,21253,21254,21271,21277,20191,21322,21321,21345,21344,21359,21358,21435,21487,21476,21491,21484,21486,21481,21480,21500,21496,21493,21483,21478,21482,21490,21489,21488,21477,21485,21499,22235,22234,22806,22830,22833,22900,22902,23381,23427,23612,24040,24039,24038,24066,24067,24179,24188,24321,24344,24343,24517,25098,25171,25172,25170,25169,26021,26086,26414,26412,26410,26411,26413,27491,27597,27665,27664,27704,27713,27712,27710,29359,29572,29577,29916,29926,29976,29983,29992,29993,3e4,30001,30002,30003,30091,30333,30382,30399,30446,30683,30690,30707,31034,31166,31348,31435,19998,19999,20050,20051,20073,20121,20132,20134,20133,20223,20233,20249,20234,20245,20237,20240,20241,20239,20210,20214,20219,20208,20211,20221,20225,20235,20809,20807,20806,20808,20840,20849,20877,20912,21015,21009,21010,21006,21014,21155,21256,21281,21280,21360,21361,21513,21519,21516,21514,21520,21505,21515,21508,21521,21517,21512,21507,21518,21510,21522,22240,22238,22237,22323,22320,22312,22317,22316,22319,22313,22809,22810,22839,22840,22916,22904,22915,22909,22905,22914,22913,23383,23384,23431,23432,23429,23433,23546,23574,23673,24030,24070,24182,24180,24335,24347,24537,24534,25102,25100,25101,25104,25187,25179,25176,25910,26089,26088,26092,26093,26354,26355,26377,26429,26420,26417,26421,27425,27492,27515,27670,27741,27735,27737,27743,27744,27728,27733,27745,27739,27725,27726,28784,29279,29277,30334,31481,31859,31992,32566,32650,32701,32769,32771,32780,32786,32819,32895,32905,32907,32908,33251,33258,33267,33276,33292,33307,33311,33390,33394,33406,34411,34880,34892,34915,35199,38433,20018,20136,20301,20303,20295,20311,20318,20276,20315,20309,20272,20304,20305,20285,20282,20280,20291,20308,20284,20294,20323,20316,20320,20271,20302,20278,20313,20317,20296,20314,20812,20811,20813,20853,20918,20919,21029,21028,21033,21034,21032,21163,21161,21162,21164,21283,21363,21365,21533,21549,21534,21566,21542,21582,21543,21574,21571,21555,21576,21570,21531,21545,21578,21561,21563,21560,21550,21557,21558,21536,21564,21568,21553,21547,21535,21548,22250,22256,22244,22251,22346,22353,22336,22349,22343,22350,22334,22352,22351,22331,22767,22846,22941,22930,22952,22942,22947,22937,22934,22925,22948,22931,22922,22949,23389,23388,23386,23387,23436,23435,23439,23596,23616,23617,23615,23614,23696,23697,23700,23692,24043,24076,24207,24199,24202,24311,24324,24351,24420,24418,24439,24441,24536,24524,24535,24525,24561,24555,24568,24554,25106,25105,25220,25239,25238,25216,25206,25225,25197,25226,25212,25214,25209,25203,25234,25199,25240,25198,25237,25235,25233,25222,25913,25915,25912,26097,26356,26463,26446,26447,26448,26449,26460,26454,26462,26441,26438,26464,26451,26455,27493,27599,27714,27742,27801,27777,27784,27785,27781,27803,27754,27770,27792,27760,27788,27752,27798,27794,27773,27779,27762,27774,27764,27782,27766,27789,27796,27800,27778,28790,28796,28797,28792,29282,29281,29280,29380,29378,29590,29996,29995,30007,30008,30338,30447,30691,31169,31168,31167,31350,31995,32597,32918,32915,32925,32920,32923,32922,32946,33391,33426,33419,33421,35211,35282,35328,35895,35910,35925,35997,36196,36208,36275,36523,36554,36763,36784,36802,36806,36805,36804,24033,37009,37026,37034,37030,37027,37193,37318,37324,38450,38446,38449,38442,38444,20006,20054,20083,20107,20123,20126,20139,20140,20335,20381,20365,20339,20351,20332,20379,20363,20358,20355,20336,20341,20360,20329,20347,20374,20350,20367,20369,20346,20820,20818,20821,20841,20855,20854,20856,20925,20989,21051,21048,21047,21050,21040,21038,21046,21057,21182,21179,21330,21332,21331,21329,21350,21367,21368,21369,21462,21460,21463,21619,21621,21654,21624,21653,21632,21627,21623,21636,21650,21638,21628,21648,21617,21622,21644,21658,21602,21608,21643,21629,21646,22266,22403,22391,22378,22377,22369,22374,22372,22396,22812,22857,22855,22856,22852,22868,22974,22971,22996,22969,22958,22993,22982,22992,22989,22987,22995,22986,22959,22963,22994,22981,23391,23396,23395,23447,23450,23448,23452,23449,23451,23578,23624,23621,23622,23735,23713,23736,23721,23723,23729,23731,24088,24090,24086,24085,24091,24081,24184,24218,24215,24220,24213,24214,24310,24358,24359,24361,24448,24449,24447,24444,24541,24544,24573,24565,24575,24591,24596,24623,24629,24598,24618,24597,24609,24615,24617,24619,24603,25110,25109,25151,25150,25152,25215,25289,25292,25284,25279,25282,25273,25298,25307,25259,25299,25300,25291,25288,25256,25277,25276,25296,25305,25287,25293,25269,25306,25265,25304,25302,25303,25286,25260,25294,25918,26023,26044,26106,26132,26131,26124,26118,26114,26126,26112,26127,26133,26122,26119,26381,26379,26477,26507,26517,26481,26524,26483,26487,26503,26525,26519,26479,26480,26495,26505,26494,26512,26485,26522,26515,26492,26474,26482,27427,27494,27495,27519,27667,27675,27875,27880,27891,27825,27852,27877,27827,27837,27838,27836,27874,27819,27861,27859,27832,27844,27833,27841,27822,27863,27845,27889,27839,27835,27873,27867,27850,27820,27887,27868,27862,27872,28821,28814,28818,28810,28825,29228,29229,29240,29256,29287,29289,29376,29390,29401,29399,29392,29609,29608,29599,29611,29605,30013,30109,30105,30106,30340,30402,30450,30452,30693,30717,31038,31040,31041,31177,31176,31354,31353,31482,31998,32596,32652,32651,32773,32954,32933,32930,32945,32929,32939,32937,32948,32938,32943,33253,33278,33293,33459,33437,33433,33453,33469,33439,33465,33457,33452,33445,33455,33464,33443,33456,33470,33463,34382,34417,21021,34920,36555,36814,36820,36817,37045,37048,37041,37046,37319,37329,38263,38272,38428,38464,38463,38459,38468,38466,38585,38632,38738,38750,20127,20141,20142,20449,20405,20399,20415,20448,20433,20431,20445,20419,20406,20440,20447,20426,20439,20398,20432,20420,20418,20442,20430,20446,20407,20823,20882,20881,20896,21070,21059,21066,21069,21068,21067,21063,21191,21193,21187,21185,21261,21335,21371,21402,21467,21676,21696,21672,21710,21705,21688,21670,21683,21703,21698,21693,21674,21697,21700,21704,21679,21675,21681,21691,21673,21671,21695,22271,22402,22411,22432,22435,22434,22478,22446,22419,22869,22865,22863,22862,22864,23004,23e3,23039,23011,23016,23043,23013,23018,23002,23014,23041,23035,23401,23459,23462,23460,23458,23461,23553,23630,23631,23629,23627,23769,23762,24055,24093,24101,24095,24189,24224,24230,24314,24328,24365,24421,24456,24453,24458,24459,24455,24460,24457,24594,24605,24608,24613,24590,24616,24653,24688,24680,24674,24646,24643,24684,24683,24682,24676,25153,25308,25366,25353,25340,25325,25345,25326,25341,25351,25329,25335,25327,25324,25342,25332,25361,25346,25919,25925,26027,26045,26082,26149,26157,26144,26151,26159,26143,26152,26161,26148,26359,26623,26579,26609,26580,26576,26604,26550,26543,26613,26601,26607,26564,26577,26548,26586,26597,26552,26575,26590,26611,26544,26585,26594,26589,26578,27498,27523,27526,27573,27602,27607,27679,27849,27915,27954,27946,27969,27941,27916,27953,27934,27927,27963,27965,27966,27958,27931,27893,27961,27943,27960,27945,27950,27957,27918,27947,28843,28858,28851,28844,28847,28845,28856,28846,28836,29232,29298,29295,29300,29417,29408,29409,29623,29642,29627,29618,29645,29632,29619,29978,29997,30031,30028,30030,30027,30123,30116,30117,30114,30115,30328,30342,30343,30344,30408,30406,30403,30405,30465,30457,30456,30473,30475,30462,30460,30471,30684,30722,30740,30732,30733,31046,31049,31048,31047,31161,31162,31185,31186,31179,31359,31361,31487,31485,31869,32002,32005,32e3,32009,32007,32004,32006,32568,32654,32703,32772,32784,32781,32785,32822,32982,32997,32986,32963,32964,32972,32993,32987,32974,32990,32996,32989,33268,33314,33511,33539,33541,33507,33499,33510,33540,33509,33538,33545,33490,33495,33521,33537,33500,33492,33489,33502,33491,33503,33519,33542,34384,34425,34427,34426,34893,34923,35201,35284,35336,35330,35331,35998,36e3,36212,36211,36276,36557,36556,36848,36838,36834,36842,36837,36845,36843,36836,36840,37066,37070,37057,37059,37195,37194,37325,38274,38480,38475,38476,38477,38754,38761,38859,38893,38899,38913,39080,39131,39135,39318,39321,20056,20147,20492,20493,20515,20463,20518,20517,20472,20521,20502,20486,20540,20511,20506,20498,20497,20474,20480,20500,20520,20465,20513,20491,20505,20504,20467,20462,20525,20522,20478,20523,20489,20860,20900,20901,20898,20941,20940,20934,20939,21078,21084,21076,21083,21085,21290,21375,21407,21405,21471,21736,21776,21761,21815,21756,21733,21746,21766,21754,21780,21737,21741,21729,21769,21742,21738,21734,21799,21767,21757,21775,22275,22276,22466,22484,22475,22467,22537,22799,22871,22872,22874,23057,23064,23068,23071,23067,23059,23020,23072,23075,23081,23077,23052,23049,23403,23640,23472,23475,23478,23476,23470,23477,23481,23480,23556,23633,23637,23632,23789,23805,23803,23786,23784,23792,23798,23809,23796,24046,24109,24107,24235,24237,24231,24369,24466,24465,24464,24665,24675,24677,24656,24661,24685,24681,24687,24708,24735,24730,24717,24724,24716,24709,24726,25159,25331,25352,25343,25422,25406,25391,25429,25410,25414,25423,25417,25402,25424,25405,25386,25387,25384,25421,25420,25928,25929,26009,26049,26053,26178,26185,26191,26179,26194,26188,26181,26177,26360,26388,26389,26391,26657,26680,26696,26694,26707,26681,26690,26708,26665,26803,26647,26700,26705,26685,26612,26704,26688,26684,26691,26666,26693,26643,26648,26689,27530,27529,27575,27683,27687,27688,27686,27684,27888,28010,28053,28040,28039,28006,28024,28023,27993,28051,28012,28041,28014,27994,28020,28009,28044,28042,28025,28037,28005,28052,28874,28888,28900,28889,28872,28879,29241,29305,29436,29433,29437,29432,29431,29574,29677,29705,29678,29664,29674,29662,30036,30045,30044,30042,30041,30142,30149,30151,30130,30131,30141,30140,30137,30146,30136,30347,30384,30410,30413,30414,30505,30495,30496,30504,30697,30768,30759,30776,30749,30772,30775,30757,30765,30752,30751,30770,31061,31056,31072,31071,31062,31070,31069,31063,31066,31204,31203,31207,31199,31206,31209,31192,31364,31368,31449,31494,31505,31881,32033,32023,32011,32010,32032,32034,32020,32016,32021,32026,32028,32013,32025,32027,32570,32607,32660,32709,32705,32774,32792,32789,32793,32791,32829,32831,33009,33026,33008,33029,33005,33012,33030,33016,33011,33032,33021,33034,33020,33007,33261,33260,33280,33296,33322,33323,33320,33324,33467,33579,33618,33620,33610,33592,33616,33609,33589,33588,33615,33586,33593,33590,33559,33600,33585,33576,33603,34388,34442,34474,34451,34468,34473,34444,34467,34460,34928,34935,34945,34946,34941,34937,35352,35344,35342,35340,35349,35338,35351,35347,35350,35343,35345,35912,35962,35961,36001,36002,36215,36524,36562,36564,36559,36785,36865,36870,36855,36864,36858,36852,36867,36861,36869,36856,37013,37089,37085,37090,37202,37197,37196,37336,37341,37335,37340,37337,38275,38498,38499,38497,38491,38493,38500,38488,38494,38587,39138,39340,39592,39640,39717,39730,39740,20094,20602,20605,20572,20551,20547,20556,20570,20553,20581,20598,20558,20565,20597,20596,20599,20559,20495,20591,20589,20828,20885,20976,21098,21103,21202,21209,21208,21205,21264,21263,21273,21311,21312,21310,21443,26364,21830,21866,21862,21828,21854,21857,21827,21834,21809,21846,21839,21845,21807,21860,21816,21806,21852,21804,21859,21811,21825,21847,22280,22283,22281,22495,22533,22538,22534,22496,22500,22522,22530,22581,22519,22521,22816,22882,23094,23105,23113,23142,23146,23104,23100,23138,23130,23110,23114,23408,23495,23493,23492,23490,23487,23494,23561,23560,23559,23648,23644,23645,23815,23814,23822,23835,23830,23842,23825,23849,23828,23833,23844,23847,23831,24034,24120,24118,24115,24119,24247,24248,24246,24245,24254,24373,24375,24407,24428,24425,24427,24471,24473,24478,24472,24481,24480,24476,24703,24739,24713,24736,24744,24779,24756,24806,24765,24773,24763,24757,24796,24764,24792,24789,24774,24799,24760,24794,24775,25114,25115,25160,25504,25511,25458,25494,25506,25509,25463,25447,25496,25514,25457,25513,25481,25475,25499,25451,25512,25476,25480,25497,25505,25516,25490,25487,25472,25467,25449,25448,25466,25949,25942,25937,25945,25943,21855,25935,25944,25941,25940,26012,26011,26028,26063,26059,26060,26062,26205,26202,26212,26216,26214,26206,26361,21207,26395,26753,26799,26786,26771,26805,26751,26742,26801,26791,26775,26800,26755,26820,26797,26758,26757,26772,26781,26792,26783,26785,26754,27442,27578,27627,27628,27691,28046,28092,28147,28121,28082,28129,28108,28132,28155,28154,28165,28103,28107,28079,28113,28078,28126,28153,28088,28151,28149,28101,28114,28186,28085,28122,28139,28120,28138,28145,28142,28136,28102,28100,28074,28140,28095,28134,28921,28937,28938,28925,28911,29245,29309,29313,29468,29467,29462,29459,29465,29575,29701,29706,29699,29702,29694,29709,29920,29942,29943,29980,29986,30053,30054,30050,30064,30095,30164,30165,30133,30154,30157,30350,30420,30418,30427,30519,30526,30524,30518,30520,30522,30827,30787,30798,31077,31080,31085,31227,31378,31381,31520,31528,31515,31532,31526,31513,31518,31534,31890,31895,31893,32070,32067,32113,32046,32057,32060,32064,32048,32051,32068,32047,32066,32050,32049,32573,32670,32666,32716,32718,32722,32796,32842,32838,33071,33046,33059,33067,33065,33072,33060,33282,33333,33335,33334,33337,33678,33694,33688,33656,33698,33686,33725,33707,33682,33674,33683,33673,33696,33655,33659,33660,33670,33703,34389,24426,34503,34496,34486,34500,34485,34502,34507,34481,34479,34505,34899,34974,34952,34987,34962,34966,34957,34955,35219,35215,35370,35357,35363,35365,35377,35373,35359,35355,35362,35913,35930,36009,36012,36011,36008,36010,36007,36199,36198,36286,36282,36571,36575,36889,36877,36890,36887,36899,36895,36893,36880,36885,36894,36896,36879,36898,36886,36891,36884,37096,37101,37117,37207,37326,37365,37350,37347,37351,37357,37353,38281,38506,38517,38515,38520,38512,38516,38518,38519,38508,38592,38634,38633,31456,31455,38914,38915,39770,40165,40565,40575,40613,40635,20642,20621,20613,20633,20625,20608,20630,20632,20634,26368,20977,21106,21108,21109,21097,21214,21213,21211,21338,21413,21883,21888,21927,21884,21898,21917,21912,21890,21916,21930,21908,21895,21899,21891,21939,21934,21919,21822,21938,21914,21947,21932,21937,21886,21897,21931,21913,22285,22575,22570,22580,22564,22576,22577,22561,22557,22560,22777,22778,22880,23159,23194,23167,23186,23195,23207,23411,23409,23506,23500,23507,23504,23562,23563,23601,23884,23888,23860,23879,24061,24133,24125,24128,24131,24190,24266,24257,24258,24260,24380,24429,24489,24490,24488,24785,24801,24754,24758,24800,24860,24867,24826,24853,24816,24827,24820,24936,24817,24846,24822,24841,24832,24850,25119,25161,25507,25484,25551,25536,25577,25545,25542,25549,25554,25571,25552,25569,25558,25581,25582,25462,25588,25578,25563,25682,25562,25593,25950,25958,25954,25955,26001,26e3,26031,26222,26224,26228,26230,26223,26257,26234,26238,26231,26366,26367,26399,26397,26874,26837,26848,26840,26839,26885,26847,26869,26862,26855,26873,26834,26866,26851,26827,26829,26893,26898,26894,26825,26842,26990,26875,27454,27450,27453,27544,27542,27580,27631,27694,27695,27692,28207,28216,28244,28193,28210,28263,28234,28192,28197,28195,28187,28251,28248,28196,28246,28270,28205,28198,28271,28212,28237,28218,28204,28227,28189,28222,28363,28297,28185,28238,28259,28228,28274,28265,28255,28953,28954,28966,28976,28961,28982,29038,28956,29260,29316,29312,29494,29477,29492,29481,29754,29738,29747,29730,29733,29749,29750,29748,29743,29723,29734,29736,29989,29990,30059,30058,30178,30171,30179,30169,30168,30174,30176,30331,30332,30358,30355,30388,30428,30543,30701,30813,30828,30831,31245,31240,31243,31237,31232,31384,31383,31382,31461,31459,31561,31574,31558,31568,31570,31572,31565,31563,31567,31569,31903,31909,32094,32080,32104,32085,32043,32110,32114,32097,32102,32098,32112,32115,21892,32724,32725,32779,32850,32901,33109,33108,33099,33105,33102,33081,33094,33086,33100,33107,33140,33298,33308,33769,33795,33784,33805,33760,33733,33803,33729,33775,33777,33780,33879,33802,33776,33804,33740,33789,33778,33738,33848,33806,33796,33756,33799,33748,33759,34395,34527,34521,34541,34516,34523,34532,34512,34526,34903,35009,35010,34993,35203,35222,35387,35424,35413,35422,35388,35393,35412,35419,35408,35398,35380,35386,35382,35414,35937,35970,36015,36028,36019,36029,36033,36027,36032,36020,36023,36022,36031,36024,36234,36229,36225,36302,36317,36299,36314,36305,36300,36315,36294,36603,36600,36604,36764,36910,36917,36913,36920,36914,36918,37122,37109,37129,37118,37219,37221,37327,37396,37397,37411,37385,37406,37389,37392,37383,37393,38292,38287,38283,38289,38291,38290,38286,38538,38542,38539,38525,38533,38534,38541,38514,38532,38593,38597,38596,38598,38599,38639,38642,38860,38917,38918,38920,39143,39146,39151,39145,39154,39149,39342,39341,40643,40653,40657,20098,20653,20661,20658,20659,20677,20670,20652,20663,20667,20655,20679,21119,21111,21117,21215,21222,21220,21218,21219,21295,21983,21992,21971,21990,21966,21980,21959,21969,21987,21988,21999,21978,21985,21957,21958,21989,21961,22290,22291,22622,22609,22616,22615,22618,22612,22635,22604,22637,22602,22626,22610,22603,22887,23233,23241,23244,23230,23229,23228,23219,23234,23218,23913,23919,24140,24185,24265,24264,24338,24409,24492,24494,24858,24847,24904,24863,24819,24859,24825,24833,24840,24910,24908,24900,24909,24894,24884,24871,24845,24838,24887,25121,25122,25619,25662,25630,25642,25645,25661,25644,25615,25628,25620,25613,25654,25622,25623,25606,25964,26015,26032,26263,26249,26247,26248,26262,26244,26264,26253,26371,27028,26989,26970,26999,26976,26964,26997,26928,27010,26954,26984,26987,26974,26963,27001,27014,26973,26979,26971,27463,27506,27584,27583,27603,27645,28322,28335,28371,28342,28354,28304,28317,28359,28357,28325,28312,28348,28346,28331,28369,28310,28316,28356,28372,28330,28327,28340,29006,29017,29033,29028,29001,29031,29020,29036,29030,29004,29029,29022,28998,29032,29014,29242,29266,29495,29509,29503,29502,29807,29786,29781,29791,29790,29761,29759,29785,29787,29788,30070,30072,30208,30192,30209,30194,30193,30202,30207,30196,30195,30430,30431,30555,30571,30566,30558,30563,30585,30570,30572,30556,30565,30568,30562,30702,30862,30896,30871,30872,30860,30857,30844,30865,30867,30847,31098,31103,31105,33836,31165,31260,31258,31264,31252,31263,31262,31391,31392,31607,31680,31584,31598,31591,31921,31923,31925,32147,32121,32145,32129,32143,32091,32622,32617,32618,32626,32681,32680,32676,32854,32856,32902,32900,33137,33136,33144,33125,33134,33139,33131,33145,33146,33126,33285,33351,33922,33911,33853,33841,33909,33894,33899,33865,33900,33883,33852,33845,33889,33891,33897,33901,33862,34398,34396,34399,34553,34579,34568,34567,34560,34558,34555,34562,34563,34566,34570,34905,35039,35028,35033,35036,35032,35037,35041,35018,35029,35026,35228,35299,35435,35442,35443,35430,35433,35440,35463,35452,35427,35488,35441,35461,35437,35426,35438,35436,35449,35451,35390,35432,35938,35978,35977,36042,36039,36040,36036,36018,36035,36034,36037,36321,36319,36328,36335,36339,36346,36330,36324,36326,36530,36611,36617,36606,36618,36767,36786,36939,36938,36947,36930,36948,36924,36949,36944,36935,36943,36942,36941,36945,36926,36929,37138,37143,37228,37226,37225,37321,37431,37463,37432,37437,37440,37438,37467,37451,37476,37457,37428,37449,37453,37445,37433,37439,37466,38296,38552,38548,38549,38605,38603,38601,38602,38647,38651,38649,38646,38742,38772,38774,38928,38929,38931,38922,38930,38924,39164,39156,39165,39166,39347,39345,39348,39649,40169,40578,40718,40723,40736,20711,20718,20709,20694,20717,20698,20693,20687,20689,20721,20686,20713,20834,20979,21123,21122,21297,21421,22014,22016,22043,22039,22013,22036,22022,22025,22029,22030,22007,22038,22047,22024,22032,22006,22296,22294,22645,22654,22659,22675,22666,22649,22661,22653,22781,22821,22818,22820,22890,22889,23265,23270,23273,23255,23254,23256,23267,23413,23518,23527,23521,23525,23526,23528,23522,23524,23519,23565,23650,23940,23943,24155,24163,24149,24151,24148,24275,24278,24330,24390,24432,24505,24903,24895,24907,24951,24930,24931,24927,24922,24920,24949,25130,25735,25688,25684,25764,25720,25695,25722,25681,25703,25652,25709,25723,25970,26017,26071,26070,26274,26280,26269,27036,27048,27029,27073,27054,27091,27083,27035,27063,27067,27051,27060,27088,27085,27053,27084,27046,27075,27043,27465,27468,27699,28467,28436,28414,28435,28404,28457,28478,28448,28460,28431,28418,28450,28415,28399,28422,28465,28472,28466,28451,28437,28459,28463,28552,28458,28396,28417,28402,28364,28407,29076,29081,29053,29066,29060,29074,29246,29330,29334,29508,29520,29796,29795,29802,29808,29805,29956,30097,30247,30221,30219,30217,30227,30433,30435,30596,30589,30591,30561,30913,30879,30887,30899,30889,30883,31118,31119,31117,31278,31281,31402,31401,31469,31471,31649,31637,31627,31605,31639,31645,31636,31631,31672,31623,31620,31929,31933,31934,32187,32176,32156,32189,32190,32160,32202,32180,32178,32177,32186,32162,32191,32181,32184,32173,32210,32199,32172,32624,32736,32737,32735,32862,32858,32903,33104,33152,33167,33160,33162,33151,33154,33255,33274,33287,33300,33310,33355,33993,33983,33990,33988,33945,33950,33970,33948,33995,33976,33984,34003,33936,33980,34001,33994,34623,34588,34619,34594,34597,34612,34584,34645,34615,34601,35059,35074,35060,35065,35064,35069,35048,35098,35055,35494,35468,35486,35491,35469,35489,35475,35492,35498,35493,35496,35480,35473,35482,35495,35946,35981,35980,36051,36049,36050,36203,36249,36245,36348,36628,36626,36629,36627,36771,36960,36952,36956,36963,36953,36958,36962,36957,36955,37145,37144,37150,37237,37240,37239,37236,37496,37504,37509,37528,37526,37499,37523,37532,37544,37500,37521,38305,38312,38313,38307,38309,38308,38553,38556,38555,38604,38610,38656,38780,38789,38902,38935,38936,39087,39089,39171,39173,39180,39177,39361,39599,39600,39654,39745,39746,40180,40182,40179,40636,40763,40778,20740,20736,20731,20725,20729,20738,20744,20745,20741,20956,21127,21128,21129,21133,21130,21232,21426,22062,22075,22073,22066,22079,22068,22057,22099,22094,22103,22132,22070,22063,22064,22656,22687,22686,22707,22684,22702,22697,22694,22893,23305,23291,23307,23285,23308,23304,23534,23532,23529,23531,23652,23653,23965,23956,24162,24159,24161,24290,24282,24287,24285,24291,24288,24392,24433,24503,24501,24950,24935,24942,24925,24917,24962,24956,24944,24939,24958,24999,24976,25003,24974,25004,24986,24996,24980,25006,25134,25705,25711,25721,25758,25778,25736,25744,25776,25765,25747,25749,25769,25746,25774,25773,25771,25754,25772,25753,25762,25779,25973,25975,25976,26286,26283,26292,26289,27171,27167,27112,27137,27166,27161,27133,27169,27155,27146,27123,27138,27141,27117,27153,27472,27470,27556,27589,27590,28479,28540,28548,28497,28518,28500,28550,28525,28507,28536,28526,28558,28538,28528,28516,28567,28504,28373,28527,28512,28511,29087,29100,29105,29096,29270,29339,29518,29527,29801,29835,29827,29822,29824,30079,30240,30249,30239,30244,30246,30241,30242,30362,30394,30436,30606,30599,30604,30609,30603,30923,30917,30906,30922,30910,30933,30908,30928,31295,31292,31296,31293,31287,31291,31407,31406,31661,31665,31684,31668,31686,31687,31681,31648,31692,31946,32224,32244,32239,32251,32216,32236,32221,32232,32227,32218,32222,32233,32158,32217,32242,32249,32629,32631,32687,32745,32806,33179,33180,33181,33184,33178,33176,34071,34109,34074,34030,34092,34093,34067,34065,34083,34081,34068,34028,34085,34047,34054,34690,34676,34678,34656,34662,34680,34664,34649,34647,34636,34643,34907,34909,35088,35079,35090,35091,35093,35082,35516,35538,35527,35524,35477,35531,35576,35506,35529,35522,35519,35504,35542,35533,35510,35513,35547,35916,35918,35948,36064,36062,36070,36068,36076,36077,36066,36067,36060,36074,36065,36205,36255,36259,36395,36368,36381,36386,36367,36393,36383,36385,36382,36538,36637,36635,36639,36649,36646,36650,36636,36638,36645,36969,36974,36968,36973,36983,37168,37165,37159,37169,37255,37257,37259,37251,37573,37563,37559,37610,37548,37604,37569,37555,37564,37586,37575,37616,37554,38317,38321,38660,38662,38663,38665,38752,38797,38795,38799,38945,38955,38940,39091,39178,39187,39186,39192,39389,39376,39391,39387,39377,39381,39378,39385,39607,39662,39663,39719,39749,39748,39799,39791,40198,40201,40195,40617,40638,40654,22696,40786,20754,20760,20756,20752,20757,20864,20906,20957,21137,21139,21235,22105,22123,22137,22121,22116,22136,22122,22120,22117,22129,22127,22124,22114,22134,22721,22718,22727,22725,22894,23325,23348,23416,23536,23566,24394,25010,24977,25001,24970,25037,25014,25022,25034,25032,25136,25797,25793,25803,25787,25788,25818,25796,25799,25794,25805,25791,25810,25812,25790,25972,26310,26313,26297,26308,26311,26296,27197,27192,27194,27225,27243,27224,27193,27204,27234,27233,27211,27207,27189,27231,27208,27481,27511,27653,28610,28593,28577,28611,28580,28609,28583,28595,28608,28601,28598,28582,28576,28596,29118,29129,29136,29138,29128,29141,29113,29134,29145,29148,29123,29124,29544,29852,29859,29848,29855,29854,29922,29964,29965,30260,30264,30266,30439,30437,30624,30622,30623,30629,30952,30938,30956,30951,31142,31309,31310,31302,31308,31307,31418,31705,31761,31689,31716,31707,31713,31721,31718,31957,31958,32266,32273,32264,32283,32291,32286,32285,32265,32272,32633,32690,32752,32753,32750,32808,33203,33193,33192,33275,33288,33368,33369,34122,34137,34120,34152,34153,34115,34121,34157,34154,34142,34691,34719,34718,34722,34701,34913,35114,35122,35109,35115,35105,35242,35238,35558,35578,35563,35569,35584,35548,35559,35566,35582,35585,35586,35575,35565,35571,35574,35580,35947,35949,35987,36084,36420,36401,36404,36418,36409,36405,36667,36655,36664,36659,36776,36774,36981,36980,36984,36978,36988,36986,37172,37266,37664,37686,37624,37683,37679,37666,37628,37675,37636,37658,37648,37670,37665,37653,37678,37657,38331,38567,38568,38570,38613,38670,38673,38678,38669,38675,38671,38747,38748,38758,38808,38960,38968,38971,38967,38957,38969,38948,39184,39208,39198,39195,39201,39194,39405,39394,39409,39608,39612,39675,39661,39720,39825,40213,40227,40230,40232,40210,40219,40664,40660,40845,40860,20778,20767,20769,20786,21237,22158,22144,22160,22149,22151,22159,22741,22739,22737,22734,23344,23338,23332,23418,23607,23656,23996,23994,23997,23992,24171,24396,24509,25033,25026,25031,25062,25035,25138,25140,25806,25802,25816,25824,25840,25830,25836,25841,25826,25837,25986,25987,26329,26326,27264,27284,27268,27298,27292,27355,27299,27262,27287,27280,27296,27484,27566,27610,27656,28632,28657,28639,28640,28635,28644,28651,28655,28544,28652,28641,28649,28629,28654,28656,29159,29151,29166,29158,29157,29165,29164,29172,29152,29237,29254,29552,29554,29865,29872,29862,29864,30278,30274,30284,30442,30643,30634,30640,30636,30631,30637,30703,30967,30970,30964,30959,30977,31143,31146,31319,31423,31751,31757,31742,31735,31756,31712,31968,31964,31966,31970,31967,31961,31965,32302,32318,32326,32311,32306,32323,32299,32317,32305,32325,32321,32308,32313,32328,32309,32319,32303,32580,32755,32764,32881,32882,32880,32879,32883,33222,33219,33210,33218,33216,33215,33213,33225,33214,33256,33289,33393,34218,34180,34174,34204,34193,34196,34223,34203,34183,34216,34186,34407,34752,34769,34739,34770,34758,34731,34747,34746,34760,34763,35131,35126,35140,35128,35133,35244,35598,35607,35609,35611,35594,35616,35613,35588,35600,35905,35903,35955,36090,36093,36092,36088,36091,36264,36425,36427,36424,36426,36676,36670,36674,36677,36671,36991,36989,36996,36993,36994,36992,37177,37283,37278,37276,37709,37762,37672,37749,37706,37733,37707,37656,37758,37740,37723,37744,37722,37716,38346,38347,38348,38344,38342,38577,38584,38614,38684,38686,38816,38867,38982,39094,39221,39425,39423,39854,39851,39850,39853,40251,40255,40587,40655,40670,40668,40669,40667,40766,40779,21474,22165,22190,22745,22744,23352,24413,25059,25139,25844,25842,25854,25862,25850,25851,25847,26039,26332,26406,27315,27308,27331,27323,27320,27330,27310,27311,27487,27512,27567,28681,28683,28670,28678,28666,28689,28687,29179,29180,29182,29176,29559,29557,29863,29887,29973,30294,30296,30290,30653,30655,30651,30652,30990,31150,31329,31330,31328,31428,31429,31787,31783,31786,31774,31779,31777,31975,32340,32341,32350,32346,32353,32338,32345,32584,32761,32763,32887,32886,33229,33231,33290,34255,34217,34253,34256,34249,34224,34234,34233,34214,34799,34796,34802,34784,35206,35250,35316,35624,35641,35628,35627,35920,36101,36441,36451,36454,36452,36447,36437,36544,36681,36685,36999,36995,37e3,37291,37292,37328,37780,37770,37782,37794,37811,37806,37804,37808,37784,37786,37783,38356,38358,38352,38357,38626,38620,38617,38619,38622,38692,38819,38822,38829,38905,38989,38991,38988,38990,38995,39098,39230,39231,39229,39214,39333,39438,39617,39683,39686,39759,39758,39757,39882,39881,39933,39880,39872,40273,40285,40288,40672,40725,40748,20787,22181,22750,22751,22754,23541,40848,24300,25074,25079,25078,25077,25856,25871,26336,26333,27365,27357,27354,27347,28699,28703,28712,28698,28701,28693,28696,29190,29197,29272,29346,29560,29562,29885,29898,29923,30087,30086,30303,30305,30663,31001,31153,31339,31337,31806,31807,31800,31805,31799,31808,32363,32365,32377,32361,32362,32645,32371,32694,32697,32696,33240,34281,34269,34282,34261,34276,34277,34295,34811,34821,34829,34809,34814,35168,35167,35158,35166,35649,35676,35672,35657,35674,35662,35663,35654,35673,36104,36106,36476,36466,36487,36470,36460,36474,36468,36692,36686,36781,37002,37003,37297,37294,37857,37841,37855,37827,37832,37852,37853,37846,37858,37837,37848,37860,37847,37864,38364,38580,38627,38698,38695,38753,38876,38907,39006,39e3,39003,39100,39237,39241,39446,39449,39693,39912,39911,39894,39899,40329,40289,40306,40298,40300,40594,40599,40595,40628,21240,22184,22199,22198,22196,22204,22756,23360,23363,23421,23542,24009,25080,25082,25880,25876,25881,26342,26407,27372,28734,28720,28722,29200,29563,29903,30306,30309,31014,31018,31020,31019,31431,31478,31820,31811,31821,31983,31984,36782,32381,32380,32386,32588,32768,33242,33382,34299,34297,34321,34298,34310,34315,34311,34314,34836,34837,35172,35258,35320,35696,35692,35686,35695,35679,35691,36111,36109,36489,36481,36485,36482,37300,37323,37912,37891,37885,38369,38704,39108,39250,39249,39336,39467,39472,39479,39477,39955,39949,40569,40629,40680,40751,40799,40803,40801,20791,20792,22209,22208,22210,22804,23660,24013,25084,25086,25885,25884,26005,26345,27387,27396,27386,27570,28748,29211,29351,29910,29908,30313,30675,31824,32399,32396,32700,34327,34349,34330,34851,34850,34849,34847,35178,35180,35261,35700,35703,35709,36115,36490,36493,36491,36703,36783,37306,37934,37939,37941,37946,37944,37938,37931,38370,38712,38713,38706,38911,39015,39013,39255,39493,39491,39488,39486,39631,39764,39761,39981,39973,40367,40372,40386,40376,40605,40687,40729,40796,40806,40807,20796,20795,22216,22218,22217,23423,24020,24018,24398,25087,25892,27402,27489,28753,28760,29568,29924,30090,30318,30316,31155,31840,31839,32894,32893,33247,35186,35183,35324,35712,36118,36119,36497,36499,36705,37192,37956,37969,37970,38717,38718,38851,38849,39019,39253,39509,39501,39634,39706,40009,39985,39998,39995,40403,40407,40756,40812,40810,40852,22220,24022,25088,25891,25899,25898,26348,27408,29914,31434,31844,31843,31845,32403,32406,32404,33250,34360,34367,34865,35722,37008,37007,37987,37984,37988,38760,39023,39260,39514,39515,39511,39635,39636,39633,40020,40023,40022,40421,40607,40692,22225,22761,25900,28766,30321,30322,30679,32592,32648,34870,34873,34914,35731,35730,35734,33399,36123,37312,37994,38722,38728,38724,38854,39024,39519,39714,39768,40031,40441,40442,40572,40573,40711,40823,40818,24307,27414,28771,31852,31854,34875,35264,36513,37313,38002,38e3,39025,39262,39638,39715,40652,28772,30682,35738,38007,38857,39522,39525,32412,35740,36522,37317,38013,38014,38012,40055,40056,40695,35924,38015,40474,29224,39530,39729,40475,40478,31858,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,20022,20031,20101,20128,20866,20886,20907,21241,21304,21353,21430,22794,23424,24027,12083,24191,24308,24400,24417,25908,26080,30098,30326,36789,38582,168,710,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,65339,65341,10045,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8679,8632,8633,12751,131276,20058,131210,20994,17553,40880,20872,40881,161287,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65506,65508,65287,65282,12849,8470,8481,12443,12444,11904,11908,11910,11911,11912,11914,11916,11917,11925,11932,11933,11941,11943,11946,11948,11950,11958,11964,11966,11974,11978,11980,11981,11983,11990,11991,11998,12003,null,null,null,643,592,603,596,629,339,248,331,650,618,20034,20060,20981,21274,21378,19975,19980,20039,20109,22231,64012,23662,24435,19983,20871,19982,20014,20115,20162,20169,20168,20888,21244,21356,21433,22304,22787,22828,23568,24063,26081,27571,27596,27668,29247,20017,20028,20200,20188,20201,20193,20189,20186,21004,21276,21324,22306,22307,22807,22831,23425,23428,23570,23611,23668,23667,24068,24192,24194,24521,25097,25168,27669,27702,27715,27711,27707,29358,29360,29578,31160,32906,38430,20238,20248,20268,20213,20244,20209,20224,20215,20232,20253,20226,20229,20258,20243,20228,20212,20242,20913,21011,21001,21008,21158,21282,21279,21325,21386,21511,22241,22239,22318,22314,22324,22844,22912,22908,22917,22907,22910,22903,22911,23382,23573,23589,23676,23674,23675,23678,24031,24181,24196,24322,24346,24436,24533,24532,24527,25180,25182,25188,25185,25190,25186,25177,25184,25178,25189,26095,26094,26430,26425,26424,26427,26426,26431,26428,26419,27672,27718,27730,27740,27727,27722,27732,27723,27724,28785,29278,29364,29365,29582,29994,30335,31349,32593,33400,33404,33408,33405,33407,34381,35198,37017,37015,37016,37019,37012,38434,38436,38432,38435,20310,20283,20322,20297,20307,20324,20286,20327,20306,20319,20289,20312,20269,20275,20287,20321,20879,20921,21020,21022,21025,21165,21166,21257,21347,21362,21390,21391,21552,21559,21546,21588,21573,21529,21532,21541,21528,21565,21583,21569,21544,21540,21575,22254,22247,22245,22337,22341,22348,22345,22347,22354,22790,22848,22950,22936,22944,22935,22926,22946,22928,22927,22951,22945,23438,23442,23592,23594,23693,23695,23688,23691,23689,23698,23690,23686,23699,23701,24032,24074,24078,24203,24201,24204,24200,24205,24325,24349,24440,24438,24530,24529,24528,24557,24552,24558,24563,24545,24548,24547,24570,24559,24567,24571,24576,24564,25146,25219,25228,25230,25231,25236,25223,25201,25211,25210,25200,25217,25224,25207,25213,25202,25204,25911,26096,26100,26099,26098,26101,26437,26439,26457,26453,26444,26440,26461,26445,26458,26443,27600,27673,27674,27768,27751,27755,27780,27787,27791,27761,27759,27753,27802,27757,27783,27797,27804,27750,27763,27749,27771,27790,28788,28794,29283,29375,29373,29379,29382,29377,29370,29381,29589,29591,29587,29588,29586,30010,30009,30100,30101,30337,31037,32820,32917,32921,32912,32914,32924,33424,33423,33413,33422,33425,33427,33418,33411,33412,35960,36809,36799,37023,37025,37029,37022,37031,37024,38448,38440,38447,38445,20019,20376,20348,20357,20349,20352,20359,20342,20340,20361,20356,20343,20300,20375,20330,20378,20345,20353,20344,20368,20380,20372,20382,20370,20354,20373,20331,20334,20894,20924,20926,21045,21042,21043,21062,21041,21180,21258,21259,21308,21394,21396,21639,21631,21633,21649,21634,21640,21611,21626,21630,21605,21612,21620,21606,21645,21615,21601,21600,21656,21603,21607,21604,22263,22265,22383,22386,22381,22379,22385,22384,22390,22400,22389,22395,22387,22388,22370,22376,22397,22796,22853,22965,22970,22991,22990,22962,22988,22977,22966,22972,22979,22998,22961,22973,22976,22984,22964,22983,23394,23397,23443,23445,23620,23623,23726,23716,23712,23733,23727,23720,23724,23711,23715,23725,23714,23722,23719,23709,23717,23734,23728,23718,24087,24084,24089,24360,24354,24355,24356,24404,24450,24446,24445,24542,24549,24621,24614,24601,24626,24587,24628,24586,24599,24627,24602,24606,24620,24610,24589,24592,24622,24595,24593,24588,24585,24604,25108,25149,25261,25268,25297,25278,25258,25270,25290,25262,25267,25263,25275,25257,25264,25272,25917,26024,26043,26121,26108,26116,26130,26120,26107,26115,26123,26125,26117,26109,26129,26128,26358,26378,26501,26476,26510,26514,26486,26491,26520,26502,26500,26484,26509,26508,26490,26527,26513,26521,26499,26493,26497,26488,26489,26516,27429,27520,27518,27614,27677,27795,27884,27883,27886,27865,27830,27860,27821,27879,27831,27856,27842,27834,27843,27846,27885,27890,27858,27869,27828,27786,27805,27776,27870,27840,27952,27853,27847,27824,27897,27855,27881,27857,28820,28824,28805,28819,28806,28804,28817,28822,28802,28826,28803,29290,29398,29387,29400,29385,29404,29394,29396,29402,29388,29393,29604,29601,29613,29606,29602,29600,29612,29597,29917,29928,30015,30016,30014,30092,30104,30383,30451,30449,30448,30453,30712,30716,30713,30715,30714,30711,31042,31039,31173,31352,31355,31483,31861,31997,32821,32911,32942,32931,32952,32949,32941,33312,33440,33472,33451,33434,33432,33435,33461,33447,33454,33468,33438,33466,33460,33448,33441,33449,33474,33444,33475,33462,33442,34416,34415,34413,34414,35926,36818,36811,36819,36813,36822,36821,36823,37042,37044,37039,37043,37040,38457,38461,38460,38458,38467,20429,20421,20435,20402,20425,20427,20417,20436,20444,20441,20411,20403,20443,20423,20438,20410,20416,20409,20460,21060,21065,21184,21186,21309,21372,21399,21398,21401,21400,21690,21665,21677,21669,21711,21699,33549,21687,21678,21718,21686,21701,21702,21664,21616,21692,21666,21694,21618,21726,21680,22453,22430,22431,22436,22412,22423,22429,22427,22420,22424,22415,22425,22437,22426,22421,22772,22797,22867,23009,23006,23022,23040,23025,23005,23034,23037,23036,23030,23012,23026,23031,23003,23017,23027,23029,23008,23038,23028,23021,23464,23628,23760,23768,23756,23767,23755,23771,23774,23770,23753,23751,23754,23766,23763,23764,23759,23752,23750,23758,23775,23800,24057,24097,24098,24099,24096,24100,24240,24228,24226,24219,24227,24229,24327,24366,24406,24454,24631,24633,24660,24690,24670,24645,24659,24647,24649,24667,24652,24640,24642,24671,24612,24644,24664,24678,24686,25154,25155,25295,25357,25355,25333,25358,25347,25323,25337,25359,25356,25336,25334,25344,25363,25364,25338,25365,25339,25328,25921,25923,26026,26047,26166,26145,26162,26165,26140,26150,26146,26163,26155,26170,26141,26164,26169,26158,26383,26384,26561,26610,26568,26554,26588,26555,26616,26584,26560,26551,26565,26603,26596,26591,26549,26573,26547,26615,26614,26606,26595,26562,26553,26574,26599,26608,26546,26620,26566,26605,26572,26542,26598,26587,26618,26569,26570,26563,26602,26571,27432,27522,27524,27574,27606,27608,27616,27680,27681,27944,27956,27949,27935,27964,27967,27922,27914,27866,27955,27908,27929,27962,27930,27921,27904,27933,27970,27905,27928,27959,27907,27919,27968,27911,27936,27948,27912,27938,27913,27920,28855,28831,28862,28849,28848,28833,28852,28853,28841,29249,29257,29258,29292,29296,29299,29294,29386,29412,29416,29419,29407,29418,29414,29411,29573,29644,29634,29640,29637,29625,29622,29621,29620,29675,29631,29639,29630,29635,29638,29624,29643,29932,29934,29998,30023,30024,30119,30122,30329,30404,30472,30467,30468,30469,30474,30455,30459,30458,30695,30696,30726,30737,30738,30725,30736,30735,30734,30729,30723,30739,31050,31052,31051,31045,31044,31189,31181,31183,31190,31182,31360,31358,31441,31488,31489,31866,31864,31865,31871,31872,31873,32003,32008,32001,32600,32657,32653,32702,32775,32782,32783,32788,32823,32984,32967,32992,32977,32968,32962,32976,32965,32995,32985,32988,32970,32981,32969,32975,32983,32998,32973,33279,33313,33428,33497,33534,33529,33543,33512,33536,33493,33594,33515,33494,33524,33516,33505,33522,33525,33548,33531,33526,33520,33514,33508,33504,33530,33523,33517,34423,34420,34428,34419,34881,34894,34919,34922,34921,35283,35332,35335,36210,36835,36833,36846,36832,37105,37053,37055,37077,37061,37054,37063,37067,37064,37332,37331,38484,38479,38481,38483,38474,38478,20510,20485,20487,20499,20514,20528,20507,20469,20468,20531,20535,20524,20470,20471,20503,20508,20512,20519,20533,20527,20529,20494,20826,20884,20883,20938,20932,20933,20936,20942,21089,21082,21074,21086,21087,21077,21090,21197,21262,21406,21798,21730,21783,21778,21735,21747,21732,21786,21759,21764,21768,21739,21777,21765,21745,21770,21755,21751,21752,21728,21774,21763,21771,22273,22274,22476,22578,22485,22482,22458,22470,22461,22460,22456,22454,22463,22471,22480,22457,22465,22798,22858,23065,23062,23085,23086,23061,23055,23063,23050,23070,23091,23404,23463,23469,23468,23555,23638,23636,23788,23807,23790,23793,23799,23808,23801,24105,24104,24232,24238,24234,24236,24371,24368,24423,24669,24666,24679,24641,24738,24712,24704,24722,24705,24733,24707,24725,24731,24727,24711,24732,24718,25113,25158,25330,25360,25430,25388,25412,25413,25398,25411,25572,25401,25419,25418,25404,25385,25409,25396,25432,25428,25433,25389,25415,25395,25434,25425,25400,25431,25408,25416,25930,25926,26054,26051,26052,26050,26186,26207,26183,26193,26386,26387,26655,26650,26697,26674,26675,26683,26699,26703,26646,26673,26652,26677,26667,26669,26671,26702,26692,26676,26653,26642,26644,26662,26664,26670,26701,26682,26661,26656,27436,27439,27437,27441,27444,27501,32898,27528,27622,27620,27624,27619,27618,27623,27685,28026,28003,28004,28022,27917,28001,28050,27992,28002,28013,28015,28049,28045,28143,28031,28038,27998,28007,28e3,28055,28016,28028,27999,28034,28056,27951,28008,28043,28030,28032,28036,27926,28035,28027,28029,28021,28048,28892,28883,28881,28893,28875,32569,28898,28887,28882,28894,28896,28884,28877,28869,28870,28871,28890,28878,28897,29250,29304,29303,29302,29440,29434,29428,29438,29430,29427,29435,29441,29651,29657,29669,29654,29628,29671,29667,29673,29660,29650,29659,29652,29661,29658,29655,29656,29672,29918,29919,29940,29941,29985,30043,30047,30128,30145,30139,30148,30144,30143,30134,30138,30346,30409,30493,30491,30480,30483,30482,30499,30481,30485,30489,30490,30498,30503,30755,30764,30754,30773,30767,30760,30766,30763,30753,30761,30771,30762,30769,31060,31067,31055,31068,31059,31058,31057,31211,31212,31200,31214,31213,31210,31196,31198,31197,31366,31369,31365,31371,31372,31370,31367,31448,31504,31492,31507,31493,31503,31496,31498,31502,31497,31506,31876,31889,31882,31884,31880,31885,31877,32030,32029,32017,32014,32024,32022,32019,32031,32018,32015,32012,32604,32609,32606,32608,32605,32603,32662,32658,32707,32706,32704,32790,32830,32825,33018,33010,33017,33013,33025,33019,33024,33281,33327,33317,33587,33581,33604,33561,33617,33573,33622,33599,33601,33574,33564,33570,33602,33614,33563,33578,33544,33596,33613,33558,33572,33568,33591,33583,33577,33607,33605,33612,33619,33566,33580,33611,33575,33608,34387,34386,34466,34472,34454,34445,34449,34462,34439,34455,34438,34443,34458,34437,34469,34457,34465,34471,34453,34456,34446,34461,34448,34452,34883,34884,34925,34933,34934,34930,34944,34929,34943,34927,34947,34942,34932,34940,35346,35911,35927,35963,36004,36003,36214,36216,36277,36279,36278,36561,36563,36862,36853,36866,36863,36859,36868,36860,36854,37078,37088,37081,37082,37091,37087,37093,37080,37083,37079,37084,37092,37200,37198,37199,37333,37346,37338,38492,38495,38588,39139,39647,39727,20095,20592,20586,20577,20574,20576,20563,20555,20573,20594,20552,20557,20545,20571,20554,20578,20501,20549,20575,20585,20587,20579,20580,20550,20544,20590,20595,20567,20561,20944,21099,21101,21100,21102,21206,21203,21293,21404,21877,21878,21820,21837,21840,21812,21802,21841,21858,21814,21813,21808,21842,21829,21772,21810,21861,21838,21817,21832,21805,21819,21824,21835,22282,22279,22523,22548,22498,22518,22492,22516,22528,22509,22525,22536,22520,22539,22515,22479,22535,22510,22499,22514,22501,22508,22497,22542,22524,22544,22503,22529,22540,22513,22505,22512,22541,22532,22876,23136,23128,23125,23143,23134,23096,23093,23149,23120,23135,23141,23148,23123,23140,23127,23107,23133,23122,23108,23131,23112,23182,23102,23117,23097,23116,23152,23145,23111,23121,23126,23106,23132,23410,23406,23489,23488,23641,23838,23819,23837,23834,23840,23820,23848,23821,23846,23845,23823,23856,23826,23843,23839,23854,24126,24116,24241,24244,24249,24242,24243,24374,24376,24475,24470,24479,24714,24720,24710,24766,24752,24762,24787,24788,24783,24804,24793,24797,24776,24753,24795,24759,24778,24767,24771,24781,24768,25394,25445,25482,25474,25469,25533,25502,25517,25501,25495,25515,25486,25455,25479,25488,25454,25519,25461,25500,25453,25518,25468,25508,25403,25503,25464,25477,25473,25489,25485,25456,25939,26061,26213,26209,26203,26201,26204,26210,26392,26745,26759,26768,26780,26733,26734,26798,26795,26966,26735,26787,26796,26793,26741,26740,26802,26767,26743,26770,26748,26731,26738,26794,26752,26737,26750,26779,26774,26763,26784,26761,26788,26744,26747,26769,26764,26762,26749,27446,27443,27447,27448,27537,27535,27533,27534,27532,27690,28096,28075,28084,28083,28276,28076,28137,28130,28087,28150,28116,28160,28104,28128,28127,28118,28094,28133,28124,28125,28123,28148,28106,28093,28141,28144,28090,28117,28098,28111,28105,28112,28146,28115,28157,28119,28109,28131,28091,28922,28941,28919,28951,28916,28940,28912,28932,28915,28944,28924,28927,28934,28947,28928,28920,28918,28939,28930,28942,29310,29307,29308,29311,29469,29463,29447,29457,29464,29450,29448,29439,29455,29470,29576,29686,29688,29685,29700,29697,29693,29703,29696,29690,29692,29695,29708,29707,29684,29704,30052,30051,30158,30162,30159,30155,30156,30161,30160,30351,30345,30419,30521,30511,30509,30513,30514,30516,30515,30525,30501,30523,30517,30792,30802,30793,30797,30794,30796,30758,30789,30800,31076,31079,31081,31082,31075,31083,31073,31163,31226,31224,31222,31223,31375,31380,31376,31541,31559,31540,31525,31536,31522,31524,31539,31512,31530,31517,31537,31531,31533,31535,31538,31544,31514,31523,31892,31896,31894,31907,32053,32061,32056,32054,32058,32069,32044,32041,32065,32071,32062,32063,32074,32059,32040,32611,32661,32668,32669,32667,32714,32715,32717,32720,32721,32711,32719,32713,32799,32798,32795,32839,32835,32840,33048,33061,33049,33051,33069,33055,33068,33054,33057,33045,33063,33053,33058,33297,33336,33331,33338,33332,33330,33396,33680,33699,33704,33677,33658,33651,33700,33652,33679,33665,33685,33689,33653,33684,33705,33661,33667,33676,33693,33691,33706,33675,33662,33701,33711,33672,33687,33712,33663,33702,33671,33710,33654,33690,34393,34390,34495,34487,34498,34497,34501,34490,34480,34504,34489,34483,34488,34508,34484,34491,34492,34499,34493,34494,34898,34953,34965,34984,34978,34986,34970,34961,34977,34975,34968,34983,34969,34971,34967,34980,34988,34956,34963,34958,35202,35286,35289,35285,35376,35367,35372,35358,35897,35899,35932,35933,35965,36005,36221,36219,36217,36284,36290,36281,36287,36289,36568,36574,36573,36572,36567,36576,36577,36900,36875,36881,36892,36876,36897,37103,37098,37104,37108,37106,37107,37076,37099,37100,37097,37206,37208,37210,37203,37205,37356,37364,37361,37363,37368,37348,37369,37354,37355,37367,37352,37358,38266,38278,38280,38524,38509,38507,38513,38511,38591,38762,38916,39141,39319,20635,20629,20628,20638,20619,20643,20611,20620,20622,20637,20584,20636,20626,20610,20615,20831,20948,21266,21265,21412,21415,21905,21928,21925,21933,21879,22085,21922,21907,21896,21903,21941,21889,21923,21906,21924,21885,21900,21926,21887,21909,21921,21902,22284,22569,22583,22553,22558,22567,22563,22568,22517,22600,22565,22556,22555,22579,22591,22582,22574,22585,22584,22573,22572,22587,22881,23215,23188,23199,23162,23202,23198,23160,23206,23164,23205,23212,23189,23214,23095,23172,23178,23191,23171,23179,23209,23163,23165,23180,23196,23183,23187,23197,23530,23501,23499,23508,23505,23498,23502,23564,23600,23863,23875,23915,23873,23883,23871,23861,23889,23886,23893,23859,23866,23890,23869,23857,23897,23874,23865,23881,23864,23868,23858,23862,23872,23877,24132,24129,24408,24486,24485,24491,24777,24761,24780,24802,24782,24772,24852,24818,24842,24854,24837,24821,24851,24824,24828,24830,24769,24835,24856,24861,24848,24831,24836,24843,25162,25492,25521,25520,25550,25573,25576,25583,25539,25757,25587,25546,25568,25590,25557,25586,25589,25697,25567,25534,25565,25564,25540,25560,25555,25538,25543,25548,25547,25544,25584,25559,25561,25906,25959,25962,25956,25948,25960,25957,25996,26013,26014,26030,26064,26066,26236,26220,26235,26240,26225,26233,26218,26226,26369,26892,26835,26884,26844,26922,26860,26858,26865,26895,26838,26871,26859,26852,26870,26899,26896,26867,26849,26887,26828,26888,26992,26804,26897,26863,26822,26900,26872,26832,26877,26876,26856,26891,26890,26903,26830,26824,26845,26846,26854,26868,26833,26886,26836,26857,26901,26917,26823,27449,27451,27455,27452,27540,27543,27545,27541,27581,27632,27634,27635,27696,28156,28230,28231,28191,28233,28296,28220,28221,28229,28258,28203,28223,28225,28253,28275,28188,28211,28235,28224,28241,28219,28163,28206,28254,28264,28252,28257,28209,28200,28256,28273,28267,28217,28194,28208,28243,28261,28199,28280,28260,28279,28245,28281,28242,28262,28213,28214,28250,28960,28958,28975,28923,28974,28977,28963,28965,28962,28978,28959,28968,28986,28955,29259,29274,29320,29321,29318,29317,29323,29458,29451,29488,29474,29489,29491,29479,29490,29485,29478,29475,29493,29452,29742,29740,29744,29739,29718,29722,29729,29741,29745,29732,29731,29725,29737,29728,29746,29947,29999,30063,30060,30183,30170,30177,30182,30173,30175,30180,30167,30357,30354,30426,30534,30535,30532,30541,30533,30538,30542,30539,30540,30686,30700,30816,30820,30821,30812,30829,30833,30826,30830,30832,30825,30824,30814,30818,31092,31091,31090,31088,31234,31242,31235,31244,31236,31385,31462,31460,31562,31547,31556,31560,31564,31566,31552,31576,31557,31906,31902,31912,31905,32088,32111,32099,32083,32086,32103,32106,32079,32109,32092,32107,32082,32084,32105,32081,32095,32078,32574,32575,32613,32614,32674,32672,32673,32727,32849,32847,32848,33022,32980,33091,33098,33106,33103,33095,33085,33101,33082,33254,33262,33271,33272,33273,33284,33340,33341,33343,33397,33595,33743,33785,33827,33728,33768,33810,33767,33764,33788,33782,33808,33734,33736,33771,33763,33727,33793,33757,33765,33752,33791,33761,33739,33742,33750,33781,33737,33801,33807,33758,33809,33798,33730,33779,33749,33786,33735,33745,33770,33811,33731,33772,33774,33732,33787,33751,33762,33819,33755,33790,34520,34530,34534,34515,34531,34522,34538,34525,34539,34524,34540,34537,34519,34536,34513,34888,34902,34901,35002,35031,35001,35e3,35008,35006,34998,35004,34999,35005,34994,35073,35017,35221,35224,35223,35293,35290,35291,35406,35405,35385,35417,35392,35415,35416,35396,35397,35410,35400,35409,35402,35404,35407,35935,35969,35968,36026,36030,36016,36025,36021,36228,36224,36233,36312,36307,36301,36295,36310,36316,36303,36309,36313,36296,36311,36293,36591,36599,36602,36601,36582,36590,36581,36597,36583,36584,36598,36587,36593,36588,36596,36585,36909,36916,36911,37126,37164,37124,37119,37116,37128,37113,37115,37121,37120,37127,37125,37123,37217,37220,37215,37218,37216,37377,37386,37413,37379,37402,37414,37391,37388,37376,37394,37375,37373,37382,37380,37415,37378,37404,37412,37401,37399,37381,37398,38267,38285,38284,38288,38535,38526,38536,38537,38531,38528,38594,38600,38595,38641,38640,38764,38768,38766,38919,39081,39147,40166,40697,20099,20100,20150,20669,20671,20678,20654,20676,20682,20660,20680,20674,20656,20673,20666,20657,20683,20681,20662,20664,20951,21114,21112,21115,21116,21955,21979,21964,21968,21963,21962,21981,21952,21972,21956,21993,21951,21970,21901,21967,21973,21986,21974,21960,22002,21965,21977,21954,22292,22611,22632,22628,22607,22605,22601,22639,22613,22606,22621,22617,22629,22619,22589,22627,22641,22780,23239,23236,23243,23226,23224,23217,23221,23216,23231,23240,23227,23238,23223,23232,23242,23220,23222,23245,23225,23184,23510,23512,23513,23583,23603,23921,23907,23882,23909,23922,23916,23902,23912,23911,23906,24048,24143,24142,24138,24141,24139,24261,24268,24262,24267,24263,24384,24495,24493,24823,24905,24906,24875,24901,24886,24882,24878,24902,24879,24911,24873,24896,25120,37224,25123,25125,25124,25541,25585,25579,25616,25618,25609,25632,25636,25651,25667,25631,25621,25624,25657,25655,25634,25635,25612,25638,25648,25640,25665,25653,25647,25610,25626,25664,25637,25639,25611,25575,25627,25646,25633,25614,25967,26002,26067,26246,26252,26261,26256,26251,26250,26265,26260,26232,26400,26982,26975,26936,26958,26978,26993,26943,26949,26986,26937,26946,26967,26969,27002,26952,26953,26933,26988,26931,26941,26981,26864,27e3,26932,26985,26944,26991,26948,26998,26968,26945,26996,26956,26939,26955,26935,26972,26959,26961,26930,26962,26927,27003,26940,27462,27461,27459,27458,27464,27457,27547,64013,27643,27644,27641,27639,27640,28315,28374,28360,28303,28352,28319,28307,28308,28320,28337,28345,28358,28370,28349,28353,28318,28361,28343,28336,28365,28326,28367,28338,28350,28355,28380,28376,28313,28306,28302,28301,28324,28321,28351,28339,28368,28362,28311,28334,28323,28999,29012,29010,29027,29024,28993,29021,29026,29042,29048,29034,29025,28994,29016,28995,29003,29040,29023,29008,29011,28996,29005,29018,29263,29325,29324,29329,29328,29326,29500,29506,29499,29498,29504,29514,29513,29764,29770,29771,29778,29777,29783,29760,29775,29776,29774,29762,29766,29773,29780,29921,29951,29950,29949,29981,30073,30071,27011,30191,30223,30211,30199,30206,30204,30201,30200,30224,30203,30198,30189,30197,30205,30361,30389,30429,30549,30559,30560,30546,30550,30554,30569,30567,30548,30553,30573,30688,30855,30874,30868,30863,30852,30869,30853,30854,30881,30851,30841,30873,30848,30870,30843,31100,31106,31101,31097,31249,31256,31257,31250,31255,31253,31266,31251,31259,31248,31395,31394,31390,31467,31590,31588,31597,31604,31593,31602,31589,31603,31601,31600,31585,31608,31606,31587,31922,31924,31919,32136,32134,32128,32141,32127,32133,32122,32142,32123,32131,32124,32140,32148,32132,32125,32146,32621,32619,32615,32616,32620,32678,32677,32679,32731,32732,32801,33124,33120,33143,33116,33129,33115,33122,33138,26401,33118,33142,33127,33135,33092,33121,33309,33353,33348,33344,33346,33349,34033,33855,33878,33910,33913,33935,33933,33893,33873,33856,33926,33895,33840,33869,33917,33882,33881,33908,33907,33885,34055,33886,33847,33850,33844,33914,33859,33912,33842,33861,33833,33753,33867,33839,33858,33837,33887,33904,33849,33870,33868,33874,33903,33989,33934,33851,33863,33846,33843,33896,33918,33860,33835,33888,33876,33902,33872,34571,34564,34551,34572,34554,34518,34549,34637,34552,34574,34569,34561,34550,34573,34565,35030,35019,35021,35022,35038,35035,35034,35020,35024,35205,35227,35295,35301,35300,35297,35296,35298,35292,35302,35446,35462,35455,35425,35391,35447,35458,35460,35445,35459,35457,35444,35450,35900,35915,35914,35941,35940,35942,35974,35972,35973,36044,36200,36201,36241,36236,36238,36239,36237,36243,36244,36240,36242,36336,36320,36332,36337,36334,36304,36329,36323,36322,36327,36338,36331,36340,36614,36607,36609,36608,36613,36615,36616,36610,36619,36946,36927,36932,36937,36925,37136,37133,37135,37137,37142,37140,37131,37134,37230,37231,37448,37458,37424,37434,37478,37427,37477,37470,37507,37422,37450,37446,37485,37484,37455,37472,37479,37487,37430,37473,37488,37425,37460,37475,37456,37490,37454,37459,37452,37462,37426,38303,38300,38302,38299,38546,38547,38545,38551,38606,38650,38653,38648,38645,38771,38775,38776,38770,38927,38925,38926,39084,39158,39161,39343,39346,39344,39349,39597,39595,39771,40170,40173,40167,40576,40701,20710,20692,20695,20712,20723,20699,20714,20701,20708,20691,20716,20720,20719,20707,20704,20952,21120,21121,21225,21227,21296,21420,22055,22037,22028,22034,22012,22031,22044,22017,22035,22018,22010,22045,22020,22015,22009,22665,22652,22672,22680,22662,22657,22655,22644,22667,22650,22663,22673,22670,22646,22658,22664,22651,22676,22671,22782,22891,23260,23278,23269,23253,23274,23258,23277,23275,23283,23266,23264,23259,23276,23262,23261,23257,23272,23263,23415,23520,23523,23651,23938,23936,23933,23942,23930,23937,23927,23946,23945,23944,23934,23932,23949,23929,23935,24152,24153,24147,24280,24273,24279,24270,24284,24277,24281,24274,24276,24388,24387,24431,24502,24876,24872,24897,24926,24945,24947,24914,24915,24946,24940,24960,24948,24916,24954,24923,24933,24891,24938,24929,24918,25129,25127,25131,25643,25677,25691,25693,25716,25718,25714,25715,25725,25717,25702,25766,25678,25730,25694,25692,25675,25683,25696,25680,25727,25663,25708,25707,25689,25701,25719,25971,26016,26273,26272,26271,26373,26372,26402,27057,27062,27081,27040,27086,27030,27056,27052,27068,27025,27033,27022,27047,27021,27049,27070,27055,27071,27076,27069,27044,27092,27065,27082,27034,27087,27059,27027,27050,27041,27038,27097,27031,27024,27074,27061,27045,27078,27466,27469,27467,27550,27551,27552,27587,27588,27646,28366,28405,28401,28419,28453,28408,28471,28411,28462,28425,28494,28441,28442,28455,28440,28475,28434,28397,28426,28470,28531,28409,28398,28461,28480,28464,28476,28469,28395,28423,28430,28483,28421,28413,28406,28473,28444,28412,28474,28447,28429,28446,28424,28449,29063,29072,29065,29056,29061,29058,29071,29051,29062,29057,29079,29252,29267,29335,29333,29331,29507,29517,29521,29516,29794,29811,29809,29813,29810,29799,29806,29952,29954,29955,30077,30096,30230,30216,30220,30229,30225,30218,30228,30392,30593,30588,30597,30594,30574,30592,30575,30590,30595,30898,30890,30900,30893,30888,30846,30891,30878,30885,30880,30892,30882,30884,31128,31114,31115,31126,31125,31124,31123,31127,31112,31122,31120,31275,31306,31280,31279,31272,31270,31400,31403,31404,31470,31624,31644,31626,31633,31632,31638,31629,31628,31643,31630,31621,31640,21124,31641,31652,31618,31931,31935,31932,31930,32167,32183,32194,32163,32170,32193,32192,32197,32157,32206,32196,32198,32203,32204,32175,32185,32150,32188,32159,32166,32174,32169,32161,32201,32627,32738,32739,32741,32734,32804,32861,32860,33161,33158,33155,33159,33165,33164,33163,33301,33943,33956,33953,33951,33978,33998,33986,33964,33966,33963,33977,33972,33985,33997,33962,33946,33969,34e3,33949,33959,33979,33954,33940,33991,33996,33947,33961,33967,33960,34006,33944,33974,33999,33952,34007,34004,34002,34011,33968,33937,34401,34611,34595,34600,34667,34624,34606,34590,34593,34585,34587,34627,34604,34625,34622,34630,34592,34610,34602,34605,34620,34578,34618,34609,34613,34626,34598,34599,34616,34596,34586,34608,34577,35063,35047,35057,35058,35066,35070,35054,35068,35062,35067,35056,35052,35051,35229,35233,35231,35230,35305,35307,35304,35499,35481,35467,35474,35471,35478,35901,35944,35945,36053,36047,36055,36246,36361,36354,36351,36365,36349,36362,36355,36359,36358,36357,36350,36352,36356,36624,36625,36622,36621,37155,37148,37152,37154,37151,37149,37146,37156,37153,37147,37242,37234,37241,37235,37541,37540,37494,37531,37498,37536,37524,37546,37517,37542,37530,37547,37497,37527,37503,37539,37614,37518,37506,37525,37538,37501,37512,37537,37514,37510,37516,37529,37543,37502,37511,37545,37533,37515,37421,38558,38561,38655,38744,38781,38778,38782,38787,38784,38786,38779,38788,38785,38783,38862,38861,38934,39085,39086,39170,39168,39175,39325,39324,39363,39353,39355,39354,39362,39357,39367,39601,39651,39655,39742,39743,39776,39777,39775,40177,40178,40181,40615,20735,20739,20784,20728,20742,20743,20726,20734,20747,20748,20733,20746,21131,21132,21233,21231,22088,22082,22092,22069,22081,22090,22089,22086,22104,22106,22080,22067,22077,22060,22078,22072,22058,22074,22298,22699,22685,22705,22688,22691,22703,22700,22693,22689,22783,23295,23284,23293,23287,23286,23299,23288,23298,23289,23297,23303,23301,23311,23655,23961,23959,23967,23954,23970,23955,23957,23968,23964,23969,23962,23966,24169,24157,24160,24156,32243,24283,24286,24289,24393,24498,24971,24963,24953,25009,25008,24994,24969,24987,24979,25007,25005,24991,24978,25002,24993,24973,24934,25011,25133,25710,25712,25750,25760,25733,25751,25756,25743,25739,25738,25740,25763,25759,25704,25777,25752,25974,25978,25977,25979,26034,26035,26293,26288,26281,26290,26295,26282,26287,27136,27142,27159,27109,27128,27157,27121,27108,27168,27135,27116,27106,27163,27165,27134,27175,27122,27118,27156,27127,27111,27200,27144,27110,27131,27149,27132,27115,27145,27140,27160,27173,27151,27126,27174,27143,27124,27158,27473,27557,27555,27554,27558,27649,27648,27647,27650,28481,28454,28542,28551,28614,28562,28557,28553,28556,28514,28495,28549,28506,28566,28534,28524,28546,28501,28530,28498,28496,28503,28564,28563,28509,28416,28513,28523,28541,28519,28560,28499,28555,28521,28543,28565,28515,28535,28522,28539,29106,29103,29083,29104,29088,29082,29097,29109,29085,29093,29086,29092,29089,29098,29084,29095,29107,29336,29338,29528,29522,29534,29535,29536,29533,29531,29537,29530,29529,29538,29831,29833,29834,29830,29825,29821,29829,29832,29820,29817,29960,29959,30078,30245,30238,30233,30237,30236,30243,30234,30248,30235,30364,30365,30366,30363,30605,30607,30601,30600,30925,30907,30927,30924,30929,30926,30932,30920,30915,30916,30921,31130,31137,31136,31132,31138,31131,27510,31289,31410,31412,31411,31671,31691,31678,31660,31694,31663,31673,31690,31669,31941,31944,31948,31947,32247,32219,32234,32231,32215,32225,32259,32250,32230,32246,32241,32240,32238,32223,32630,32684,32688,32685,32749,32747,32746,32748,32742,32744,32868,32871,33187,33183,33182,33173,33186,33177,33175,33302,33359,33363,33362,33360,33358,33361,34084,34107,34063,34048,34089,34062,34057,34061,34079,34058,34087,34076,34043,34091,34042,34056,34060,34036,34090,34034,34069,34039,34027,34035,34044,34066,34026,34025,34070,34046,34088,34077,34094,34050,34045,34078,34038,34097,34086,34023,34024,34032,34031,34041,34072,34080,34096,34059,34073,34095,34402,34646,34659,34660,34679,34785,34675,34648,34644,34651,34642,34657,34650,34641,34654,34669,34666,34640,34638,34655,34653,34671,34668,34682,34670,34652,34661,34639,34683,34677,34658,34663,34665,34906,35077,35084,35092,35083,35095,35096,35097,35078,35094,35089,35086,35081,35234,35236,35235,35309,35312,35308,35535,35526,35512,35539,35537,35540,35541,35515,35543,35518,35520,35525,35544,35523,35514,35517,35545,35902,35917,35983,36069,36063,36057,36072,36058,36061,36071,36256,36252,36257,36251,36384,36387,36389,36388,36398,36373,36379,36374,36369,36377,36390,36391,36372,36370,36376,36371,36380,36375,36378,36652,36644,36632,36634,36640,36643,36630,36631,36979,36976,36975,36967,36971,37167,37163,37161,37162,37170,37158,37166,37253,37254,37258,37249,37250,37252,37248,37584,37571,37572,37568,37593,37558,37583,37617,37599,37592,37609,37591,37597,37580,37615,37570,37608,37578,37576,37582,37606,37581,37589,37577,37600,37598,37607,37585,37587,37557,37601,37574,37556,38268,38316,38315,38318,38320,38564,38562,38611,38661,38664,38658,38746,38794,38798,38792,38864,38863,38942,38941,38950,38953,38952,38944,38939,38951,39090,39176,39162,39185,39188,39190,39191,39189,39388,39373,39375,39379,39380,39374,39369,39382,39384,39371,39383,39372,39603,39660,39659,39667,39666,39665,39750,39747,39783,39796,39793,39782,39798,39797,39792,39784,39780,39788,40188,40186,40189,40191,40183,40199,40192,40185,40187,40200,40197,40196,40579,40659,40719,40720,20764,20755,20759,20762,20753,20958,21300,21473,22128,22112,22126,22131,22118,22115,22125,22130,22110,22135,22300,22299,22728,22717,22729,22719,22714,22722,22716,22726,23319,23321,23323,23329,23316,23315,23312,23318,23336,23322,23328,23326,23535,23980,23985,23977,23975,23989,23984,23982,23978,23976,23986,23981,23983,23988,24167,24168,24166,24175,24297,24295,24294,24296,24293,24395,24508,24989,25e3,24982,25029,25012,25030,25025,25036,25018,25023,25016,24972,25815,25814,25808,25807,25801,25789,25737,25795,25819,25843,25817,25907,25983,25980,26018,26312,26302,26304,26314,26315,26319,26301,26299,26298,26316,26403,27188,27238,27209,27239,27186,27240,27198,27229,27245,27254,27227,27217,27176,27226,27195,27199,27201,27242,27236,27216,27215,27220,27247,27241,27232,27196,27230,27222,27221,27213,27214,27206,27477,27476,27478,27559,27562,27563,27592,27591,27652,27651,27654,28589,28619,28579,28615,28604,28622,28616,28510,28612,28605,28574,28618,28584,28676,28581,28590,28602,28588,28586,28623,28607,28600,28578,28617,28587,28621,28591,28594,28592,29125,29122,29119,29112,29142,29120,29121,29131,29140,29130,29127,29135,29117,29144,29116,29126,29146,29147,29341,29342,29545,29542,29543,29548,29541,29547,29546,29823,29850,29856,29844,29842,29845,29857,29963,30080,30255,30253,30257,30269,30259,30268,30261,30258,30256,30395,30438,30618,30621,30625,30620,30619,30626,30627,30613,30617,30615,30941,30953,30949,30954,30942,30947,30939,30945,30946,30957,30943,30944,31140,31300,31304,31303,31414,31416,31413,31409,31415,31710,31715,31719,31709,31701,31717,31706,31720,31737,31700,31722,31714,31708,31723,31704,31711,31954,31956,31959,31952,31953,32274,32289,32279,32268,32287,32288,32275,32270,32284,32277,32282,32290,32267,32271,32278,32269,32276,32293,32292,32579,32635,32636,32634,32689,32751,32810,32809,32876,33201,33190,33198,33209,33205,33195,33200,33196,33204,33202,33207,33191,33266,33365,33366,33367,34134,34117,34155,34125,34131,34145,34136,34112,34118,34148,34113,34146,34116,34129,34119,34147,34110,34139,34161,34126,34158,34165,34133,34151,34144,34188,34150,34141,34132,34149,34156,34403,34405,34404,34715,34703,34711,34707,34706,34696,34689,34710,34712,34681,34695,34723,34693,34704,34705,34717,34692,34708,34716,34714,34697,35102,35110,35120,35117,35118,35111,35121,35106,35113,35107,35119,35116,35103,35313,35552,35554,35570,35572,35573,35549,35604,35556,35551,35568,35528,35550,35553,35560,35583,35567,35579,35985,35986,35984,36085,36078,36081,36080,36083,36204,36206,36261,36263,36403,36414,36408,36416,36421,36406,36412,36413,36417,36400,36415,36541,36662,36654,36661,36658,36665,36663,36660,36982,36985,36987,36998,37114,37171,37173,37174,37267,37264,37265,37261,37263,37671,37662,37640,37663,37638,37647,37754,37688,37692,37659,37667,37650,37633,37702,37677,37646,37645,37579,37661,37626,37669,37651,37625,37623,37684,37634,37668,37631,37673,37689,37685,37674,37652,37644,37643,37630,37641,37632,37627,37654,38332,38349,38334,38329,38330,38326,38335,38325,38333,38569,38612,38667,38674,38672,38809,38807,38804,38896,38904,38965,38959,38962,39204,39199,39207,39209,39326,39406,39404,39397,39396,39408,39395,39402,39401,39399,39609,39615,39604,39611,39670,39674,39673,39671,39731,39808,39813,39815,39804,39806,39803,39810,39827,39826,39824,39802,39829,39805,39816,40229,40215,40224,40222,40212,40233,40221,40216,40226,40208,40217,40223,40584,40582,40583,40622,40621,40661,40662,40698,40722,40765,20774,20773,20770,20772,20768,20777,21236,22163,22156,22157,22150,22148,22147,22142,22146,22143,22145,22742,22740,22735,22738,23341,23333,23346,23331,23340,23335,23334,23343,23342,23419,23537,23538,23991,24172,24170,24510,24507,25027,25013,25020,25063,25056,25061,25060,25064,25054,25839,25833,25827,25835,25828,25832,25985,25984,26038,26074,26322,27277,27286,27265,27301,27273,27295,27291,27297,27294,27271,27283,27278,27285,27267,27304,27300,27281,27263,27302,27290,27269,27276,27282,27483,27565,27657,28620,28585,28660,28628,28643,28636,28653,28647,28646,28638,28658,28637,28642,28648,29153,29169,29160,29170,29156,29168,29154,29555,29550,29551,29847,29874,29867,29840,29866,29869,29873,29861,29871,29968,29969,29970,29967,30084,30275,30280,30281,30279,30372,30441,30645,30635,30642,30647,30646,30644,30641,30632,30704,30963,30973,30978,30971,30972,30962,30981,30969,30974,30980,31147,31144,31324,31323,31318,31320,31316,31322,31422,31424,31425,31749,31759,31730,31744,31743,31739,31758,31732,31755,31731,31746,31753,31747,31745,31736,31741,31750,31728,31729,31760,31754,31976,32301,32316,32322,32307,38984,32312,32298,32329,32320,32327,32297,32332,32304,32315,32310,32324,32314,32581,32639,32638,32637,32756,32754,32812,33211,33220,33228,33226,33221,33223,33212,33257,33371,33370,33372,34179,34176,34191,34215,34197,34208,34187,34211,34171,34212,34202,34206,34167,34172,34185,34209,34170,34168,34135,34190,34198,34182,34189,34201,34205,34177,34210,34178,34184,34181,34169,34166,34200,34192,34207,34408,34750,34730,34733,34757,34736,34732,34745,34741,34748,34734,34761,34755,34754,34764,34743,34735,34756,34762,34740,34742,34751,34744,34749,34782,34738,35125,35123,35132,35134,35137,35154,35127,35138,35245,35247,35246,35314,35315,35614,35608,35606,35601,35589,35595,35618,35599,35602,35605,35591,35597,35592,35590,35612,35603,35610,35919,35952,35954,35953,35951,35989,35988,36089,36207,36430,36429,36435,36432,36428,36423,36675,36672,36997,36990,37176,37274,37282,37275,37273,37279,37281,37277,37280,37793,37763,37807,37732,37718,37703,37756,37720,37724,37750,37705,37712,37713,37728,37741,37775,37708,37738,37753,37719,37717,37714,37711,37745,37751,37755,37729,37726,37731,37735,37760,37710,37721,38343,38336,38345,38339,38341,38327,38574,38576,38572,38688,38687,38680,38685,38681,38810,38817,38812,38814,38813,38869,38868,38897,38977,38980,38986,38985,38981,38979,39205,39211,39212,39210,39219,39218,39215,39213,39217,39216,39320,39331,39329,39426,39418,39412,39415,39417,39416,39414,39419,39421,39422,39420,39427,39614,39678,39677,39681,39676,39752,39834,39848,39838,39835,39846,39841,39845,39844,39814,39842,39840,39855,40243,40257,40295,40246,40238,40239,40241,40248,40240,40261,40258,40259,40254,40247,40256,40253,32757,40237,40586,40585,40589,40624,40648,40666,40699,40703,40740,40739,40738,40788,40864,20785,20781,20782,22168,22172,22167,22170,22173,22169,22896,23356,23657,23658,24e3,24173,24174,25048,25055,25069,25070,25073,25066,25072,25067,25046,25065,25855,25860,25853,25848,25857,25859,25852,26004,26075,26330,26331,26328,27333,27321,27325,27361,27334,27322,27318,27319,27335,27316,27309,27486,27593,27659,28679,28684,28685,28673,28677,28692,28686,28671,28672,28667,28710,28668,28663,28682,29185,29183,29177,29187,29181,29558,29880,29888,29877,29889,29886,29878,29883,29890,29972,29971,30300,30308,30297,30288,30291,30295,30298,30374,30397,30444,30658,30650,30975,30988,30995,30996,30985,30992,30994,30993,31149,31148,31327,31772,31785,31769,31776,31775,31789,31773,31782,31784,31778,31781,31792,32348,32336,32342,32355,32344,32354,32351,32337,32352,32343,32339,32693,32691,32759,32760,32885,33233,33234,33232,33375,33374,34228,34246,34240,34243,34242,34227,34229,34237,34247,34244,34239,34251,34254,34248,34245,34225,34230,34258,34340,34232,34231,34238,34409,34791,34790,34786,34779,34795,34794,34789,34783,34803,34788,34772,34780,34771,34797,34776,34787,34724,34775,34777,34817,34804,34792,34781,35155,35147,35151,35148,35142,35152,35153,35145,35626,35623,35619,35635,35632,35637,35655,35631,35644,35646,35633,35621,35639,35622,35638,35630,35620,35643,35645,35642,35906,35957,35993,35992,35991,36094,36100,36098,36096,36444,36450,36448,36439,36438,36446,36453,36455,36443,36442,36449,36445,36457,36436,36678,36679,36680,36683,37160,37178,37179,37182,37288,37285,37287,37295,37290,37813,37772,37778,37815,37787,37789,37769,37799,37774,37802,37790,37798,37781,37768,37785,37791,37773,37809,37777,37810,37796,37800,37812,37795,37797,38354,38355,38353,38579,38615,38618,24002,38623,38616,38621,38691,38690,38693,38828,38830,38824,38827,38820,38826,38818,38821,38871,38873,38870,38872,38906,38992,38993,38994,39096,39233,39228,39226,39439,39435,39433,39437,39428,39441,39434,39429,39431,39430,39616,39644,39688,39684,39685,39721,39733,39754,39756,39755,39879,39878,39875,39871,39873,39861,39864,39891,39862,39876,39865,39869,40284,40275,40271,40266,40283,40267,40281,40278,40268,40279,40274,40276,40287,40280,40282,40590,40588,40671,40705,40704,40726,40741,40747,40746,40745,40744,40780,40789,20788,20789,21142,21239,21428,22187,22189,22182,22183,22186,22188,22746,22749,22747,22802,23357,23358,23359,24003,24176,24511,25083,25863,25872,25869,25865,25868,25870,25988,26078,26077,26334,27367,27360,27340,27345,27353,27339,27359,27356,27344,27371,27343,27341,27358,27488,27568,27660,28697,28711,28704,28694,28715,28705,28706,28707,28713,28695,28708,28700,28714,29196,29194,29191,29186,29189,29349,29350,29348,29347,29345,29899,29893,29879,29891,29974,30304,30665,30666,30660,30705,31005,31003,31009,31004,30999,31006,31152,31335,31336,31795,31804,31801,31788,31803,31980,31978,32374,32373,32376,32368,32375,32367,32378,32370,32372,32360,32587,32586,32643,32646,32695,32765,32766,32888,33239,33237,33380,33377,33379,34283,34289,34285,34265,34273,34280,34266,34263,34284,34290,34296,34264,34271,34275,34268,34257,34288,34278,34287,34270,34274,34816,34810,34819,34806,34807,34825,34828,34827,34822,34812,34824,34815,34826,34818,35170,35162,35163,35159,35169,35164,35160,35165,35161,35208,35255,35254,35318,35664,35656,35658,35648,35667,35670,35668,35659,35669,35665,35650,35666,35671,35907,35959,35958,35994,36102,36103,36105,36268,36266,36269,36267,36461,36472,36467,36458,36463,36475,36546,36690,36689,36687,36688,36691,36788,37184,37183,37296,37293,37854,37831,37839,37826,37850,37840,37881,37868,37836,37849,37801,37862,37834,37844,37870,37859,37845,37828,37838,37824,37842,37863,38269,38362,38363,38625,38697,38699,38700,38696,38694,38835,38839,38838,38877,38878,38879,39004,39001,39005,38999,39103,39101,39099,39102,39240,39239,39235,39334,39335,39450,39445,39461,39453,39460,39451,39458,39456,39463,39459,39454,39452,39444,39618,39691,39690,39694,39692,39735,39914,39915,39904,39902,39908,39910,39906,39920,39892,39895,39916,39900,39897,39909,39893,39905,39898,40311,40321,40330,40324,40328,40305,40320,40312,40326,40331,40332,40317,40299,40308,40309,40304,40297,40325,40307,40315,40322,40303,40313,40319,40327,40296,40596,40593,40640,40700,40749,40768,40769,40781,40790,40791,40792,21303,22194,22197,22195,22755,23365,24006,24007,24302,24303,24512,24513,25081,25879,25878,25877,25875,26079,26344,26339,26340,27379,27376,27370,27368,27385,27377,27374,27375,28732,28725,28719,28727,28724,28721,28738,28728,28735,28730,28729,28736,28731,28723,28737,29203,29204,29352,29565,29564,29882,30379,30378,30398,30445,30668,30670,30671,30669,30706,31013,31011,31015,31016,31012,31017,31154,31342,31340,31341,31479,31817,31816,31818,31815,31813,31982,32379,32382,32385,32384,32698,32767,32889,33243,33241,33291,33384,33385,34338,34303,34305,34302,34331,34304,34294,34308,34313,34309,34316,34301,34841,34832,34833,34839,34835,34838,35171,35174,35257,35319,35680,35690,35677,35688,35683,35685,35687,35693,36270,36486,36488,36484,36697,36694,36695,36693,36696,36698,37005,37187,37185,37303,37301,37298,37299,37899,37907,37883,37920,37903,37908,37886,37909,37904,37928,37913,37901,37877,37888,37879,37895,37902,37910,37906,37882,37897,37880,37898,37887,37884,37900,37878,37905,37894,38366,38368,38367,38702,38703,38841,38843,38909,38910,39008,39010,39011,39007,39105,39106,39248,39246,39257,39244,39243,39251,39474,39476,39473,39468,39466,39478,39465,39470,39480,39469,39623,39626,39622,39696,39698,39697,39947,39944,39927,39941,39954,39928,4e4,39943,39950,39942,39959,39956,39945,40351,40345,40356,40349,40338,40344,40336,40347,40352,40340,40348,40362,40343,40353,40346,40354,40360,40350,40355,40383,40361,40342,40358,40359,40601,40603,40602,40677,40676,40679,40678,40752,40750,40795,40800,40798,40797,40793,40849,20794,20793,21144,21143,22211,22205,22206,23368,23367,24011,24015,24305,25085,25883,27394,27388,27395,27384,27392,28739,28740,28746,28744,28745,28741,28742,29213,29210,29209,29566,29975,30314,30672,31021,31025,31023,31828,31827,31986,32394,32391,32392,32395,32390,32397,32589,32699,32816,33245,34328,34346,34342,34335,34339,34332,34329,34343,34350,34337,34336,34345,34334,34341,34857,34845,34843,34848,34852,34844,34859,34890,35181,35177,35182,35179,35322,35705,35704,35653,35706,35707,36112,36116,36271,36494,36492,36702,36699,36701,37190,37188,37189,37305,37951,37947,37942,37929,37949,37948,37936,37945,37930,37943,37932,37952,37937,38373,38372,38371,38709,38714,38847,38881,39012,39113,39110,39104,39256,39254,39481,39485,39494,39492,39490,39489,39482,39487,39629,39701,39703,39704,39702,39738,39762,39979,39965,39964,39980,39971,39976,39977,39972,39969,40375,40374,40380,40385,40391,40394,40399,40382,40389,40387,40379,40373,40398,40377,40378,40364,40392,40369,40365,40396,40371,40397,40370,40570,40604,40683,40686,40685,40731,40728,40730,40753,40782,40805,40804,40850,20153,22214,22213,22219,22897,23371,23372,24021,24017,24306,25889,25888,25894,25890,27403,27400,27401,27661,28757,28758,28759,28754,29214,29215,29353,29567,29912,29909,29913,29911,30317,30381,31029,31156,31344,31345,31831,31836,31833,31835,31834,31988,31985,32401,32591,32647,33246,33387,34356,34357,34355,34348,34354,34358,34860,34856,34854,34858,34853,35185,35263,35262,35323,35710,35716,35714,35718,35717,35711,36117,36501,36500,36506,36498,36496,36502,36503,36704,36706,37191,37964,37968,37962,37963,37967,37959,37957,37960,37961,37958,38719,38883,39018,39017,39115,39252,39259,39502,39507,39508,39500,39503,39496,39498,39497,39506,39504,39632,39705,39723,39739,39766,39765,40006,40008,39999,40004,39993,39987,40001,39996,39991,39988,39986,39997,39990,40411,40402,40414,40410,40395,40400,40412,40401,40415,40425,40409,40408,40406,40437,40405,40413,40630,40688,40757,40755,40754,40770,40811,40853,40866,20797,21145,22760,22759,22898,23373,24024,34863,24399,25089,25091,25092,25897,25893,26006,26347,27409,27410,27407,27594,28763,28762,29218,29570,29569,29571,30320,30676,31847,31846,32405,33388,34362,34368,34361,34364,34353,34363,34366,34864,34866,34862,34867,35190,35188,35187,35326,35724,35726,35723,35720,35909,36121,36504,36708,36707,37308,37986,37973,37981,37975,37982,38852,38853,38912,39510,39513,39710,39711,39712,40018,40024,40016,40010,40013,40011,40021,40025,40012,40014,40443,40439,40431,40419,40427,40440,40420,40438,40417,40430,40422,40434,40432,40418,40428,40436,40435,40424,40429,40642,40656,40690,40691,40710,40732,40760,40759,40758,40771,40783,40817,40816,40814,40815,22227,22221,23374,23661,25901,26349,26350,27411,28767,28769,28765,28768,29219,29915,29925,30677,31032,31159,31158,31850,32407,32649,33389,34371,34872,34871,34869,34891,35732,35733,36510,36511,36512,36509,37310,37309,37314,37995,37992,37993,38629,38726,38723,38727,38855,38885,39518,39637,39769,40035,40039,40038,40034,40030,40032,40450,40446,40455,40451,40454,40453,40448,40449,40457,40447,40445,40452,40608,40734,40774,40820,40821,40822,22228,25902,26040,27416,27417,27415,27418,28770,29222,29354,30680,30681,31033,31849,31851,31990,32410,32408,32411,32409,33248,33249,34374,34375,34376,35193,35194,35196,35195,35327,35736,35737,36517,36516,36515,37998,37997,37999,38001,38003,38729,39026,39263,40040,40046,40045,40459,40461,40464,40463,40466,40465,40609,40693,40713,40775,40824,40827,40826,40825,22302,28774,31855,34876,36274,36518,37315,38004,38008,38006,38005,39520,40052,40051,40049,40053,40468,40467,40694,40714,40868,28776,28773,31991,34410,34878,34877,34879,35742,35996,36521,36553,38731,39027,39028,39116,39265,39339,39524,39526,39527,39716,40469,40471,40776,25095,27422,29223,34380,36520,38018,38016,38017,39529,39528,39726,40473,29225,34379,35743,38019,40057,40631,30325,39531,40058,40477,28777,28778,40612,40830,40777,40856,30849,37561,35023,22715,24658,31911,23290,9556,9574,9559,9568,9580,9571,9562,9577,9565,9554,9572,9557,9566,9578,9569,9560,9575,9563,9555,9573,9558,9567,9579,9570,9561,9576,9564,9553,9552,9581,9582,9584,9583,65517,132423,37595,132575,147397,34124,17077,29679,20917,13897,149826,166372,37700,137691,33518,146632,30780,26436,25311,149811,166314,131744,158643,135941,20395,140525,20488,159017,162436,144896,150193,140563,20521,131966,24484,131968,131911,28379,132127,20605,20737,13434,20750,39020,14147,33814,149924,132231,20832,144308,20842,134143,139516,131813,140592,132494,143923,137603,23426,34685,132531,146585,20914,20920,40244,20937,20943,20945,15580,20947,150182,20915,20962,21314,20973,33741,26942,145197,24443,21003,21030,21052,21173,21079,21140,21177,21189,31765,34114,21216,34317,158483,21253,166622,21833,28377,147328,133460,147436,21299,21316,134114,27851,136998,26651,29653,24650,16042,14540,136936,29149,17570,21357,21364,165547,21374,21375,136598,136723,30694,21395,166555,21408,21419,21422,29607,153458,16217,29596,21441,21445,27721,20041,22526,21465,15019,134031,21472,147435,142755,21494,134263,21523,28793,21803,26199,27995,21613,158547,134516,21853,21647,21668,18342,136973,134877,15796,134477,166332,140952,21831,19693,21551,29719,21894,21929,22021,137431,147514,17746,148533,26291,135348,22071,26317,144010,26276,26285,22093,22095,30961,22257,38791,21502,22272,22255,22253,166758,13859,135759,22342,147877,27758,28811,22338,14001,158846,22502,136214,22531,136276,148323,22566,150517,22620,22698,13665,22752,22748,135740,22779,23551,22339,172368,148088,37843,13729,22815,26790,14019,28249,136766,23076,21843,136850,34053,22985,134478,158849,159018,137180,23001,137211,137138,159142,28017,137256,136917,23033,159301,23211,23139,14054,149929,23159,14088,23190,29797,23251,159649,140628,15749,137489,14130,136888,24195,21200,23414,25992,23420,162318,16388,18525,131588,23509,24928,137780,154060,132517,23539,23453,19728,23557,138052,23571,29646,23572,138405,158504,23625,18653,23685,23785,23791,23947,138745,138807,23824,23832,23878,138916,23738,24023,33532,14381,149761,139337,139635,33415,14390,15298,24110,27274,24181,24186,148668,134355,21414,20151,24272,21416,137073,24073,24308,164994,24313,24315,14496,24316,26686,37915,24333,131521,194708,15070,18606,135994,24378,157832,140240,24408,140401,24419,38845,159342,24434,37696,166454,24487,23990,15711,152144,139114,159992,140904,37334,131742,166441,24625,26245,137335,14691,15815,13881,22416,141236,31089,15936,24734,24740,24755,149890,149903,162387,29860,20705,23200,24932,33828,24898,194726,159442,24961,20980,132694,24967,23466,147383,141407,25043,166813,170333,25040,14642,141696,141505,24611,24924,25886,25483,131352,25285,137072,25301,142861,25452,149983,14871,25656,25592,136078,137212,25744,28554,142902,38932,147596,153373,25825,25829,38011,14950,25658,14935,25933,28438,150056,150051,25989,25965,25951,143486,26037,149824,19255,26065,16600,137257,26080,26083,24543,144384,26136,143863,143864,26180,143780,143781,26187,134773,26215,152038,26227,26228,138813,143921,165364,143816,152339,30661,141559,39332,26370,148380,150049,15147,27130,145346,26462,26471,26466,147917,168173,26583,17641,26658,28240,37436,26625,144358,159136,26717,144495,27105,27147,166623,26995,26819,144845,26881,26880,15666,14849,144956,15232,26540,26977,166474,17148,26934,27032,15265,132041,33635,20624,27129,144985,139562,27205,145155,27293,15347,26545,27336,168348,15373,27421,133411,24798,27445,27508,141261,28341,146139,132021,137560,14144,21537,146266,27617,147196,27612,27703,140427,149745,158545,27738,33318,27769,146876,17605,146877,147876,149772,149760,146633,14053,15595,134450,39811,143865,140433,32655,26679,159013,159137,159211,28054,27996,28284,28420,149887,147589,159346,34099,159604,20935,27804,28189,33838,166689,28207,146991,29779,147330,31180,28239,23185,143435,28664,14093,28573,146992,28410,136343,147517,17749,37872,28484,28508,15694,28532,168304,15675,28575,147780,28627,147601,147797,147513,147440,147380,147775,20959,147798,147799,147776,156125,28747,28798,28839,28801,28876,28885,28886,28895,16644,15848,29108,29078,148087,28971,28997,23176,29002,29038,23708,148325,29007,37730,148161,28972,148570,150055,150050,29114,166888,28861,29198,37954,29205,22801,37955,29220,37697,153093,29230,29248,149876,26813,29269,29271,15957,143428,26637,28477,29314,29482,29483,149539,165931,18669,165892,29480,29486,29647,29610,134202,158254,29641,29769,147938,136935,150052,26147,14021,149943,149901,150011,29687,29717,26883,150054,29753,132547,16087,29788,141485,29792,167602,29767,29668,29814,33721,29804,14128,29812,37873,27180,29826,18771,150156,147807,150137,166799,23366,166915,137374,29896,137608,29966,29929,29982,167641,137803,23511,167596,37765,30029,30026,30055,30062,151426,16132,150803,30094,29789,30110,30132,30210,30252,30289,30287,30319,30326,156661,30352,33263,14328,157969,157966,30369,30373,30391,30412,159647,33890,151709,151933,138780,30494,30502,30528,25775,152096,30552,144044,30639,166244,166248,136897,30708,30729,136054,150034,26826,30895,30919,30931,38565,31022,153056,30935,31028,30897,161292,36792,34948,166699,155779,140828,31110,35072,26882,31104,153687,31133,162617,31036,31145,28202,160038,16040,31174,168205,31188],"euc-kr":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,null,null,null,null,null,null,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,null,null,null,null,null,null,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,null,null,null,null,null,null,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,null,null,null,null,null,null,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,null,null,null,null,null,null,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,null,null,null,null,null,null,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,null,null,null,null,null,null,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,null,null,null,null,null,null,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,null,null,null,null,null,null,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,null,null,null,null,null,null,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,null,null,null,null,null,null,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,null,null,null,null,null,null,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,null,null,null,null,null,null,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,null,null,null,null,null,null,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,null,null,null,null,null,null,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,null,null,null,null,null,null,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,null,null,null,null,null,null,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,null,null,null,null,null,null,45998,45999,46e3,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,null,null,null,null,null,null,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,null,null,null,null,null,null,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,null,null,null,null,null,null,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,null,null,null,null,null,null,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,null,null,null,null,null,null,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,null,null,null,null,null,null,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,null,null,null,null,null,null,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,null,null,null,null,null,null,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,null,null,null,null,null,null,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,null,null,null,null,null,null,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,null,null,null,null,null,null,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,null,null,null,null,null,null,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,null,null,null,null,null,null,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,null,null,null,null,null,null,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,null,null,null,null,null,null,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,null,null,null,null,null,null,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,null,null,null,null,null,null,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,null,null,null,null,null,null,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48e3,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,null,null,null,null,null,null,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,null,null,null,null,null,null,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,null,null,null,null,null,null,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,null,null,null,null,null,null,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,null,null,null,null,null,null,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,null,null,null,null,null,null,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,null,null,null,null,null,null,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,null,null,null,null,null,null,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49e3,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,null,null,null,null,null,null,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,null,null,null,null,null,null,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,null,null,null,null,null,null,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,null,null,null,null,null,null,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,null,null,null,null,null,null,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,null,null,null,null,null,null,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,null,null,null,null,null,null,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,null,null,null,null,null,null,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,null,null,null,null,null,null,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,null,null,null,null,null,null,49998,49999,5e4,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,null,null,null,null,null,null,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,null,null,null,null,null,null,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,null,null,null,null,null,null,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,null,null,null,null,null,null,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,null,null,null,null,null,null,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,null,null,null,null,null,null,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,null,null,null,null,null,null,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,null,null,null,null,null,null,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51e3,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,null,null,null,null,null,null,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,null,null,null,null,null,null,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,null,null,null,null,null,null,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,null,null,null,null,null,null,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,null,null,null,null,null,null,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,null,null,null,null,null,null,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,null,null,null,null,null,null,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,null,null,null,null,null,null,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,null,null,null,null,null,null,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,null,null,null,null,null,null,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,null,null,null,null,null,null,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,null,null,null,null,null,null,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,null,null,null,null,null,null,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,null,null,null,null,null,null,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,null,null,null,null,null,null,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,null,null,null,null,null,null,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,null,null,null,null,null,null,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,null,null,null,null,null,null,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,null,null,null,null,null,null,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,null,null,null,null,null,null,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,null,null,null,null,null,null,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,null,null,null,null,null,null,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,null,null,null,null,null,null,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,null,null,null,null,null,null,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,null,null,null,null,null,null,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,null,null,null,null,null,null,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,null,null,null,null,null,null,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,null,null,null,null,null,null,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,null,null,null,null,null,null,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,null,null,null,null,null,null,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,null,null,null,null,null,null,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,null,null,null,null,null,null,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,null,null,null,null,null,null,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,null,null,null,null,null,null,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,null,null,null,null,null,null,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,null,null,null,null,null,null,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,null,null,null,null,null,null,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,null,null,null,null,null,null,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45e3,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,null,null,null,null,null,null,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,null,null,null,null,null,null,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,null,null,null,null,null,null,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,null,null,null,null,null,null,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,null,null,null,null,null,null,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,null,null,null,null,null,null,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,null,null,null,null,null,null,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,null,null,null,null,null,null,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,null,null,null,null,null,null,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,null,null,null,null,null,null,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47e3,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,null,null,null,null,null,null,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,null,null,null,null,null,null,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,null,null,null,null,null,null,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,null,null,null,null,null,null,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,null,null,null,null,null,null,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,null,null,null,null,null,null,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,null,null,null,null,null,null,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,null,null,null,null,null,null,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,null,null,null,null,null,null,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,null,null,null,null,null,null,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,null,null,null,null,null,null,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,null,null,null,null,null,null,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,null,null,null,null,null,null,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,null,null,null,null,null,null,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,null,null,null,null,null,null,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,null,null,null,null,null,null,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,null,null,null,null,null,null,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,null,null,null,null,null,null,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,null,null,null,null,null,null,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,null,null,null,null,null,null,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,null,null,null,null,null,null,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,null,null,null,null,null,null,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52e3,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,null,null,null,null,null,null,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,null,null,null,null,null,null,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,null,null,null,null,null,null,54989,54990,54991,54992,54994,54995,54997,54998,55e3,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,null,null,null,null,null,null,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53e3,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,null,null,null,null,null,null,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,null,null,null,null,null,null,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54e3,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32e3,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37e3,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36e3,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26e3,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21e3,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39e3,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29006,29728,3e4,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64e3,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27e3,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],gb18030:[19970,19972,19973,19974,19983,19986,19991,19999,2e4,20001,20003,20006,20009,20014,20015,20017,20019,20021,20023,20028,20032,20033,20034,20036,20038,20042,20049,20053,20055,20058,20059,20066,20067,20068,20069,20071,20072,20074,20075,20076,20077,20078,20079,20082,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20095,20096,20097,20098,20099,20100,20101,20103,20106,20112,20118,20119,20121,20124,20125,20126,20131,20138,20143,20144,20145,20148,20150,20151,20152,20153,20156,20157,20158,20168,20172,20175,20176,20178,20186,20187,20188,20192,20194,20198,20199,20201,20205,20206,20207,20209,20212,20216,20217,20218,20220,20222,20224,20226,20227,20228,20229,20230,20231,20232,20235,20236,20242,20243,20244,20245,20246,20252,20253,20257,20259,20264,20265,20268,20269,20270,20273,20275,20277,20279,20281,20283,20286,20287,20288,20289,20290,20292,20293,20295,20296,20297,20298,20299,20300,20306,20308,20310,20321,20322,20326,20328,20330,20331,20333,20334,20337,20338,20341,20343,20344,20345,20346,20349,20352,20353,20354,20357,20358,20359,20362,20364,20366,20368,20370,20371,20373,20374,20376,20377,20378,20380,20382,20383,20385,20386,20388,20395,20397,20400,20401,20402,20403,20404,20406,20407,20408,20409,20410,20411,20412,20413,20414,20416,20417,20418,20422,20423,20424,20425,20427,20428,20429,20434,20435,20436,20437,20438,20441,20443,20448,20450,20452,20453,20455,20459,20460,20464,20466,20468,20469,20470,20471,20473,20475,20476,20477,20479,20480,20481,20482,20483,20484,20485,20486,20487,20488,20489,20490,20491,20494,20496,20497,20499,20501,20502,20503,20507,20509,20510,20512,20514,20515,20516,20519,20523,20527,20528,20529,20530,20531,20532,20533,20534,20535,20536,20537,20539,20541,20543,20544,20545,20546,20548,20549,20550,20553,20554,20555,20557,20560,20561,20562,20563,20564,20566,20567,20568,20569,20571,20573,20574,20575,20576,20577,20578,20579,20580,20582,20583,20584,20585,20586,20587,20589,20590,20591,20592,20593,20594,20595,20596,20597,20600,20601,20602,20604,20605,20609,20610,20611,20612,20614,20615,20617,20618,20619,20620,20622,20623,20624,20625,20626,20627,20628,20629,20630,20631,20632,20633,20634,20635,20636,20637,20638,20639,20640,20641,20642,20644,20646,20650,20651,20653,20654,20655,20656,20657,20659,20660,20661,20662,20663,20664,20665,20668,20669,20670,20671,20672,20673,20674,20675,20676,20677,20678,20679,20680,20681,20682,20683,20684,20685,20686,20688,20689,20690,20691,20692,20693,20695,20696,20697,20699,20700,20701,20702,20703,20704,20705,20706,20707,20708,20709,20712,20713,20714,20715,20719,20720,20721,20722,20724,20726,20727,20728,20729,20730,20732,20733,20734,20735,20736,20737,20738,20739,20740,20741,20744,20745,20746,20748,20749,20750,20751,20752,20753,20755,20756,20757,20758,20759,20760,20761,20762,20763,20764,20765,20766,20767,20768,20770,20771,20772,20773,20774,20775,20776,20777,20778,20779,20780,20781,20782,20783,20784,20785,20786,20787,20788,20789,20790,20791,20792,20793,20794,20795,20796,20797,20798,20802,20807,20810,20812,20814,20815,20816,20818,20819,20823,20824,20825,20827,20829,20830,20831,20832,20833,20835,20836,20838,20839,20841,20842,20847,20850,20858,20862,20863,20867,20868,20870,20871,20874,20875,20878,20879,20880,20881,20883,20884,20888,20890,20893,20894,20895,20897,20899,20902,20903,20904,20905,20906,20909,20910,20916,20920,20921,20922,20926,20927,20929,20930,20931,20933,20936,20938,20941,20942,20944,20946,20947,20948,20949,20950,20951,20952,20953,20954,20956,20958,20959,20962,20963,20965,20966,20967,20968,20969,20970,20972,20974,20977,20978,20980,20983,20990,20996,20997,21001,21003,21004,21007,21008,21011,21012,21013,21020,21022,21023,21025,21026,21027,21029,21030,21031,21034,21036,21039,21041,21042,21044,21045,21052,21054,21060,21061,21062,21063,21064,21065,21067,21070,21071,21074,21075,21077,21079,21080,21081,21082,21083,21085,21087,21088,21090,21091,21092,21094,21096,21099,21100,21101,21102,21104,21105,21107,21108,21109,21110,21111,21112,21113,21114,21115,21116,21118,21120,21123,21124,21125,21126,21127,21129,21130,21131,21132,21133,21134,21135,21137,21138,21140,21141,21142,21143,21144,21145,21146,21148,21156,21157,21158,21159,21166,21167,21168,21172,21173,21174,21175,21176,21177,21178,21179,21180,21181,21184,21185,21186,21188,21189,21190,21192,21194,21196,21197,21198,21199,21201,21203,21204,21205,21207,21209,21210,21211,21212,21213,21214,21216,21217,21218,21219,21221,21222,21223,21224,21225,21226,21227,21228,21229,21230,21231,21233,21234,21235,21236,21237,21238,21239,21240,21243,21244,21245,21249,21250,21251,21252,21255,21257,21258,21259,21260,21262,21265,21266,21267,21268,21272,21275,21276,21278,21279,21282,21284,21285,21287,21288,21289,21291,21292,21293,21295,21296,21297,21298,21299,21300,21301,21302,21303,21304,21308,21309,21312,21314,21316,21318,21323,21324,21325,21328,21332,21336,21337,21339,21341,21349,21352,21354,21356,21357,21362,21366,21369,21371,21372,21373,21374,21376,21377,21379,21383,21384,21386,21390,21391,21392,21393,21394,21395,21396,21398,21399,21401,21403,21404,21406,21408,21409,21412,21415,21418,21419,21420,21421,21423,21424,21425,21426,21427,21428,21429,21431,21432,21433,21434,21436,21437,21438,21440,21443,21444,21445,21446,21447,21454,21455,21456,21458,21459,21461,21466,21468,21469,21470,21473,21474,21479,21492,21498,21502,21503,21504,21506,21509,21511,21515,21524,21528,21529,21530,21532,21538,21540,21541,21546,21552,21555,21558,21559,21562,21565,21567,21569,21570,21572,21573,21575,21577,21580,21581,21582,21583,21585,21594,21597,21598,21599,21600,21601,21603,21605,21607,21609,21610,21611,21612,21613,21614,21615,21616,21620,21625,21626,21630,21631,21633,21635,21637,21639,21640,21641,21642,21645,21649,21651,21655,21656,21660,21662,21663,21664,21665,21666,21669,21678,21680,21682,21685,21686,21687,21689,21690,21692,21694,21699,21701,21706,21707,21718,21720,21723,21728,21729,21730,21731,21732,21739,21740,21743,21744,21745,21748,21749,21750,21751,21752,21753,21755,21758,21760,21762,21763,21764,21765,21768,21770,21771,21772,21773,21774,21778,21779,21781,21782,21783,21784,21785,21786,21788,21789,21790,21791,21793,21797,21798,21800,21801,21803,21805,21810,21812,21813,21814,21816,21817,21818,21819,21821,21824,21826,21829,21831,21832,21835,21836,21837,21838,21839,21841,21842,21843,21844,21847,21848,21849,21850,21851,21853,21854,21855,21856,21858,21859,21864,21865,21867,21871,21872,21873,21874,21875,21876,21881,21882,21885,21887,21893,21894,21900,21901,21902,21904,21906,21907,21909,21910,21911,21914,21915,21918,21920,21921,21922,21923,21924,21925,21926,21928,21929,21930,21931,21932,21933,21934,21935,21936,21938,21940,21942,21944,21946,21948,21951,21952,21953,21954,21955,21958,21959,21960,21962,21963,21966,21967,21968,21973,21975,21976,21977,21978,21979,21982,21984,21986,21991,21993,21997,21998,22e3,22001,22004,22006,22008,22009,22010,22011,22012,22015,22018,22019,22020,22021,22022,22023,22026,22027,22029,22032,22033,22034,22035,22036,22037,22038,22039,22041,22042,22044,22045,22048,22049,22050,22053,22054,22056,22057,22058,22059,22062,22063,22064,22067,22069,22071,22072,22074,22076,22077,22078,22080,22081,22082,22083,22084,22085,22086,22087,22088,22089,22090,22091,22095,22096,22097,22098,22099,22101,22102,22106,22107,22109,22110,22111,22112,22113,22115,22117,22118,22119,22125,22126,22127,22128,22130,22131,22132,22133,22135,22136,22137,22138,22141,22142,22143,22144,22145,22146,22147,22148,22151,22152,22153,22154,22155,22156,22157,22160,22161,22162,22164,22165,22166,22167,22168,22169,22170,22171,22172,22173,22174,22175,22176,22177,22178,22180,22181,22182,22183,22184,22185,22186,22187,22188,22189,22190,22192,22193,22194,22195,22196,22197,22198,22200,22201,22202,22203,22205,22206,22207,22208,22209,22210,22211,22212,22213,22214,22215,22216,22217,22219,22220,22221,22222,22223,22224,22225,22226,22227,22229,22230,22232,22233,22236,22243,22245,22246,22247,22248,22249,22250,22252,22254,22255,22258,22259,22262,22263,22264,22267,22268,22272,22273,22274,22277,22279,22283,22284,22285,22286,22287,22288,22289,22290,22291,22292,22293,22294,22295,22296,22297,22298,22299,22301,22302,22304,22305,22306,22308,22309,22310,22311,22315,22321,22322,22324,22325,22326,22327,22328,22332,22333,22335,22337,22339,22340,22341,22342,22344,22345,22347,22354,22355,22356,22357,22358,22360,22361,22370,22371,22373,22375,22380,22382,22384,22385,22386,22388,22389,22392,22393,22394,22397,22398,22399,22400,22401,22407,22408,22409,22410,22413,22414,22415,22416,22417,22420,22421,22422,22423,22424,22425,22426,22428,22429,22430,22431,22437,22440,22442,22444,22447,22448,22449,22451,22453,22454,22455,22457,22458,22459,22460,22461,22462,22463,22464,22465,22468,22469,22470,22471,22472,22473,22474,22476,22477,22480,22481,22483,22486,22487,22491,22492,22494,22497,22498,22499,22501,22502,22503,22504,22505,22506,22507,22508,22510,22512,22513,22514,22515,22517,22518,22519,22523,22524,22526,22527,22529,22531,22532,22533,22536,22537,22538,22540,22542,22543,22544,22546,22547,22548,22550,22551,22552,22554,22555,22556,22557,22559,22562,22563,22565,22566,22567,22568,22569,22571,22572,22573,22574,22575,22577,22578,22579,22580,22582,22583,22584,22585,22586,22587,22588,22589,22590,22591,22592,22593,22594,22595,22597,22598,22599,22600,22601,22602,22603,22606,22607,22608,22610,22611,22613,22614,22615,22617,22618,22619,22620,22621,22623,22624,22625,22626,22627,22628,22630,22631,22632,22633,22634,22637,22638,22639,22640,22641,22642,22643,22644,22645,22646,22647,22648,22649,22650,22651,22652,22653,22655,22658,22660,22662,22663,22664,22666,22667,22668,22669,22670,22671,22672,22673,22676,22677,22678,22679,22680,22683,22684,22685,22688,22689,22690,22691,22692,22693,22694,22695,22698,22699,22700,22701,22702,22703,22704,22705,22706,22707,22708,22709,22710,22711,22712,22713,22714,22715,22717,22718,22719,22720,22722,22723,22724,22726,22727,22728,22729,22730,22731,22732,22733,22734,22735,22736,22738,22739,22740,22742,22743,22744,22745,22746,22747,22748,22749,22750,22751,22752,22753,22754,22755,22757,22758,22759,22760,22761,22762,22765,22767,22769,22770,22772,22773,22775,22776,22778,22779,22780,22781,22782,22783,22784,22785,22787,22789,22790,22792,22793,22794,22795,22796,22798,22800,22801,22802,22803,22807,22808,22811,22813,22814,22816,22817,22818,22819,22822,22824,22828,22832,22834,22835,22837,22838,22843,22845,22846,22847,22848,22851,22853,22854,22858,22860,22861,22864,22866,22867,22873,22875,22876,22877,22878,22879,22881,22883,22884,22886,22887,22888,22889,22890,22891,22892,22893,22894,22895,22896,22897,22898,22901,22903,22906,22907,22908,22910,22911,22912,22917,22921,22923,22924,22926,22927,22928,22929,22932,22933,22936,22938,22939,22940,22941,22943,22944,22945,22946,22950,22951,22956,22957,22960,22961,22963,22964,22965,22966,22967,22968,22970,22972,22973,22975,22976,22977,22978,22979,22980,22981,22983,22984,22985,22988,22989,22990,22991,22997,22998,23001,23003,23006,23007,23008,23009,23010,23012,23014,23015,23017,23018,23019,23021,23022,23023,23024,23025,23026,23027,23028,23029,23030,23031,23032,23034,23036,23037,23038,23040,23042,23050,23051,23053,23054,23055,23056,23058,23060,23061,23062,23063,23065,23066,23067,23069,23070,23073,23074,23076,23078,23079,23080,23082,23083,23084,23085,23086,23087,23088,23091,23093,23095,23096,23097,23098,23099,23101,23102,23103,23105,23106,23107,23108,23109,23111,23112,23115,23116,23117,23118,23119,23120,23121,23122,23123,23124,23126,23127,23128,23129,23131,23132,23133,23134,23135,23136,23137,23139,23140,23141,23142,23144,23145,23147,23148,23149,23150,23151,23152,23153,23154,23155,23160,23161,23163,23164,23165,23166,23168,23169,23170,23171,23172,23173,23174,23175,23176,23177,23178,23179,23180,23181,23182,23183,23184,23185,23187,23188,23189,23190,23191,23192,23193,23196,23197,23198,23199,23200,23201,23202,23203,23204,23205,23206,23207,23208,23209,23211,23212,23213,23214,23215,23216,23217,23220,23222,23223,23225,23226,23227,23228,23229,23231,23232,23235,23236,23237,23238,23239,23240,23242,23243,23245,23246,23247,23248,23249,23251,23253,23255,23257,23258,23259,23261,23262,23263,23266,23268,23269,23271,23272,23274,23276,23277,23278,23279,23280,23282,23283,23284,23285,23286,23287,23288,23289,23290,23291,23292,23293,23294,23295,23296,23297,23298,23299,23300,23301,23302,23303,23304,23306,23307,23308,23309,23310,23311,23312,23313,23314,23315,23316,23317,23320,23321,23322,23323,23324,23325,23326,23327,23328,23329,23330,23331,23332,23333,23334,23335,23336,23337,23338,23339,23340,23341,23342,23343,23344,23345,23347,23349,23350,23352,23353,23354,23355,23356,23357,23358,23359,23361,23362,23363,23364,23365,23366,23367,23368,23369,23370,23371,23372,23373,23374,23375,23378,23382,23390,23392,23393,23399,23400,23403,23405,23406,23407,23410,23412,23414,23415,23416,23417,23419,23420,23422,23423,23426,23430,23434,23437,23438,23440,23441,23442,23444,23446,23455,23463,23464,23465,23468,23469,23470,23471,23473,23474,23479,23482,23483,23484,23488,23489,23491,23496,23497,23498,23499,23501,23502,23503,23505,23508,23509,23510,23511,23512,23513,23514,23515,23516,23520,23522,23523,23526,23527,23529,23530,23531,23532,23533,23535,23537,23538,23539,23540,23541,23542,23543,23549,23550,23552,23554,23555,23557,23559,23560,23563,23564,23565,23566,23568,23570,23571,23575,23577,23579,23582,23583,23584,23585,23587,23590,23592,23593,23594,23595,23597,23598,23599,23600,23602,23603,23605,23606,23607,23619,23620,23622,23623,23628,23629,23634,23635,23636,23638,23639,23640,23642,23643,23644,23645,23647,23650,23652,23655,23656,23657,23658,23659,23660,23661,23664,23666,23667,23668,23669,23670,23671,23672,23675,23676,23677,23678,23680,23683,23684,23685,23686,23687,23689,23690,23691,23694,23695,23698,23699,23701,23709,23710,23711,23712,23713,23716,23717,23718,23719,23720,23722,23726,23727,23728,23730,23732,23734,23737,23738,23739,23740,23742,23744,23746,23747,23749,23750,23751,23752,23753,23754,23756,23757,23758,23759,23760,23761,23763,23764,23765,23766,23767,23768,23770,23771,23772,23773,23774,23775,23776,23778,23779,23783,23785,23787,23788,23790,23791,23793,23794,23795,23796,23797,23798,23799,23800,23801,23802,23804,23805,23806,23807,23808,23809,23812,23813,23816,23817,23818,23819,23820,23821,23823,23824,23825,23826,23827,23829,23831,23832,23833,23834,23836,23837,23839,23840,23841,23842,23843,23845,23848,23850,23851,23852,23855,23856,23857,23858,23859,23861,23862,23863,23864,23865,23866,23867,23868,23871,23872,23873,23874,23875,23876,23877,23878,23880,23881,23885,23886,23887,23888,23889,23890,23891,23892,23893,23894,23895,23897,23898,23900,23902,23903,23904,23905,23906,23907,23908,23909,23910,23911,23912,23914,23917,23918,23920,23921,23922,23923,23925,23926,23927,23928,23929,23930,23931,23932,23933,23934,23935,23936,23937,23939,23940,23941,23942,23943,23944,23945,23946,23947,23948,23949,23950,23951,23952,23953,23954,23955,23956,23957,23958,23959,23960,23962,23963,23964,23966,23967,23968,23969,23970,23971,23972,23973,23974,23975,23976,23977,23978,23979,23980,23981,23982,23983,23984,23985,23986,23987,23988,23989,23990,23992,23993,23994,23995,23996,23997,23998,23999,24e3,24001,24002,24003,24004,24006,24007,24008,24009,24010,24011,24012,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24028,24031,24032,24035,24036,24042,24044,24045,24048,24053,24054,24056,24057,24058,24059,24060,24063,24064,24068,24071,24073,24074,24075,24077,24078,24082,24083,24087,24094,24095,24096,24097,24098,24099,24100,24101,24104,24105,24106,24107,24108,24111,24112,24114,24115,24116,24117,24118,24121,24122,24126,24127,24128,24129,24131,24134,24135,24136,24137,24138,24139,24141,24142,24143,24144,24145,24146,24147,24150,24151,24152,24153,24154,24156,24157,24159,24160,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24181,24183,24185,24190,24193,24194,24195,24197,24200,24201,24204,24205,24206,24210,24216,24219,24221,24225,24226,24227,24228,24232,24233,24234,24235,24236,24238,24239,24240,24241,24242,24244,24250,24251,24252,24253,24255,24256,24257,24258,24259,24260,24261,24262,24263,24264,24267,24268,24269,24270,24271,24272,24276,24277,24279,24280,24281,24282,24284,24285,24286,24287,24288,24289,24290,24291,24292,24293,24294,24295,24297,24299,24300,24301,24302,24303,24304,24305,24306,24307,24309,24312,24313,24315,24316,24317,24325,24326,24327,24329,24332,24333,24334,24336,24338,24340,24342,24345,24346,24348,24349,24350,24353,24354,24355,24356,24360,24363,24364,24366,24368,24370,24371,24372,24373,24374,24375,24376,24379,24381,24382,24383,24385,24386,24387,24388,24389,24390,24391,24392,24393,24394,24395,24396,24397,24398,24399,24401,24404,24409,24410,24411,24412,24414,24415,24416,24419,24421,24423,24424,24427,24430,24431,24434,24436,24437,24438,24440,24442,24445,24446,24447,24451,24454,24461,24462,24463,24465,24467,24468,24470,24474,24475,24477,24478,24479,24480,24482,24483,24484,24485,24486,24487,24489,24491,24492,24495,24496,24497,24498,24499,24500,24502,24504,24505,24506,24507,24510,24511,24512,24513,24514,24519,24520,24522,24523,24526,24531,24532,24533,24538,24539,24540,24542,24543,24546,24547,24549,24550,24552,24553,24556,24559,24560,24562,24563,24564,24566,24567,24569,24570,24572,24583,24584,24585,24587,24588,24592,24593,24595,24599,24600,24602,24606,24607,24610,24611,24612,24620,24621,24622,24624,24625,24626,24627,24628,24630,24631,24632,24633,24634,24637,24638,24640,24644,24645,24646,24647,24648,24649,24650,24652,24654,24655,24657,24659,24660,24662,24663,24664,24667,24668,24670,24671,24672,24673,24677,24678,24686,24689,24690,24692,24693,24695,24702,24704,24705,24706,24709,24710,24711,24712,24714,24715,24718,24719,24720,24721,24723,24725,24727,24728,24729,24732,24734,24737,24738,24740,24741,24743,24745,24746,24750,24752,24755,24757,24758,24759,24761,24762,24765,24766,24767,24768,24769,24770,24771,24772,24775,24776,24777,24780,24781,24782,24783,24784,24786,24787,24788,24790,24791,24793,24795,24798,24801,24802,24803,24804,24805,24810,24817,24818,24821,24823,24824,24827,24828,24829,24830,24831,24834,24835,24836,24837,24839,24842,24843,24844,24848,24849,24850,24851,24852,24854,24855,24856,24857,24859,24860,24861,24862,24865,24866,24869,24872,24873,24874,24876,24877,24878,24879,24880,24881,24882,24883,24884,24885,24886,24887,24888,24889,24890,24891,24892,24893,24894,24896,24897,24898,24899,24900,24901,24902,24903,24905,24907,24909,24911,24912,24914,24915,24916,24918,24919,24920,24921,24922,24923,24924,24926,24927,24928,24929,24931,24932,24933,24934,24937,24938,24939,24940,24941,24942,24943,24945,24946,24947,24948,24950,24952,24953,24954,24955,24956,24957,24958,24959,24960,24961,24962,24963,24964,24965,24966,24967,24968,24969,24970,24972,24973,24975,24976,24977,24978,24979,24981,24982,24983,24984,24985,24986,24987,24988,24990,24991,24992,24993,24994,24995,24996,24997,24998,25002,25003,25005,25006,25007,25008,25009,25010,25011,25012,25013,25014,25016,25017,25018,25019,25020,25021,25023,25024,25025,25027,25028,25029,25030,25031,25033,25036,25037,25038,25039,25040,25043,25045,25046,25047,25048,25049,25050,25051,25052,25053,25054,25055,25056,25057,25058,25059,25060,25061,25063,25064,25065,25066,25067,25068,25069,25070,25071,25072,25073,25074,25075,25076,25078,25079,25080,25081,25082,25083,25084,25085,25086,25088,25089,25090,25091,25092,25093,25095,25097,25107,25108,25113,25116,25117,25118,25120,25123,25126,25127,25128,25129,25131,25133,25135,25136,25137,25138,25141,25142,25144,25145,25146,25147,25148,25154,25156,25157,25158,25162,25167,25168,25173,25174,25175,25177,25178,25180,25181,25182,25183,25184,25185,25186,25188,25189,25192,25201,25202,25204,25205,25207,25208,25210,25211,25213,25217,25218,25219,25221,25222,25223,25224,25227,25228,25229,25230,25231,25232,25236,25241,25244,25245,25246,25251,25254,25255,25257,25258,25261,25262,25263,25264,25266,25267,25268,25270,25271,25272,25274,25278,25280,25281,25283,25291,25295,25297,25301,25309,25310,25312,25313,25316,25322,25323,25328,25330,25333,25336,25337,25338,25339,25344,25347,25348,25349,25350,25354,25355,25356,25357,25359,25360,25362,25363,25364,25365,25367,25368,25369,25372,25382,25383,25385,25388,25389,25390,25392,25393,25395,25396,25397,25398,25399,25400,25403,25404,25406,25407,25408,25409,25412,25415,25416,25418,25425,25426,25427,25428,25430,25431,25432,25433,25434,25435,25436,25437,25440,25444,25445,25446,25448,25450,25451,25452,25455,25456,25458,25459,25460,25461,25464,25465,25468,25469,25470,25471,25473,25475,25476,25477,25478,25483,25485,25489,25491,25492,25493,25495,25497,25498,25499,25500,25501,25502,25503,25505,25508,25510,25515,25519,25521,25522,25525,25526,25529,25531,25533,25535,25536,25537,25538,25539,25541,25543,25544,25546,25547,25548,25553,25555,25556,25557,25559,25560,25561,25562,25563,25564,25565,25567,25570,25572,25573,25574,25575,25576,25579,25580,25582,25583,25584,25585,25587,25589,25591,25593,25594,25595,25596,25598,25603,25604,25606,25607,25608,25609,25610,25613,25614,25617,25618,25621,25622,25623,25624,25625,25626,25629,25631,25634,25635,25636,25637,25639,25640,25641,25643,25646,25647,25648,25649,25650,25651,25653,25654,25655,25656,25657,25659,25660,25662,25664,25666,25667,25673,25675,25676,25677,25678,25679,25680,25681,25683,25685,25686,25687,25689,25690,25691,25692,25693,25695,25696,25697,25698,25699,25700,25701,25702,25704,25706,25707,25708,25710,25711,25712,25713,25714,25715,25716,25717,25718,25719,25723,25724,25725,25726,25727,25728,25729,25731,25734,25736,25737,25738,25739,25740,25741,25742,25743,25744,25747,25748,25751,25752,25754,25755,25756,25757,25759,25760,25761,25762,25763,25765,25766,25767,25768,25770,25771,25775,25777,25778,25779,25780,25782,25785,25787,25789,25790,25791,25793,25795,25796,25798,25799,25800,25801,25802,25803,25804,25807,25809,25811,25812,25813,25814,25817,25818,25819,25820,25821,25823,25824,25825,25827,25829,25831,25832,25833,25834,25835,25836,25837,25838,25839,25840,25841,25842,25843,25844,25845,25846,25847,25848,25849,25850,25851,25852,25853,25854,25855,25857,25858,25859,25860,25861,25862,25863,25864,25866,25867,25868,25869,25870,25871,25872,25873,25875,25876,25877,25878,25879,25881,25882,25883,25884,25885,25886,25887,25888,25889,25890,25891,25892,25894,25895,25896,25897,25898,25900,25901,25904,25905,25906,25907,25911,25914,25916,25917,25920,25921,25922,25923,25924,25926,25927,25930,25931,25933,25934,25936,25938,25939,25940,25943,25944,25946,25948,25951,25952,25953,25956,25957,25959,25960,25961,25962,25965,25966,25967,25969,25971,25973,25974,25976,25977,25978,25979,25980,25981,25982,25983,25984,25985,25986,25987,25988,25989,25990,25992,25993,25994,25997,25998,25999,26002,26004,26005,26006,26008,26010,26013,26014,26016,26018,26019,26022,26024,26026,26028,26030,26033,26034,26035,26036,26037,26038,26039,26040,26042,26043,26046,26047,26048,26050,26055,26056,26057,26058,26061,26064,26065,26067,26068,26069,26072,26073,26074,26075,26076,26077,26078,26079,26081,26083,26084,26090,26091,26098,26099,26100,26101,26104,26105,26107,26108,26109,26110,26111,26113,26116,26117,26119,26120,26121,26123,26125,26128,26129,26130,26134,26135,26136,26138,26139,26140,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26162,26163,26167,26168,26169,26170,26171,26173,26175,26176,26178,26180,26181,26182,26183,26184,26185,26186,26189,26190,26192,26193,26200,26201,26203,26204,26205,26206,26208,26210,26211,26213,26215,26217,26218,26219,26220,26221,26225,26226,26227,26229,26232,26233,26235,26236,26237,26239,26240,26241,26243,26245,26246,26248,26249,26250,26251,26253,26254,26255,26256,26258,26259,26260,26261,26264,26265,26266,26267,26268,26270,26271,26272,26273,26274,26275,26276,26277,26278,26281,26282,26283,26284,26285,26287,26288,26289,26290,26291,26293,26294,26295,26296,26298,26299,26300,26301,26303,26304,26305,26306,26307,26308,26309,26310,26311,26312,26313,26314,26315,26316,26317,26318,26319,26320,26321,26322,26323,26324,26325,26326,26327,26328,26330,26334,26335,26336,26337,26338,26339,26340,26341,26343,26344,26346,26347,26348,26349,26350,26351,26353,26357,26358,26360,26362,26363,26365,26369,26370,26371,26372,26373,26374,26375,26380,26382,26383,26385,26386,26387,26390,26392,26393,26394,26396,26398,26400,26401,26402,26403,26404,26405,26407,26409,26414,26416,26418,26419,26422,26423,26424,26425,26427,26428,26430,26431,26433,26436,26437,26439,26442,26443,26445,26450,26452,26453,26455,26456,26457,26458,26459,26461,26466,26467,26468,26470,26471,26475,26476,26478,26481,26484,26486,26488,26489,26490,26491,26493,26496,26498,26499,26501,26502,26504,26506,26508,26509,26510,26511,26513,26514,26515,26516,26518,26521,26523,26527,26528,26529,26532,26534,26537,26540,26542,26545,26546,26548,26553,26554,26555,26556,26557,26558,26559,26560,26562,26565,26566,26567,26568,26569,26570,26571,26572,26573,26574,26581,26582,26583,26587,26591,26593,26595,26596,26598,26599,26600,26602,26603,26605,26606,26610,26613,26614,26615,26616,26617,26618,26619,26620,26622,26625,26626,26627,26628,26630,26637,26640,26642,26644,26645,26648,26649,26650,26651,26652,26654,26655,26656,26658,26659,26660,26661,26662,26663,26664,26667,26668,26669,26670,26671,26672,26673,26676,26677,26678,26682,26683,26687,26695,26699,26701,26703,26706,26710,26711,26712,26713,26714,26715,26716,26717,26718,26719,26730,26732,26733,26734,26735,26736,26737,26738,26739,26741,26744,26745,26746,26747,26748,26749,26750,26751,26752,26754,26756,26759,26760,26761,26762,26763,26764,26765,26766,26768,26769,26770,26772,26773,26774,26776,26777,26778,26779,26780,26781,26782,26783,26784,26785,26787,26788,26789,26793,26794,26795,26796,26798,26801,26802,26804,26806,26807,26808,26809,26810,26811,26812,26813,26814,26815,26817,26819,26820,26821,26822,26823,26824,26826,26828,26830,26831,26832,26833,26835,26836,26838,26839,26841,26843,26844,26845,26846,26847,26849,26850,26852,26853,26854,26855,26856,26857,26858,26859,26860,26861,26863,26866,26867,26868,26870,26871,26872,26875,26877,26878,26879,26880,26882,26883,26884,26886,26887,26888,26889,26890,26892,26895,26897,26899,26900,26901,26902,26903,26904,26905,26906,26907,26908,26909,26910,26913,26914,26915,26917,26918,26919,26920,26921,26922,26923,26924,26926,26927,26929,26930,26931,26933,26934,26935,26936,26938,26939,26940,26942,26944,26945,26947,26948,26949,26950,26951,26952,26953,26954,26955,26956,26957,26958,26959,26960,26961,26962,26963,26965,26966,26968,26969,26971,26972,26975,26977,26978,26980,26981,26983,26984,26985,26986,26988,26989,26991,26992,26994,26995,26996,26997,26998,27002,27003,27005,27006,27007,27009,27011,27013,27018,27019,27020,27022,27023,27024,27025,27026,27027,27030,27031,27033,27034,27037,27038,27039,27040,27041,27042,27043,27044,27045,27046,27049,27050,27052,27054,27055,27056,27058,27059,27061,27062,27064,27065,27066,27068,27069,27070,27071,27072,27074,27075,27076,27077,27078,27079,27080,27081,27083,27085,27087,27089,27090,27091,27093,27094,27095,27096,27097,27098,27100,27101,27102,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27118,27119,27120,27121,27123,27124,27125,27126,27127,27128,27129,27130,27131,27132,27134,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27161,27162,27163,27164,27165,27166,27168,27170,27171,27172,27173,27174,27175,27177,27179,27180,27181,27182,27184,27186,27187,27188,27190,27191,27192,27193,27194,27195,27196,27199,27200,27201,27202,27203,27205,27206,27208,27209,27210,27211,27212,27213,27214,27215,27217,27218,27219,27220,27221,27222,27223,27226,27228,27229,27230,27231,27232,27234,27235,27236,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27250,27251,27252,27253,27254,27255,27256,27258,27259,27261,27262,27263,27265,27266,27267,27269,27270,27271,27272,27273,27274,27275,27276,27277,27279,27282,27283,27284,27285,27286,27288,27289,27290,27291,27292,27293,27294,27295,27297,27298,27299,27300,27301,27302,27303,27304,27306,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27332,27333,27334,27335,27336,27337,27338,27339,27340,27341,27342,27343,27344,27345,27346,27347,27348,27349,27350,27351,27352,27353,27354,27355,27356,27357,27358,27359,27360,27361,27362,27363,27364,27365,27366,27367,27368,27369,27370,27371,27372,27373,27374,27375,27376,27377,27378,27379,27380,27381,27382,27383,27384,27385,27386,27387,27388,27389,27390,27391,27392,27393,27394,27395,27396,27397,27398,27399,27400,27401,27402,27403,27404,27405,27406,27407,27408,27409,27410,27411,27412,27413,27414,27415,27416,27417,27418,27419,27420,27421,27422,27423,27429,27430,27432,27433,27434,27435,27436,27437,27438,27439,27440,27441,27443,27444,27445,27446,27448,27451,27452,27453,27455,27456,27457,27458,27460,27461,27464,27466,27467,27469,27470,27471,27472,27473,27474,27475,27476,27477,27478,27479,27480,27482,27483,27484,27485,27486,27487,27488,27489,27496,27497,27499,27500,27501,27502,27503,27504,27505,27506,27507,27508,27509,27510,27511,27512,27514,27517,27518,27519,27520,27525,27528,27532,27534,27535,27536,27537,27540,27541,27543,27544,27545,27548,27549,27550,27551,27552,27554,27555,27556,27557,27558,27559,27560,27561,27563,27564,27565,27566,27567,27568,27569,27570,27574,27576,27577,27578,27579,27580,27581,27582,27584,27587,27588,27590,27591,27592,27593,27594,27596,27598,27600,27601,27608,27610,27612,27613,27614,27615,27616,27618,27619,27620,27621,27622,27623,27624,27625,27628,27629,27630,27632,27633,27634,27636,27638,27639,27640,27642,27643,27644,27646,27647,27648,27649,27650,27651,27652,27656,27657,27658,27659,27660,27662,27666,27671,27676,27677,27678,27680,27683,27685,27691,27692,27693,27697,27699,27702,27703,27705,27706,27707,27708,27710,27711,27715,27716,27717,27720,27723,27724,27725,27726,27727,27729,27730,27731,27734,27736,27737,27738,27746,27747,27749,27750,27751,27755,27756,27757,27758,27759,27761,27763,27765,27767,27768,27770,27771,27772,27775,27776,27780,27783,27786,27787,27789,27790,27793,27794,27797,27798,27799,27800,27802,27804,27805,27806,27808,27810,27816,27820,27823,27824,27828,27829,27830,27831,27834,27840,27841,27842,27843,27846,27847,27848,27851,27853,27854,27855,27857,27858,27864,27865,27866,27868,27869,27871,27876,27878,27879,27881,27884,27885,27890,27892,27897,27903,27904,27906,27907,27909,27910,27912,27913,27914,27917,27919,27920,27921,27923,27924,27925,27926,27928,27932,27933,27935,27936,27937,27938,27939,27940,27942,27944,27945,27948,27949,27951,27952,27956,27958,27959,27960,27962,27967,27968,27970,27972,27977,27980,27984,27989,27990,27991,27992,27995,27997,27999,28001,28002,28004,28005,28007,28008,28011,28012,28013,28016,28017,28018,28019,28021,28022,28025,28026,28027,28029,28030,28031,28032,28033,28035,28036,28038,28039,28042,28043,28045,28047,28048,28050,28054,28055,28056,28057,28058,28060,28066,28069,28076,28077,28080,28081,28083,28084,28086,28087,28089,28090,28091,28092,28093,28094,28097,28098,28099,28104,28105,28106,28109,28110,28111,28112,28114,28115,28116,28117,28119,28122,28123,28124,28127,28130,28131,28133,28135,28136,28137,28138,28141,28143,28144,28146,28148,28149,28150,28152,28154,28157,28158,28159,28160,28161,28162,28163,28164,28166,28167,28168,28169,28171,28175,28178,28179,28181,28184,28185,28187,28188,28190,28191,28194,28198,28199,28200,28202,28204,28206,28208,28209,28211,28213,28214,28215,28217,28219,28220,28221,28222,28223,28224,28225,28226,28229,28230,28231,28232,28233,28234,28235,28236,28239,28240,28241,28242,28245,28247,28249,28250,28252,28253,28254,28256,28257,28258,28259,28260,28261,28262,28263,28264,28265,28266,28268,28269,28271,28272,28273,28274,28275,28276,28277,28278,28279,28280,28281,28282,28283,28284,28285,28288,28289,28290,28292,28295,28296,28298,28299,28300,28301,28302,28305,28306,28307,28308,28309,28310,28311,28313,28314,28315,28317,28318,28320,28321,28323,28324,28326,28328,28329,28331,28332,28333,28334,28336,28339,28341,28344,28345,28348,28350,28351,28352,28355,28356,28357,28358,28360,28361,28362,28364,28365,28366,28368,28370,28374,28376,28377,28379,28380,28381,28387,28391,28394,28395,28396,28397,28398,28399,28400,28401,28402,28403,28405,28406,28407,28408,28410,28411,28412,28413,28414,28415,28416,28417,28419,28420,28421,28423,28424,28426,28427,28428,28429,28430,28432,28433,28434,28438,28439,28440,28441,28442,28443,28444,28445,28446,28447,28449,28450,28451,28453,28454,28455,28456,28460,28462,28464,28466,28468,28469,28471,28472,28473,28474,28475,28476,28477,28479,28480,28481,28482,28483,28484,28485,28488,28489,28490,28492,28494,28495,28496,28497,28498,28499,28500,28501,28502,28503,28505,28506,28507,28509,28511,28512,28513,28515,28516,28517,28519,28520,28521,28522,28523,28524,28527,28528,28529,28531,28533,28534,28535,28537,28539,28541,28542,28543,28544,28545,28546,28547,28549,28550,28551,28554,28555,28559,28560,28561,28562,28563,28564,28565,28566,28567,28568,28569,28570,28571,28573,28574,28575,28576,28578,28579,28580,28581,28582,28584,28585,28586,28587,28588,28589,28590,28591,28592,28593,28594,28596,28597,28599,28600,28602,28603,28604,28605,28606,28607,28609,28611,28612,28613,28614,28615,28616,28618,28619,28620,28621,28622,28623,28624,28627,28628,28629,28630,28631,28632,28633,28634,28635,28636,28637,28639,28642,28643,28644,28645,28646,28647,28648,28649,28650,28651,28652,28653,28656,28657,28658,28659,28660,28661,28662,28663,28664,28665,28666,28667,28668,28669,28670,28671,28672,28673,28674,28675,28676,28677,28678,28679,28680,28681,28682,28683,28684,28685,28686,28687,28688,28690,28691,28692,28693,28694,28695,28696,28697,28700,28701,28702,28703,28704,28705,28706,28708,28709,28710,28711,28712,28713,28714,28715,28716,28717,28718,28719,28720,28721,28722,28723,28724,28726,28727,28728,28730,28731,28732,28733,28734,28735,28736,28737,28738,28739,28740,28741,28742,28743,28744,28745,28746,28747,28749,28750,28752,28753,28754,28755,28756,28757,28758,28759,28760,28761,28762,28763,28764,28765,28767,28768,28769,28770,28771,28772,28773,28774,28775,28776,28777,28778,28782,28785,28786,28787,28788,28791,28793,28794,28795,28797,28801,28802,28803,28804,28806,28807,28808,28811,28812,28813,28815,28816,28817,28819,28823,28824,28826,28827,28830,28831,28832,28833,28834,28835,28836,28837,28838,28839,28840,28841,28842,28848,28850,28852,28853,28854,28858,28862,28863,28868,28869,28870,28871,28873,28875,28876,28877,28878,28879,28880,28881,28882,28883,28884,28885,28886,28887,28890,28892,28893,28894,28896,28897,28898,28899,28901,28906,28910,28912,28913,28914,28915,28916,28917,28918,28920,28922,28923,28924,28926,28927,28928,28929,28930,28931,28932,28933,28934,28935,28936,28939,28940,28941,28942,28943,28945,28946,28948,28951,28955,28956,28957,28958,28959,28960,28961,28962,28963,28964,28965,28967,28968,28969,28970,28971,28972,28973,28974,28978,28979,28980,28981,28983,28984,28985,28986,28987,28988,28989,28990,28991,28992,28993,28994,28995,28996,28998,28999,29e3,29001,29003,29005,29007,29008,29009,29010,29011,29012,29013,29014,29015,29016,29017,29018,29019,29021,29023,29024,29025,29026,29027,29029,29033,29034,29035,29036,29037,29039,29040,29041,29044,29045,29046,29047,29049,29051,29052,29054,29055,29056,29057,29058,29059,29061,29062,29063,29064,29065,29067,29068,29069,29070,29072,29073,29074,29075,29077,29078,29079,29082,29083,29084,29085,29086,29089,29090,29091,29092,29093,29094,29095,29097,29098,29099,29101,29102,29103,29104,29105,29106,29108,29110,29111,29112,29114,29115,29116,29117,29118,29119,29120,29121,29122,29124,29125,29126,29127,29128,29129,29130,29131,29132,29133,29135,29136,29137,29138,29139,29142,29143,29144,29145,29146,29147,29148,29149,29150,29151,29153,29154,29155,29156,29158,29160,29161,29162,29163,29164,29165,29167,29168,29169,29170,29171,29172,29173,29174,29175,29176,29178,29179,29180,29181,29182,29183,29184,29185,29186,29187,29188,29189,29191,29192,29193,29194,29195,29196,29197,29198,29199,29200,29201,29202,29203,29204,29205,29206,29207,29208,29209,29210,29211,29212,29214,29215,29216,29217,29218,29219,29220,29221,29222,29223,29225,29227,29229,29230,29231,29234,29235,29236,29242,29244,29246,29248,29249,29250,29251,29252,29253,29254,29257,29258,29259,29262,29263,29264,29265,29267,29268,29269,29271,29272,29274,29276,29278,29280,29283,29284,29285,29288,29290,29291,29292,29293,29296,29297,29299,29300,29302,29303,29304,29307,29308,29309,29314,29315,29317,29318,29319,29320,29321,29324,29326,29328,29329,29331,29332,29333,29334,29335,29336,29337,29338,29339,29340,29341,29342,29344,29345,29346,29347,29348,29349,29350,29351,29352,29353,29354,29355,29358,29361,29362,29363,29365,29370,29371,29372,29373,29374,29375,29376,29381,29382,29383,29385,29386,29387,29388,29391,29393,29395,29396,29397,29398,29400,29402,29403,58566,58567,58568,58569,58570,58571,58572,58573,58574,58575,58576,58577,58578,58579,58580,58581,58582,58583,58584,58585,58586,58587,58588,58589,58590,58591,58592,58593,58594,58595,58596,58597,58598,58599,58600,58601,58602,58603,58604,58605,58606,58607,58608,58609,58610,58611,58612,58613,58614,58615,58616,58617,58618,58619,58620,58621,58622,58623,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58640,58641,58642,58643,58644,58645,58646,58647,58648,58649,58650,58651,58652,58653,58654,58655,58656,58657,58658,58659,58660,58661,12288,12289,12290,183,713,711,168,12291,12293,8212,65374,8214,8230,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12310,12311,12304,12305,177,215,247,8758,8743,8744,8721,8719,8746,8745,8712,8759,8730,8869,8741,8736,8978,8857,8747,8750,8801,8780,8776,8765,8733,8800,8814,8815,8804,8805,8734,8757,8756,9794,9792,176,8242,8243,8451,65284,164,65504,65505,8240,167,8470,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,8251,8594,8592,8593,8595,12307,58662,58663,58664,58665,58666,58667,58668,58669,58670,58671,58672,58673,58674,58675,58676,58677,58678,58679,58680,58681,58682,58683,58684,58685,58686,58687,58688,58689,58690,58691,58692,58693,58694,58695,58696,58697,58698,58699,58700,58701,58702,58703,58704,58705,58706,58707,58708,58709,58710,58711,58712,58713,58714,58715,58716,58717,58718,58719,58720,58721,58722,58723,58724,58725,58726,58727,58728,58729,58730,58731,58732,58733,58734,58735,58736,58737,58738,58739,58740,58741,58742,58743,58744,58745,58746,58747,58748,58749,58750,58751,58752,58753,58754,58755,58756,58757,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,59238,59239,59240,59241,59242,59243,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,8364,59245,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,59246,59247,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,59248,59249,58758,58759,58760,58761,58762,58763,58764,58765,58766,58767,58768,58769,58770,58771,58772,58773,58774,58775,58776,58777,58778,58779,58780,58781,58782,58783,58784,58785,58786,58787,58788,58789,58790,58791,58792,58793,58794,58795,58796,58797,58798,58799,58800,58801,58802,58803,58804,58805,58806,58807,58808,58809,58810,58811,58812,58813,58814,58815,58816,58817,58818,58819,58820,58821,58822,58823,58824,58825,58826,58827,58828,58829,58830,58831,58832,58833,58834,58835,58836,58837,58838,58839,58840,58841,58842,58843,58844,58845,58846,58847,58848,58849,58850,58851,58852,12288,65281,65282,65283,65509,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65340,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,58854,58855,58856,58857,58858,58859,58860,58861,58862,58863,58864,58865,58866,58867,58868,58869,58870,58871,58872,58873,58874,58875,58876,58877,58878,58879,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58926,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58937,58938,58939,58940,58941,58942,58943,58944,58945,58946,58947,58948,58949,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,59250,59251,59252,59253,59254,59255,59256,59257,59258,59259,59260,58950,58951,58952,58953,58954,58955,58956,58957,58958,58959,58960,58961,58962,58963,58964,58965,58966,58967,58968,58969,58970,58971,58972,58973,58974,58975,58976,58977,58978,58979,58980,58981,58982,58983,58984,58985,58986,58987,58988,58989,58990,58991,58992,58993,58994,58995,58996,58997,58998,58999,59e3,59001,59002,59003,59004,59005,59006,59007,59008,59009,59010,59011,59012,59013,59014,59015,59016,59017,59018,59019,59020,59021,59022,59023,59024,59025,59026,59027,59028,59029,59030,59031,59032,59033,59034,59035,59036,59037,59038,59039,59040,59041,59042,59043,59044,59045,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,59261,59262,59263,59264,59265,59266,59267,59268,59046,59047,59048,59049,59050,59051,59052,59053,59054,59055,59056,59057,59058,59059,59060,59061,59062,59063,59064,59065,59066,59067,59068,59069,59070,59071,59072,59073,59074,59075,59076,59077,59078,59079,59080,59081,59082,59083,59084,59085,59086,59087,59088,59089,59090,59091,59092,59093,59094,59095,59096,59097,59098,59099,59100,59101,59102,59103,59104,59105,59106,59107,59108,59109,59110,59111,59112,59113,59114,59115,59116,59117,59118,59119,59120,59121,59122,59123,59124,59125,59126,59127,59128,59129,59130,59131,59132,59133,59134,59135,59136,59137,59138,59139,59140,59141,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,59269,59270,59271,59272,59273,59274,59275,59276,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,59277,59278,59279,59280,59281,59282,59283,65077,65078,65081,65082,65087,65088,65085,65086,65089,65090,65091,65092,59284,59285,65083,65084,65079,65080,65073,59286,65075,65076,59287,59288,59289,59290,59291,59292,59293,59294,59295,59142,59143,59144,59145,59146,59147,59148,59149,59150,59151,59152,59153,59154,59155,59156,59157,59158,59159,59160,59161,59162,59163,59164,59165,59166,59167,59168,59169,59170,59171,59172,59173,59174,59175,59176,59177,59178,59179,59180,59181,59182,59183,59184,59185,59186,59187,59188,59189,59190,59191,59192,59193,59194,59195,59196,59197,59198,59199,59200,59201,59202,59203,59204,59205,59206,59207,59208,59209,59210,59211,59212,59213,59214,59215,59216,59217,59218,59219,59220,59221,59222,59223,59224,59225,59226,59227,59228,59229,59230,59231,59232,59233,59234,59235,59236,59237,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,59296,59297,59298,59299,59300,59301,59302,59303,59304,59305,59306,59307,59308,59309,59310,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,59311,59312,59313,59314,59315,59316,59317,59318,59319,59320,59321,59322,59323,714,715,729,8211,8213,8229,8245,8453,8457,8598,8599,8600,8601,8725,8735,8739,8786,8806,8807,8895,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9619,9620,9621,9660,9661,9698,9699,9700,9701,9737,8853,12306,12317,12318,59324,59325,59326,59327,59328,59329,59330,59331,59332,59333,59334,257,225,462,224,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,234,593,7743,324,328,505,609,59337,59338,59339,59340,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,59341,59342,59343,59344,59345,59346,59347,59348,59349,59350,59351,59352,59353,59354,59355,59356,59357,59358,59359,59360,59361,12321,12322,12323,12324,12325,12326,12327,12328,12329,12963,13198,13199,13212,13213,13214,13217,13252,13262,13265,13266,13269,65072,65506,65508,59362,8481,12849,59363,8208,59364,59365,59366,12540,12443,12444,12541,12542,12294,12445,12446,65097,65098,65099,65100,65101,65102,65103,65104,65105,65106,65108,65109,65110,65111,65113,65114,65115,65116,65117,65118,65119,65120,65121,65122,65123,65124,65125,65126,65128,65129,65130,65131,12350,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12295,59380,59381,59382,59383,59384,59385,59386,59387,59388,59389,59390,59391,59392,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,59393,59394,59395,59396,59397,59398,59399,59400,59401,59402,59403,59404,59405,59406,59407,29404,29405,29407,29410,29411,29412,29413,29414,29415,29418,29419,29429,29430,29433,29437,29438,29439,29440,29442,29444,29445,29446,29447,29448,29449,29451,29452,29453,29455,29456,29457,29458,29460,29464,29465,29466,29471,29472,29475,29476,29478,29479,29480,29485,29487,29488,29490,29491,29493,29494,29498,29499,29500,29501,29504,29505,29506,29507,29508,29509,29510,29511,29512,29513,29514,29515,29516,29518,29519,29521,29523,29524,29525,29526,29528,29529,29530,29531,29532,29533,29534,29535,29537,29538,29539,29540,29541,29542,29543,29544,29545,29546,29547,29550,29552,29553,57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,29554,29555,29556,29557,29558,29559,29560,29561,29562,29563,29564,29565,29567,29568,29569,29570,29571,29573,29574,29576,29578,29580,29581,29583,29584,29586,29587,29588,29589,29591,29592,29593,29594,29596,29597,29598,29600,29601,29603,29604,29605,29606,29607,29608,29610,29612,29613,29617,29620,29621,29622,29624,29625,29628,29629,29630,29631,29633,29635,29636,29637,29638,29639,29643,29644,29646,29650,29651,29652,29653,29654,29655,29656,29658,29659,29660,29661,29663,29665,29666,29667,29668,29670,29672,29674,29675,29676,29678,29679,29680,29681,29683,29684,29685,29686,29687,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57501,57502,57503,57504,57505,57506,57507,57508,57509,57510,57511,57512,57513,57514,57515,57516,57517,57518,57519,57520,57521,57522,57523,57524,57525,57526,57527,57528,57529,57530,57531,29688,29689,29690,29691,29692,29693,29694,29695,29696,29697,29698,29700,29703,29704,29707,29708,29709,29710,29713,29714,29715,29716,29717,29718,29719,29720,29721,29724,29725,29726,29727,29728,29729,29731,29732,29735,29737,29739,29741,29743,29745,29746,29751,29752,29753,29754,29755,29757,29758,29759,29760,29762,29763,29764,29765,29766,29767,29768,29769,29770,29771,29772,29773,29774,29775,29776,29777,29778,29779,29780,29782,29784,29789,29792,29793,29794,29795,29796,29797,29798,29799,29800,29801,29802,29803,29804,29806,29807,29809,29810,29811,29812,29813,29816,29817,29818,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57563,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57584,57585,57586,57587,57588,57589,57590,57591,57592,57593,57594,57595,57596,57597,57598,57599,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,29819,29820,29821,29823,29826,29828,29829,29830,29832,29833,29834,29836,29837,29839,29841,29842,29843,29844,29845,29846,29847,29848,29849,29850,29851,29853,29855,29856,29857,29858,29859,29860,29861,29862,29866,29867,29868,29869,29870,29871,29872,29873,29874,29875,29876,29877,29878,29879,29880,29881,29883,29884,29885,29886,29887,29888,29889,29890,29891,29892,29893,29894,29895,29896,29897,29898,29899,29900,29901,29902,29903,29904,29905,29907,29908,29909,29910,29911,29912,29913,29914,29915,29917,29919,29921,29925,29927,29928,29929,29930,29931,29932,29933,29936,29937,29938,57626,57627,57628,57629,57630,57631,57632,57633,57634,57635,57636,57637,57638,57639,57640,57641,57642,57643,57644,57645,57646,57647,57648,57649,57650,57651,57652,57653,57654,57655,57656,57657,57658,57659,57660,57661,57662,57663,57664,57665,57666,57667,57668,57669,57670,57671,57672,57673,57674,57675,57676,57677,57678,57679,57680,57681,57682,57683,57684,57685,57686,57687,57688,57689,57690,57691,57692,57693,57694,57695,57696,57697,57698,57699,57700,57701,57702,57703,57704,57705,57706,57707,57708,57709,57710,57711,57712,57713,57714,57715,57716,57717,57718,57719,29939,29941,29944,29945,29946,29947,29948,29949,29950,29952,29953,29954,29955,29957,29958,29959,29960,29961,29962,29963,29964,29966,29968,29970,29972,29973,29974,29975,29979,29981,29982,29984,29985,29986,29987,29988,29990,29991,29994,29998,30004,30006,30009,30012,30013,30015,30017,30018,30019,30020,30022,30023,30025,30026,30029,30032,30033,30034,30035,30037,30038,30039,30040,30045,30046,30047,30048,30049,30050,30051,30052,30055,30056,30057,30059,30060,30061,30062,30063,30064,30065,30067,30069,30070,30071,30074,30075,30076,30077,30078,30080,30081,30082,30084,30085,30087,57720,57721,57722,57723,57724,57725,57726,57727,57728,57729,57730,57731,57732,57733,57734,57735,57736,57737,57738,57739,57740,57741,57742,57743,57744,57745,57746,57747,57748,57749,57750,57751,57752,57753,57754,57755,57756,57757,57758,57759,57760,57761,57762,57763,57764,57765,57766,57767,57768,57769,57770,57771,57772,57773,57774,57775,57776,57777,57778,57779,57780,57781,57782,57783,57784,57785,57786,57787,57788,57789,57790,57791,57792,57793,57794,57795,57796,57797,57798,57799,57800,57801,57802,57803,57804,57805,57806,57807,57808,57809,57810,57811,57812,57813,30088,30089,30090,30092,30093,30094,30096,30099,30101,30104,30107,30108,30110,30114,30118,30119,30120,30121,30122,30125,30134,30135,30138,30139,30143,30144,30145,30150,30155,30156,30158,30159,30160,30161,30163,30167,30169,30170,30172,30173,30175,30176,30177,30181,30185,30188,30189,30190,30191,30194,30195,30197,30198,30199,30200,30202,30203,30205,30206,30210,30212,30214,30215,30216,30217,30219,30221,30222,30223,30225,30226,30227,30228,30230,30234,30236,30237,30238,30241,30243,30247,30248,30252,30254,30255,30257,30258,30262,30263,30265,30266,30267,30269,30273,30274,30276,57814,57815,57816,57817,57818,57819,57820,57821,57822,57823,57824,57825,57826,57827,57828,57829,57830,57831,57832,57833,57834,57835,57836,57837,57838,57839,57840,57841,57842,57843,57844,57845,57846,57847,57848,57849,57850,57851,57852,57853,57854,57855,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57872,57873,57874,57875,57876,57877,57878,57879,57880,57881,57882,57883,57884,57885,57886,57887,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57904,57905,57906,57907,30277,30278,30279,30280,30281,30282,30283,30286,30287,30288,30289,30290,30291,30293,30295,30296,30297,30298,30299,30301,30303,30304,30305,30306,30308,30309,30310,30311,30312,30313,30314,30316,30317,30318,30320,30321,30322,30323,30324,30325,30326,30327,30329,30330,30332,30335,30336,30337,30339,30341,30345,30346,30348,30349,30351,30352,30354,30356,30357,30359,30360,30362,30363,30364,30365,30366,30367,30368,30369,30370,30371,30373,30374,30375,30376,30377,30378,30379,30380,30381,30383,30384,30387,30389,30390,30391,30392,30393,30394,30395,30396,30397,30398,30400,30401,30403,21834,38463,22467,25384,21710,21769,21696,30353,30284,34108,30702,33406,30861,29233,38552,38797,27688,23433,20474,25353,26263,23736,33018,26696,32942,26114,30414,20985,25942,29100,32753,34948,20658,22885,25034,28595,33453,25420,25170,21485,21543,31494,20843,30116,24052,25300,36299,38774,25226,32793,22365,38712,32610,29240,30333,26575,30334,25670,20336,36133,25308,31255,26001,29677,25644,25203,33324,39041,26495,29256,25198,25292,20276,29923,21322,21150,32458,37030,24110,26758,27036,33152,32465,26834,30917,34444,38225,20621,35876,33502,32990,21253,35090,21093,30404,30407,30409,30411,30412,30419,30421,30425,30426,30428,30429,30430,30432,30433,30434,30435,30436,30438,30439,30440,30441,30442,30443,30444,30445,30448,30451,30453,30454,30455,30458,30459,30461,30463,30464,30466,30467,30469,30470,30474,30476,30478,30479,30480,30481,30482,30483,30484,30485,30486,30487,30488,30491,30492,30493,30494,30497,30499,30500,30501,30503,30506,30507,30508,30510,30512,30513,30514,30515,30516,30521,30523,30525,30526,30527,30530,30532,30533,30534,30536,30537,30538,30539,30540,30541,30542,30543,30546,30547,30548,30549,30550,30551,30552,30553,30556,34180,38649,20445,22561,39281,23453,25265,25253,26292,35961,40077,29190,26479,30865,24754,21329,21271,36744,32972,36125,38049,20493,29384,22791,24811,28953,34987,22868,33519,26412,31528,23849,32503,29997,27893,36454,36856,36924,40763,27604,37145,31508,24444,30887,34006,34109,27605,27609,27606,24065,24199,30201,38381,25949,24330,24517,36767,22721,33218,36991,38491,38829,36793,32534,36140,25153,20415,21464,21342,36776,36777,36779,36941,26631,24426,33176,34920,40150,24971,21035,30250,24428,25996,28626,28392,23486,25672,20853,20912,26564,19993,31177,39292,28851,30557,30558,30559,30560,30564,30567,30569,30570,30573,30574,30575,30576,30577,30578,30579,30580,30581,30582,30583,30584,30586,30587,30588,30593,30594,30595,30598,30599,30600,30601,30602,30603,30607,30608,30611,30612,30613,30614,30615,30616,30617,30618,30619,30620,30621,30622,30625,30627,30628,30630,30632,30635,30637,30638,30639,30641,30642,30644,30646,30647,30648,30649,30650,30652,30654,30656,30657,30658,30659,30660,30661,30662,30663,30664,30665,30666,30667,30668,30670,30671,30672,30673,30674,30675,30676,30677,30678,30680,30681,30682,30685,30686,30687,30688,30689,30692,30149,24182,29627,33760,25773,25320,38069,27874,21338,21187,25615,38082,31636,20271,24091,33334,33046,33162,28196,27850,39539,25429,21340,21754,34917,22496,19981,24067,27493,31807,37096,24598,25830,29468,35009,26448,25165,36130,30572,36393,37319,24425,33756,34081,39184,21442,34453,27531,24813,24808,28799,33485,33329,20179,27815,34255,25805,31961,27133,26361,33609,21397,31574,20391,20876,27979,23618,36461,25554,21449,33580,33590,26597,30900,25661,23519,23700,24046,35815,25286,26612,35962,25600,25530,34633,39307,35863,32544,38130,20135,38416,39076,26124,29462,30694,30696,30698,30703,30704,30705,30706,30708,30709,30711,30713,30714,30715,30716,30723,30724,30725,30726,30727,30728,30730,30731,30734,30735,30736,30739,30741,30745,30747,30750,30752,30753,30754,30756,30760,30762,30763,30766,30767,30769,30770,30771,30773,30774,30781,30783,30785,30786,30787,30788,30790,30792,30793,30794,30795,30797,30799,30801,30803,30804,30808,30809,30810,30811,30812,30814,30815,30816,30817,30818,30819,30820,30821,30822,30823,30824,30825,30831,30832,30833,30834,30835,30836,30837,30838,30840,30841,30842,30843,30845,30846,30847,30848,30849,30850,30851,22330,23581,24120,38271,20607,32928,21378,25950,30021,21809,20513,36229,25220,38046,26397,22066,28526,24034,21557,28818,36710,25199,25764,25507,24443,28552,37108,33251,36784,23576,26216,24561,27785,38472,36225,34924,25745,31216,22478,27225,25104,21576,20056,31243,24809,28548,35802,25215,36894,39563,31204,21507,30196,25345,21273,27744,36831,24347,39536,32827,40831,20360,23610,36196,32709,26021,28861,20805,20914,34411,23815,23456,25277,37228,30068,36364,31264,24833,31609,20167,32504,30597,19985,33261,21021,20986,27249,21416,36487,38148,38607,28353,38500,26970,30852,30853,30854,30856,30858,30859,30863,30864,30866,30868,30869,30870,30873,30877,30878,30880,30882,30884,30886,30888,30889,30890,30891,30892,30893,30894,30895,30901,30902,30903,30904,30906,30907,30908,30909,30911,30912,30914,30915,30916,30918,30919,30920,30924,30925,30926,30927,30929,30930,30931,30934,30935,30936,30938,30939,30940,30941,30942,30943,30944,30945,30946,30947,30948,30949,30950,30951,30953,30954,30955,30957,30958,30959,30960,30961,30963,30965,30966,30968,30969,30971,30972,30973,30974,30975,30976,30978,30979,30980,30982,30983,30984,30985,30986,30987,30988,30784,20648,30679,25616,35302,22788,25571,24029,31359,26941,20256,33337,21912,20018,30126,31383,24162,24202,38383,21019,21561,28810,25462,38180,22402,26149,26943,37255,21767,28147,32431,34850,25139,32496,30133,33576,30913,38604,36766,24904,29943,35789,27492,21050,36176,27425,32874,33905,22257,21254,20174,19995,20945,31895,37259,31751,20419,36479,31713,31388,25703,23828,20652,33030,30209,31929,28140,32736,26449,23384,23544,30923,25774,25619,25514,25387,38169,25645,36798,31572,30249,25171,22823,21574,27513,20643,25140,24102,27526,20195,36151,34955,24453,36910,30989,30990,30991,30992,30993,30994,30996,30997,30998,30999,31e3,31001,31002,31003,31004,31005,31007,31008,31009,31010,31011,31013,31014,31015,31016,31017,31018,31019,31020,31021,31022,31023,31024,31025,31026,31027,31029,31030,31031,31032,31033,31037,31039,31042,31043,31044,31045,31047,31050,31051,31052,31053,31054,31055,31056,31057,31058,31060,31061,31064,31065,31073,31075,31076,31078,31081,31082,31083,31084,31086,31088,31089,31090,31091,31092,31093,31094,31097,31099,31100,31101,31102,31103,31106,31107,31110,31111,31112,31113,31115,31116,31117,31118,31120,31121,31122,24608,32829,25285,20025,21333,37112,25528,32966,26086,27694,20294,24814,28129,35806,24377,34507,24403,25377,20826,33633,26723,20992,25443,36424,20498,23707,31095,23548,21040,31291,24764,36947,30423,24503,24471,30340,36460,28783,30331,31561,30634,20979,37011,22564,20302,28404,36842,25932,31515,29380,28068,32735,23265,25269,24213,22320,33922,31532,24093,24351,36882,32532,39072,25474,28359,30872,28857,20856,38747,22443,30005,20291,30008,24215,24806,22880,28096,27583,30857,21500,38613,20939,20993,25481,21514,38035,35843,36300,29241,30879,34678,36845,35853,21472,31123,31124,31125,31126,31127,31128,31129,31131,31132,31133,31134,31135,31136,31137,31138,31139,31140,31141,31142,31144,31145,31146,31147,31148,31149,31150,31151,31152,31153,31154,31156,31157,31158,31159,31160,31164,31167,31170,31172,31173,31175,31176,31178,31180,31182,31183,31184,31187,31188,31190,31191,31193,31194,31195,31196,31197,31198,31200,31201,31202,31205,31208,31210,31212,31214,31217,31218,31219,31220,31221,31222,31223,31225,31226,31228,31230,31231,31233,31236,31237,31239,31240,31241,31242,31244,31247,31248,31249,31250,31251,31253,31254,31256,31257,31259,31260,19969,30447,21486,38025,39030,40718,38189,23450,35746,20002,19996,20908,33891,25026,21160,26635,20375,24683,20923,27934,20828,25238,26007,38497,35910,36887,30168,37117,30563,27602,29322,29420,35835,22581,30585,36172,26460,38208,32922,24230,28193,22930,31471,30701,38203,27573,26029,32526,22534,20817,38431,23545,22697,21544,36466,25958,39039,22244,38045,30462,36929,25479,21702,22810,22842,22427,36530,26421,36346,33333,21057,24816,22549,34558,23784,40517,20420,39069,35769,23077,24694,21380,25212,36943,37122,39295,24681,32780,20799,32819,23572,39285,27953,20108,31261,31263,31265,31266,31268,31269,31270,31271,31272,31273,31274,31275,31276,31277,31278,31279,31280,31281,31282,31284,31285,31286,31288,31290,31294,31296,31297,31298,31299,31300,31301,31303,31304,31305,31306,31307,31308,31309,31310,31311,31312,31314,31315,31316,31317,31318,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31345,31346,31347,31349,31355,31356,31357,31358,31362,31365,31367,31369,31370,31371,31372,31374,31375,31376,31379,31380,31385,31386,31387,31390,31393,31394,36144,21457,32602,31567,20240,20047,38400,27861,29648,34281,24070,30058,32763,27146,30718,38034,32321,20961,28902,21453,36820,33539,36137,29359,39277,27867,22346,33459,26041,32938,25151,38450,22952,20223,35775,32442,25918,33778,38750,21857,39134,32933,21290,35837,21536,32954,24223,27832,36153,33452,37210,21545,27675,20998,32439,22367,28954,27774,31881,22859,20221,24575,24868,31914,20016,23553,26539,34562,23792,38155,39118,30127,28925,36898,20911,32541,35773,22857,20964,20315,21542,22827,25975,32932,23413,25206,25282,36752,24133,27679,31526,20239,20440,26381,31395,31396,31399,31401,31402,31403,31406,31407,31408,31409,31410,31412,31413,31414,31415,31416,31417,31418,31419,31420,31421,31422,31424,31425,31426,31427,31428,31429,31430,31431,31432,31433,31434,31436,31437,31438,31439,31440,31441,31442,31443,31444,31445,31447,31448,31450,31451,31452,31453,31457,31458,31460,31463,31464,31465,31466,31467,31468,31470,31472,31473,31474,31475,31476,31477,31478,31479,31480,31483,31484,31486,31488,31489,31490,31493,31495,31497,31500,31501,31502,31504,31506,31507,31510,31511,31512,31514,31516,31517,31519,31521,31522,31523,31527,31529,31533,28014,28074,31119,34993,24343,29995,25242,36741,20463,37340,26023,33071,33105,24220,33104,36212,21103,35206,36171,22797,20613,20184,38428,29238,33145,36127,23500,35747,38468,22919,32538,21648,22134,22030,35813,25913,27010,38041,30422,28297,24178,29976,26438,26577,31487,32925,36214,24863,31174,25954,36195,20872,21018,38050,32568,32923,32434,23703,28207,26464,31705,30347,39640,33167,32660,31957,25630,38224,31295,21578,21733,27468,25601,25096,40509,33011,30105,21106,38761,33883,26684,34532,38401,38548,38124,20010,21508,32473,26681,36319,32789,26356,24218,32697,31535,31536,31538,31540,31541,31542,31543,31545,31547,31549,31551,31552,31553,31554,31555,31556,31558,31560,31562,31565,31566,31571,31573,31575,31577,31580,31582,31583,31585,31587,31588,31589,31590,31591,31592,31593,31594,31595,31596,31597,31599,31600,31603,31604,31606,31608,31610,31612,31613,31615,31617,31618,31619,31620,31622,31623,31624,31625,31626,31627,31628,31630,31631,31633,31634,31635,31638,31640,31641,31642,31643,31646,31647,31648,31651,31652,31653,31662,31663,31664,31666,31667,31669,31670,31671,31673,31674,31675,31676,31677,31678,31679,31680,31682,31683,31684,22466,32831,26775,24037,25915,21151,24685,40858,20379,36524,20844,23467,24339,24041,27742,25329,36129,20849,38057,21246,27807,33503,29399,22434,26500,36141,22815,36764,33735,21653,31629,20272,27837,23396,22993,40723,21476,34506,39592,35895,32929,25925,39038,22266,38599,21038,29916,21072,23521,25346,35074,20054,25296,24618,26874,20851,23448,20896,35266,31649,39302,32592,24815,28748,36143,20809,24191,36891,29808,35268,22317,30789,24402,40863,38394,36712,39740,35809,30328,26690,26588,36330,36149,21053,36746,28378,26829,38149,37101,22269,26524,35065,36807,21704,31685,31688,31689,31690,31691,31693,31694,31695,31696,31698,31700,31701,31702,31703,31704,31707,31708,31710,31711,31712,31714,31715,31716,31719,31720,31721,31723,31724,31725,31727,31728,31730,31731,31732,31733,31734,31736,31737,31738,31739,31741,31743,31744,31745,31746,31747,31748,31749,31750,31752,31753,31754,31757,31758,31760,31761,31762,31763,31764,31765,31767,31768,31769,31770,31771,31772,31773,31774,31776,31777,31778,31779,31780,31781,31784,31785,31787,31788,31789,31790,31791,31792,31793,31794,31795,31796,31797,31798,31799,31801,31802,31803,31804,31805,31806,31810,39608,23401,28023,27686,20133,23475,39559,37219,25e3,37039,38889,21547,28085,23506,20989,21898,32597,32752,25788,25421,26097,25022,24717,28938,27735,27721,22831,26477,33322,22741,22158,35946,27627,37085,22909,32791,21495,28009,21621,21917,33655,33743,26680,31166,21644,20309,21512,30418,35977,38402,27827,28088,36203,35088,40548,36154,22079,40657,30165,24456,29408,24680,21756,20136,27178,34913,24658,36720,21700,28888,34425,40511,27946,23439,24344,32418,21897,20399,29492,21564,21402,20505,21518,21628,20046,24573,29786,22774,33899,32993,34676,29392,31946,28246,31811,31812,31813,31814,31815,31816,31817,31818,31819,31820,31822,31823,31824,31825,31826,31827,31828,31829,31830,31831,31832,31833,31834,31835,31836,31837,31838,31839,31840,31841,31842,31843,31844,31845,31846,31847,31848,31849,31850,31851,31852,31853,31854,31855,31856,31857,31858,31861,31862,31863,31864,31865,31866,31870,31871,31872,31873,31874,31875,31876,31877,31878,31879,31880,31882,31883,31884,31885,31886,31887,31888,31891,31892,31894,31897,31898,31899,31904,31905,31907,31910,31911,31912,31913,31915,31916,31917,31919,31920,31924,31925,31926,31927,31928,31930,31931,24359,34382,21804,25252,20114,27818,25143,33457,21719,21326,29502,28369,30011,21010,21270,35805,27088,24458,24576,28142,22351,27426,29615,26707,36824,32531,25442,24739,21796,30186,35938,28949,28067,23462,24187,33618,24908,40644,30970,34647,31783,30343,20976,24822,29004,26179,24140,24653,35854,28784,25381,36745,24509,24674,34516,22238,27585,24724,24935,21321,24800,26214,36159,31229,20250,28905,27719,35763,35826,32472,33636,26127,23130,39746,27985,28151,35905,27963,20249,28779,33719,25110,24785,38669,36135,31096,20987,22334,22522,26426,30072,31293,31215,31637,31935,31936,31938,31939,31940,31942,31945,31947,31950,31951,31952,31953,31954,31955,31956,31960,31962,31963,31965,31966,31969,31970,31971,31972,31973,31974,31975,31977,31978,31979,31980,31981,31982,31984,31985,31986,31987,31988,31989,31990,31991,31993,31994,31996,31997,31998,31999,32e3,32001,32002,32003,32004,32005,32006,32007,32008,32009,32011,32012,32013,32014,32015,32016,32017,32018,32019,32020,32021,32022,32023,32024,32025,32026,32027,32028,32029,32030,32031,32033,32035,32036,32037,32038,32040,32041,32042,32044,32045,32046,32048,32049,32050,32051,32052,32053,32054,32908,39269,36857,28608,35749,40481,23020,32489,32521,21513,26497,26840,36753,31821,38598,21450,24613,30142,27762,21363,23241,32423,25380,20960,33034,24049,34015,25216,20864,23395,20238,31085,21058,24760,27982,23492,23490,35745,35760,26082,24524,38469,22931,32487,32426,22025,26551,22841,20339,23478,21152,33626,39050,36158,30002,38078,20551,31292,20215,26550,39550,23233,27516,30417,22362,23574,31546,38388,29006,20860,32937,33392,22904,32516,33575,26816,26604,30897,30839,25315,25441,31616,20461,21098,20943,33616,27099,37492,36341,36145,35265,38190,31661,20214,32055,32056,32057,32058,32059,32060,32061,32062,32063,32064,32065,32066,32067,32068,32069,32070,32071,32072,32073,32074,32075,32076,32077,32078,32079,32080,32081,32082,32083,32084,32085,32086,32087,32088,32089,32090,32091,32092,32093,32094,32095,32096,32097,32098,32099,32100,32101,32102,32103,32104,32105,32106,32107,32108,32109,32111,32112,32113,32114,32115,32116,32117,32118,32120,32121,32122,32123,32124,32125,32126,32127,32128,32129,32130,32131,32132,32133,32134,32135,32136,32137,32138,32139,32140,32141,32142,32143,32144,32145,32146,32147,32148,32149,32150,32151,32152,20581,33328,21073,39279,28176,28293,28071,24314,20725,23004,23558,27974,27743,30086,33931,26728,22870,35762,21280,37233,38477,34121,26898,30977,28966,33014,20132,37066,27975,39556,23047,22204,25605,38128,30699,20389,33050,29409,35282,39290,32564,32478,21119,25945,37237,36735,36739,21483,31382,25581,25509,30342,31224,34903,38454,25130,21163,33410,26708,26480,25463,30571,31469,27905,32467,35299,22992,25106,34249,33445,30028,20511,20171,30117,35819,23626,24062,31563,26020,37329,20170,27941,35167,32039,38182,20165,35880,36827,38771,26187,31105,36817,28908,28024,32153,32154,32155,32156,32157,32158,32159,32160,32161,32162,32163,32164,32165,32167,32168,32169,32170,32171,32172,32173,32175,32176,32177,32178,32179,32180,32181,32182,32183,32184,32185,32186,32187,32188,32189,32190,32191,32192,32193,32194,32195,32196,32197,32198,32199,32200,32201,32202,32203,32204,32205,32206,32207,32208,32209,32210,32211,32212,32213,32214,32215,32216,32217,32218,32219,32220,32221,32222,32223,32224,32225,32226,32227,32228,32229,32230,32231,32232,32233,32234,32235,32236,32237,32238,32239,32240,32241,32242,32243,32244,32245,32246,32247,32248,32249,32250,23613,21170,33606,20834,33550,30555,26230,40120,20140,24778,31934,31923,32463,20117,35686,26223,39048,38745,22659,25964,38236,24452,30153,38742,31455,31454,20928,28847,31384,25578,31350,32416,29590,38893,20037,28792,20061,37202,21417,25937,26087,33276,33285,21646,23601,30106,38816,25304,29401,30141,23621,39545,33738,23616,21632,30697,20030,27822,32858,25298,25454,24040,20855,36317,36382,38191,20465,21477,24807,28844,21095,25424,40515,23071,20518,30519,21367,32482,25733,25899,25225,25496,20500,29237,35273,20915,35776,32477,22343,33740,38055,20891,21531,23803,32251,32252,32253,32254,32255,32256,32257,32258,32259,32260,32261,32262,32263,32264,32265,32266,32267,32268,32269,32270,32271,32272,32273,32274,32275,32276,32277,32278,32279,32280,32281,32282,32283,32284,32285,32286,32287,32288,32289,32290,32291,32292,32293,32294,32295,32296,32297,32298,32299,32300,32301,32302,32303,32304,32305,32306,32307,32308,32309,32310,32311,32312,32313,32314,32316,32317,32318,32319,32320,32322,32323,32324,32325,32326,32328,32329,32330,32331,32332,32333,32334,32335,32336,32337,32338,32339,32340,32341,32342,32343,32344,32345,32346,32347,32348,32349,20426,31459,27994,37089,39567,21888,21654,21345,21679,24320,25577,26999,20975,24936,21002,22570,21208,22350,30733,30475,24247,24951,31968,25179,25239,20130,28821,32771,25335,28900,38752,22391,33499,26607,26869,30933,39063,31185,22771,21683,21487,28212,20811,21051,23458,35838,32943,21827,22438,24691,22353,21549,31354,24656,23380,25511,25248,21475,25187,23495,26543,21741,31391,33510,37239,24211,35044,22840,22446,25358,36328,33007,22359,31607,20393,24555,23485,27454,21281,31568,29378,26694,30719,30518,26103,20917,20111,30420,23743,31397,33909,22862,39745,20608,32350,32351,32352,32353,32354,32355,32356,32357,32358,32359,32360,32361,32362,32363,32364,32365,32366,32367,32368,32369,32370,32371,32372,32373,32374,32375,32376,32377,32378,32379,32380,32381,32382,32383,32384,32385,32387,32388,32389,32390,32391,32392,32393,32394,32395,32396,32397,32398,32399,32400,32401,32402,32403,32404,32405,32406,32407,32408,32409,32410,32412,32413,32414,32430,32436,32443,32444,32470,32484,32492,32505,32522,32528,32542,32567,32569,32571,32572,32573,32574,32575,32576,32577,32579,32582,32583,32584,32585,32586,32587,32588,32589,32590,32591,32594,32595,39304,24871,28291,22372,26118,25414,22256,25324,25193,24275,38420,22403,25289,21895,34593,33098,36771,21862,33713,26469,36182,34013,23146,26639,25318,31726,38417,20848,28572,35888,25597,35272,25042,32518,28866,28389,29701,27028,29436,24266,37070,26391,28010,25438,21171,29282,32769,20332,23013,37226,28889,28061,21202,20048,38647,38253,34174,30922,32047,20769,22418,25794,32907,31867,27882,26865,26974,20919,21400,26792,29313,40654,31729,29432,31163,28435,29702,26446,37324,40100,31036,33673,33620,21519,26647,20029,21385,21169,30782,21382,21033,20616,20363,20432,32598,32601,32603,32604,32605,32606,32608,32611,32612,32613,32614,32615,32619,32620,32621,32623,32624,32627,32629,32630,32631,32632,32634,32635,32636,32637,32639,32640,32642,32643,32644,32645,32646,32647,32648,32649,32651,32653,32655,32656,32657,32658,32659,32661,32662,32663,32664,32665,32667,32668,32672,32674,32675,32677,32678,32680,32681,32682,32683,32684,32685,32686,32689,32691,32692,32693,32694,32695,32698,32699,32702,32704,32706,32707,32708,32710,32711,32712,32713,32715,32717,32719,32720,32721,32722,32723,32726,32727,32729,32730,32731,32732,32733,32734,32738,32739,30178,31435,31890,27813,38582,21147,29827,21737,20457,32852,33714,36830,38256,24265,24604,28063,24088,25947,33080,38142,24651,28860,32451,31918,20937,26753,31921,33391,20004,36742,37327,26238,20142,35845,25769,32842,20698,30103,29134,23525,36797,28518,20102,25730,38243,24278,26009,21015,35010,28872,21155,29454,29747,26519,30967,38678,20020,37051,40158,28107,20955,36161,21533,25294,29618,33777,38646,40836,38083,20278,32666,20940,28789,38517,23725,39046,21478,20196,28316,29705,27060,30827,39311,30041,21016,30244,27969,26611,20845,40857,32843,21657,31548,31423,32740,32743,32744,32746,32747,32748,32749,32751,32754,32756,32757,32758,32759,32760,32761,32762,32765,32766,32767,32770,32775,32776,32777,32778,32782,32783,32785,32787,32794,32795,32797,32798,32799,32801,32803,32804,32811,32812,32813,32814,32815,32816,32818,32820,32825,32826,32828,32830,32832,32833,32836,32837,32839,32840,32841,32846,32847,32848,32849,32851,32853,32854,32855,32857,32859,32860,32861,32862,32863,32864,32865,32866,32867,32868,32869,32870,32871,32872,32875,32876,32877,32878,32879,32880,32882,32883,32884,32885,32886,32887,32888,32889,32890,32891,32892,32893,38534,22404,25314,38471,27004,23044,25602,31699,28431,38475,33446,21346,39045,24208,28809,25523,21348,34383,40065,40595,30860,38706,36335,36162,40575,28510,31108,24405,38470,25134,39540,21525,38109,20387,26053,23653,23649,32533,34385,27695,24459,29575,28388,32511,23782,25371,23402,28390,21365,20081,25504,30053,25249,36718,20262,20177,27814,32438,35770,33821,34746,32599,36923,38179,31657,39585,35064,33853,27931,39558,32476,22920,40635,29595,30721,34434,39532,39554,22043,21527,22475,20080,40614,21334,36808,33033,30610,39314,34542,28385,34067,26364,24930,28459,32894,32897,32898,32901,32904,32906,32909,32910,32911,32912,32913,32914,32916,32917,32919,32921,32926,32931,32934,32935,32936,32940,32944,32947,32949,32950,32952,32953,32955,32965,32967,32968,32969,32970,32971,32975,32976,32977,32978,32979,32980,32981,32984,32991,32992,32994,32995,32998,33006,33013,33015,33017,33019,33022,33023,33024,33025,33027,33028,33029,33031,33032,33035,33036,33045,33047,33049,33051,33052,33053,33055,33056,33057,33058,33059,33060,33061,33062,33063,33064,33065,33066,33067,33069,33070,33072,33075,33076,33077,33079,33081,33082,33083,33084,33085,33087,35881,33426,33579,30450,27667,24537,33725,29483,33541,38170,27611,30683,38086,21359,33538,20882,24125,35980,36152,20040,29611,26522,26757,37238,38665,29028,27809,30473,23186,38209,27599,32654,26151,23504,22969,23194,38376,38391,20204,33804,33945,27308,30431,38192,29467,26790,23391,30511,37274,38753,31964,36855,35868,24357,31859,31192,35269,27852,34588,23494,24130,26825,30496,32501,20885,20813,21193,23081,32517,38754,33495,25551,30596,34256,31186,28218,24217,22937,34065,28781,27665,25279,30399,25935,24751,38397,26126,34719,40483,38125,21517,21629,35884,25720,33088,33089,33090,33091,33092,33093,33095,33097,33101,33102,33103,33106,33110,33111,33112,33115,33116,33117,33118,33119,33121,33122,33123,33124,33126,33128,33130,33131,33132,33135,33138,33139,33141,33142,33143,33144,33153,33155,33156,33157,33158,33159,33161,33163,33164,33165,33166,33168,33170,33171,33172,33173,33174,33175,33177,33178,33182,33183,33184,33185,33186,33188,33189,33191,33193,33195,33196,33197,33198,33199,33200,33201,33202,33204,33205,33206,33207,33208,33209,33212,33213,33214,33215,33220,33221,33223,33224,33225,33227,33229,33230,33231,33232,33233,33234,33235,25721,34321,27169,33180,30952,25705,39764,25273,26411,33707,22696,40664,27819,28448,23518,38476,35851,29279,26576,25287,29281,20137,22982,27597,22675,26286,24149,21215,24917,26408,30446,30566,29287,31302,25343,21738,21584,38048,37027,23068,32435,27670,20035,22902,32784,22856,21335,30007,38590,22218,25376,33041,24700,38393,28118,21602,39297,20869,23273,33021,22958,38675,20522,27877,23612,25311,20320,21311,33147,36870,28346,34091,25288,24180,30910,25781,25467,24565,23064,37247,40479,23615,25423,32834,23421,21870,38218,38221,28037,24744,26592,29406,20957,23425,33236,33237,33238,33239,33240,33241,33242,33243,33244,33245,33246,33247,33248,33249,33250,33252,33253,33254,33256,33257,33259,33262,33263,33264,33265,33266,33269,33270,33271,33272,33273,33274,33277,33279,33283,33287,33288,33289,33290,33291,33294,33295,33297,33299,33301,33302,33303,33304,33305,33306,33309,33312,33316,33317,33318,33319,33321,33326,33330,33338,33340,33341,33343,33344,33345,33346,33347,33349,33350,33352,33354,33356,33357,33358,33360,33361,33362,33363,33364,33365,33366,33367,33369,33371,33372,33373,33374,33376,33377,33378,33379,33380,33381,33382,33383,33385,25319,27870,29275,25197,38062,32445,33043,27987,20892,24324,22900,21162,24594,22899,26262,34384,30111,25386,25062,31983,35834,21734,27431,40485,27572,34261,21589,20598,27812,21866,36276,29228,24085,24597,29750,25293,25490,29260,24472,28227,27966,25856,28504,30424,30928,30460,30036,21028,21467,20051,24222,26049,32810,32982,25243,21638,21032,28846,34957,36305,27873,21624,32986,22521,35060,36180,38506,37197,20329,27803,21943,30406,30768,25256,28921,28558,24429,34028,26842,30844,31735,33192,26379,40527,25447,30896,22383,30738,38713,25209,25259,21128,29749,27607,33386,33387,33388,33389,33393,33397,33398,33399,33400,33403,33404,33408,33409,33411,33413,33414,33415,33417,33420,33424,33427,33428,33429,33430,33434,33435,33438,33440,33442,33443,33447,33458,33461,33462,33466,33467,33468,33471,33472,33474,33475,33477,33478,33481,33488,33494,33497,33498,33501,33506,33511,33512,33513,33514,33516,33517,33518,33520,33522,33523,33525,33526,33528,33530,33532,33533,33534,33535,33536,33546,33547,33549,33552,33554,33555,33558,33560,33561,33565,33566,33567,33568,33569,33570,33571,33572,33573,33574,33577,33578,33582,33584,33586,33591,33595,33597,21860,33086,30130,30382,21305,30174,20731,23617,35692,31687,20559,29255,39575,39128,28418,29922,31080,25735,30629,25340,39057,36139,21697,32856,20050,22378,33529,33805,24179,20973,29942,35780,23631,22369,27900,39047,23110,30772,39748,36843,31893,21078,25169,38138,20166,33670,33889,33769,33970,22484,26420,22275,26222,28006,35889,26333,28689,26399,27450,26646,25114,22971,19971,20932,28422,26578,27791,20854,26827,22855,27495,30054,23822,33040,40784,26071,31048,31041,39569,36215,23682,20062,20225,21551,22865,30732,22120,27668,36804,24323,27773,27875,35755,25488,33598,33599,33601,33602,33604,33605,33608,33610,33611,33612,33613,33614,33619,33621,33622,33623,33624,33625,33629,33634,33648,33649,33650,33651,33652,33653,33654,33657,33658,33662,33663,33664,33665,33666,33667,33668,33671,33672,33674,33675,33676,33677,33679,33680,33681,33684,33685,33686,33687,33689,33690,33693,33695,33697,33698,33699,33700,33701,33702,33703,33708,33709,33710,33711,33717,33723,33726,33727,33730,33731,33732,33734,33736,33737,33739,33741,33742,33744,33745,33746,33747,33749,33751,33753,33754,33755,33758,33762,33763,33764,33766,33767,33768,33771,33772,33773,24688,27965,29301,25190,38030,38085,21315,36801,31614,20191,35878,20094,40660,38065,38067,21069,28508,36963,27973,35892,22545,23884,27424,27465,26538,21595,33108,32652,22681,34103,24378,25250,27207,38201,25970,24708,26725,30631,20052,20392,24039,38808,25772,32728,23789,20431,31373,20999,33540,19988,24623,31363,38054,20405,20146,31206,29748,21220,33465,25810,31165,23517,27777,38738,36731,27682,20542,21375,28165,25806,26228,27696,24773,39031,35831,24198,29756,31351,31179,19992,37041,29699,27714,22234,37195,27845,36235,21306,34502,26354,36527,23624,39537,28192,33774,33775,33779,33780,33781,33782,33783,33786,33787,33788,33790,33791,33792,33794,33797,33799,33800,33801,33802,33808,33810,33811,33812,33813,33814,33815,33817,33818,33819,33822,33823,33824,33825,33826,33827,33833,33834,33835,33836,33837,33838,33839,33840,33842,33843,33844,33845,33846,33847,33849,33850,33851,33854,33855,33856,33857,33858,33859,33860,33861,33863,33864,33865,33866,33867,33868,33869,33870,33871,33872,33874,33875,33876,33877,33878,33880,33885,33886,33887,33888,33890,33892,33893,33894,33895,33896,33898,33902,33903,33904,33906,33908,33911,33913,33915,33916,21462,23094,40843,36259,21435,22280,39079,26435,37275,27849,20840,30154,25331,29356,21048,21149,32570,28820,30264,21364,40522,27063,30830,38592,35033,32676,28982,29123,20873,26579,29924,22756,25880,22199,35753,39286,25200,32469,24825,28909,22764,20161,20154,24525,38887,20219,35748,20995,22922,32427,25172,20173,26085,25102,33592,33993,33635,34701,29076,28342,23481,32466,20887,25545,26580,32905,33593,34837,20754,23418,22914,36785,20083,27741,20837,35109,36719,38446,34122,29790,38160,38384,28070,33509,24369,25746,27922,33832,33134,40131,22622,36187,19977,21441,33917,33918,33919,33920,33921,33923,33924,33925,33926,33930,33933,33935,33936,33937,33938,33939,33940,33941,33942,33944,33946,33947,33949,33950,33951,33952,33954,33955,33956,33957,33958,33959,33960,33961,33962,33963,33964,33965,33966,33968,33969,33971,33973,33974,33975,33979,33980,33982,33984,33986,33987,33989,33990,33991,33992,33995,33996,33998,33999,34002,34004,34005,34007,34008,34009,34010,34011,34012,34014,34017,34018,34020,34023,34024,34025,34026,34027,34029,34030,34031,34033,34034,34035,34036,34037,34038,34039,34040,34041,34042,34043,34045,34046,34048,34049,34050,20254,25955,26705,21971,20007,25620,39578,25195,23234,29791,33394,28073,26862,20711,33678,30722,26432,21049,27801,32433,20667,21861,29022,31579,26194,29642,33515,26441,23665,21024,29053,34923,38378,38485,25797,36193,33203,21892,27733,25159,32558,22674,20260,21830,36175,26188,19978,23578,35059,26786,25422,31245,28903,33421,21242,38902,23569,21736,37045,32461,22882,36170,34503,33292,33293,36198,25668,23556,24913,28041,31038,35774,30775,30003,21627,20280,36523,28145,23072,32453,31070,27784,23457,23158,29978,32958,24910,28183,22768,29983,29989,29298,21319,32499,34051,34052,34053,34054,34055,34056,34057,34058,34059,34061,34062,34063,34064,34066,34068,34069,34070,34072,34073,34075,34076,34077,34078,34080,34082,34083,34084,34085,34086,34087,34088,34089,34090,34093,34094,34095,34096,34097,34098,34099,34100,34101,34102,34110,34111,34112,34113,34114,34116,34117,34118,34119,34123,34124,34125,34126,34127,34128,34129,34130,34131,34132,34133,34135,34136,34138,34139,34140,34141,34143,34144,34145,34146,34147,34149,34150,34151,34153,34154,34155,34156,34157,34158,34159,34160,34161,34163,34165,34166,34167,34168,34172,34173,34175,34176,34177,30465,30427,21097,32988,22307,24072,22833,29422,26045,28287,35799,23608,34417,21313,30707,25342,26102,20160,39135,34432,23454,35782,21490,30690,20351,23630,39542,22987,24335,31034,22763,19990,26623,20107,25325,35475,36893,21183,26159,21980,22124,36866,20181,20365,37322,39280,27663,24066,24643,23460,35270,35797,25910,25163,39318,23432,23551,25480,21806,21463,30246,20861,34092,26530,26803,27530,25234,36755,21460,33298,28113,30095,20070,36174,23408,29087,34223,26257,26329,32626,34560,40653,40736,23646,26415,36848,26641,26463,25101,31446,22661,24246,25968,28465,34178,34179,34182,34184,34185,34186,34187,34188,34189,34190,34192,34193,34194,34195,34196,34197,34198,34199,34200,34201,34202,34205,34206,34207,34208,34209,34210,34211,34213,34214,34215,34217,34219,34220,34221,34225,34226,34227,34228,34229,34230,34232,34234,34235,34236,34237,34238,34239,34240,34242,34243,34244,34245,34246,34247,34248,34250,34251,34252,34253,34254,34257,34258,34260,34262,34263,34264,34265,34266,34267,34269,34270,34271,34272,34273,34274,34275,34277,34278,34279,34280,34282,34283,34284,34285,34286,34287,34288,34289,34290,34291,34292,34293,34294,34295,34296,24661,21047,32781,25684,34928,29993,24069,26643,25332,38684,21452,29245,35841,27700,30561,31246,21550,30636,39034,33308,35828,30805,26388,28865,26031,25749,22070,24605,31169,21496,19997,27515,32902,23546,21987,22235,20282,20284,39282,24051,26494,32824,24578,39042,36865,23435,35772,35829,25628,33368,25822,22013,33487,37221,20439,32032,36895,31903,20723,22609,28335,23487,35785,32899,37240,33948,31639,34429,38539,38543,32485,39635,30862,23681,31319,36930,38567,31071,23385,25439,31499,34001,26797,21766,32553,29712,32034,38145,25152,22604,20182,23427,22905,22612,34297,34298,34300,34301,34302,34304,34305,34306,34307,34308,34310,34311,34312,34313,34314,34315,34316,34317,34318,34319,34320,34322,34323,34324,34325,34327,34328,34329,34330,34331,34332,34333,34334,34335,34336,34337,34338,34339,34340,34341,34342,34344,34346,34347,34348,34349,34350,34351,34352,34353,34354,34355,34356,34357,34358,34359,34361,34362,34363,34365,34366,34367,34368,34369,34370,34371,34372,34373,34374,34375,34376,34377,34378,34379,34380,34386,34387,34389,34390,34391,34392,34393,34395,34396,34397,34399,34400,34401,34403,34404,34405,34406,34407,34408,34409,34410,29549,25374,36427,36367,32974,33492,25260,21488,27888,37214,22826,24577,27760,22349,25674,36138,30251,28393,22363,27264,30192,28525,35885,35848,22374,27631,34962,30899,25506,21497,28845,27748,22616,25642,22530,26848,33179,21776,31958,20504,36538,28108,36255,28907,25487,28059,28372,32486,33796,26691,36867,28120,38518,35752,22871,29305,34276,33150,30140,35466,26799,21076,36386,38161,25552,39064,36420,21884,20307,26367,22159,24789,28053,21059,23625,22825,28155,22635,3e4,29980,24684,33300,33094,25361,26465,36834,30522,36339,36148,38081,24086,21381,21548,28867,34413,34415,34416,34418,34419,34420,34421,34422,34423,34424,34435,34436,34437,34438,34439,34440,34441,34446,34447,34448,34449,34450,34452,34454,34455,34456,34457,34458,34459,34462,34463,34464,34465,34466,34469,34470,34475,34477,34478,34482,34483,34487,34488,34489,34491,34492,34493,34494,34495,34497,34498,34499,34501,34504,34508,34509,34514,34515,34517,34518,34519,34522,34524,34525,34528,34529,34530,34531,34533,34534,34535,34536,34538,34539,34540,34543,34549,34550,34551,34554,34555,34556,34557,34559,34561,34564,34565,34566,34571,34572,34574,34575,34576,34577,34580,34582,27712,24311,20572,20141,24237,25402,33351,36890,26704,37230,30643,21516,38108,24420,31461,26742,25413,31570,32479,30171,20599,25237,22836,36879,20984,31171,31361,22270,24466,36884,28034,23648,22303,21520,20820,28237,22242,25512,39059,33151,34581,35114,36864,21534,23663,33216,25302,25176,33073,40501,38464,39534,39548,26925,22949,25299,21822,25366,21703,34521,27964,23043,29926,34972,27498,22806,35916,24367,28286,29609,39037,20024,28919,23436,30871,25405,26202,30358,24779,23451,23113,19975,33109,27754,29579,20129,26505,32593,24448,26106,26395,24536,22916,23041,34585,34587,34589,34591,34592,34596,34598,34599,34600,34602,34603,34604,34605,34607,34608,34610,34611,34613,34614,34616,34617,34618,34620,34621,34624,34625,34626,34627,34628,34629,34630,34634,34635,34637,34639,34640,34641,34642,34644,34645,34646,34648,34650,34651,34652,34653,34654,34655,34657,34658,34662,34663,34664,34665,34666,34667,34668,34669,34671,34673,34674,34675,34677,34679,34680,34681,34682,34687,34688,34689,34692,34694,34695,34697,34698,34700,34702,34703,34704,34705,34706,34708,34709,34710,34712,34713,34714,34715,34716,34717,34718,34720,34721,34722,34723,34724,24013,24494,21361,38886,36829,26693,22260,21807,24799,20026,28493,32500,33479,33806,22996,20255,20266,23614,32428,26410,34074,21619,30031,32963,21890,39759,20301,28205,35859,23561,24944,21355,30239,28201,34442,25991,38395,32441,21563,31283,32010,38382,21985,32705,29934,25373,34583,28065,31389,25105,26017,21351,25569,27779,24043,21596,38056,20044,27745,35820,23627,26080,33436,26791,21566,21556,27595,27494,20116,25410,21320,33310,20237,20398,22366,25098,38654,26212,29289,21247,21153,24735,35823,26132,29081,26512,35199,30802,30717,26224,22075,21560,38177,29306,34725,34726,34727,34729,34730,34734,34736,34737,34738,34740,34742,34743,34744,34745,34747,34748,34750,34751,34753,34754,34755,34756,34757,34759,34760,34761,34764,34765,34766,34767,34768,34772,34773,34774,34775,34776,34777,34778,34780,34781,34782,34783,34785,34786,34787,34788,34790,34791,34792,34793,34795,34796,34797,34799,34800,34801,34802,34803,34804,34805,34806,34807,34808,34810,34811,34812,34813,34815,34816,34817,34818,34820,34821,34822,34823,34824,34825,34827,34828,34829,34830,34831,34832,34833,34834,34836,34839,34840,34841,34842,34844,34845,34846,34847,34848,34851,31232,24687,24076,24713,33181,22805,24796,29060,28911,28330,27728,29312,27268,34989,24109,20064,23219,21916,38115,27927,31995,38553,25103,32454,30606,34430,21283,38686,36758,26247,23777,20384,29421,19979,21414,22799,21523,25472,38184,20808,20185,40092,32420,21688,36132,34900,33335,38386,28046,24358,23244,26174,38505,29616,29486,21439,33146,39301,32673,23466,38519,38480,32447,30456,21410,38262,39321,31665,35140,28248,20065,32724,31077,35814,24819,21709,20139,39033,24055,27233,20687,21521,35937,33831,30813,38660,21066,21742,22179,38144,28040,23477,28102,26195,34852,34853,34854,34855,34856,34857,34858,34859,34860,34861,34862,34863,34864,34865,34867,34868,34869,34870,34871,34872,34874,34875,34877,34878,34879,34881,34882,34883,34886,34887,34888,34889,34890,34891,34894,34895,34896,34897,34898,34899,34901,34902,34904,34906,34907,34908,34909,34910,34911,34912,34918,34919,34922,34925,34927,34929,34931,34932,34933,34934,34936,34937,34938,34939,34940,34944,34947,34950,34951,34953,34954,34956,34958,34959,34960,34961,34963,34964,34965,34967,34968,34969,34970,34971,34973,34974,34975,34976,34977,34979,34981,34982,34983,34984,34985,34986,23567,23389,26657,32918,21880,31505,25928,26964,20123,27463,34638,38795,21327,25375,25658,37034,26012,32961,35856,20889,26800,21368,34809,25032,27844,27899,35874,23633,34218,33455,38156,27427,36763,26032,24571,24515,20449,34885,26143,33125,29481,24826,20852,21009,22411,24418,37026,34892,37266,24184,26447,24615,22995,20804,20982,33016,21256,27769,38596,29066,20241,20462,32670,26429,21957,38152,31168,34966,32483,22687,25100,38656,34394,22040,39035,24464,35768,33988,37207,21465,26093,24207,30044,24676,32110,23167,32490,32493,36713,21927,23459,24748,26059,29572,34988,34990,34991,34992,34994,34995,34996,34997,34998,35e3,35001,35002,35003,35005,35006,35007,35008,35011,35012,35015,35016,35018,35019,35020,35021,35023,35024,35025,35027,35030,35031,35034,35035,35036,35037,35038,35040,35041,35046,35047,35049,35050,35051,35052,35053,35054,35055,35058,35061,35062,35063,35066,35067,35069,35071,35072,35073,35075,35076,35077,35078,35079,35080,35081,35083,35084,35085,35086,35087,35089,35092,35093,35094,35095,35096,35100,35101,35102,35103,35104,35106,35107,35108,35110,35111,35112,35113,35116,35117,35118,35119,35121,35122,35123,35125,35127,36873,30307,30505,32474,38772,34203,23398,31348,38634,34880,21195,29071,24490,26092,35810,23547,39535,24033,27529,27739,35757,35759,36874,36805,21387,25276,40486,40493,21568,20011,33469,29273,34460,23830,34905,28079,38597,21713,20122,35766,28937,21693,38409,28895,28153,30416,20005,30740,34578,23721,24310,35328,39068,38414,28814,27839,22852,25513,30524,34893,28436,33395,22576,29141,21388,30746,38593,21761,24422,28976,23476,35866,39564,27523,22830,40495,31207,26472,25196,20335,30113,32650,27915,38451,27687,20208,30162,20859,26679,28478,36992,33136,22934,29814,35128,35129,35130,35131,35132,35133,35134,35135,35136,35138,35139,35141,35142,35143,35144,35145,35146,35147,35148,35149,35150,35151,35152,35153,35154,35155,35156,35157,35158,35159,35160,35161,35162,35163,35164,35165,35168,35169,35170,35171,35172,35173,35175,35176,35177,35178,35179,35180,35181,35182,35183,35184,35185,35186,35187,35188,35189,35190,35191,35192,35193,35194,35196,35197,35198,35200,35202,35204,35205,35207,35208,35209,35210,35211,35212,35213,35214,35215,35216,35217,35218,35219,35220,35221,35222,35223,35224,35225,35226,35227,35228,35229,35230,35231,35232,35233,25671,23591,36965,31377,35875,23002,21676,33280,33647,35201,32768,26928,22094,32822,29239,37326,20918,20063,39029,25494,19994,21494,26355,33099,22812,28082,19968,22777,21307,25558,38129,20381,20234,34915,39056,22839,36951,31227,20202,33008,30097,27778,23452,23016,24413,26885,34433,20506,24050,20057,30691,20197,33402,25233,26131,37009,23673,20159,24441,33222,36920,32900,30123,20134,35028,24847,27589,24518,20041,30410,28322,35811,35758,35850,35793,24322,32764,32716,32462,33589,33643,22240,27575,38899,38452,23035,21535,38134,28139,23493,39278,23609,24341,38544,35234,35235,35236,35237,35238,35239,35240,35241,35242,35243,35244,35245,35246,35247,35248,35249,35250,35251,35252,35253,35254,35255,35256,35257,35258,35259,35260,35261,35262,35263,35264,35267,35277,35283,35284,35285,35287,35288,35289,35291,35293,35295,35296,35297,35298,35300,35303,35304,35305,35306,35308,35309,35310,35312,35313,35314,35316,35317,35318,35319,35320,35321,35322,35323,35324,35325,35326,35327,35329,35330,35331,35332,35333,35334,35336,35337,35338,35339,35340,35341,35342,35343,35344,35345,35346,35347,35348,35349,35350,35351,35352,35353,35354,35355,35356,35357,21360,33521,27185,23156,40560,24212,32552,33721,33828,33829,33639,34631,36814,36194,30408,24433,39062,30828,26144,21727,25317,20323,33219,30152,24248,38605,36362,34553,21647,27891,28044,27704,24703,21191,29992,24189,20248,24736,24551,23588,30001,37038,38080,29369,27833,28216,37193,26377,21451,21491,20305,37321,35825,21448,24188,36802,28132,20110,30402,27014,34398,24858,33286,20313,20446,36926,40060,24841,28189,28180,38533,20104,23089,38632,19982,23679,31161,23431,35821,32701,29577,22495,33419,37057,21505,36935,21947,23786,24481,24840,27442,29425,32946,35465,35358,35359,35360,35361,35362,35363,35364,35365,35366,35367,35368,35369,35370,35371,35372,35373,35374,35375,35376,35377,35378,35379,35380,35381,35382,35383,35384,35385,35386,35387,35388,35389,35391,35392,35393,35394,35395,35396,35397,35398,35399,35401,35402,35403,35404,35405,35406,35407,35408,35409,35410,35411,35412,35413,35414,35415,35416,35417,35418,35419,35420,35421,35422,35423,35424,35425,35426,35427,35428,35429,35430,35431,35432,35433,35434,35435,35436,35437,35438,35439,35440,35441,35442,35443,35444,35445,35446,35447,35448,35450,35451,35452,35453,35454,35455,35456,28020,23507,35029,39044,35947,39533,40499,28170,20900,20803,22435,34945,21407,25588,36757,22253,21592,22278,29503,28304,32536,36828,33489,24895,24616,38498,26352,32422,36234,36291,38053,23731,31908,26376,24742,38405,32792,20113,37095,21248,38504,20801,36816,34164,37213,26197,38901,23381,21277,30776,26434,26685,21705,28798,23472,36733,20877,22312,21681,25874,26242,36190,36163,33039,33900,36973,31967,20991,34299,26531,26089,28577,34468,36481,22122,36896,30338,28790,29157,36131,25321,21017,27901,36156,24590,22686,24974,26366,36192,25166,21939,28195,26413,36711,35457,35458,35459,35460,35461,35462,35463,35464,35467,35468,35469,35470,35471,35472,35473,35474,35476,35477,35478,35479,35480,35481,35482,35483,35484,35485,35486,35487,35488,35489,35490,35491,35492,35493,35494,35495,35496,35497,35498,35499,35500,35501,35502,35503,35504,35505,35506,35507,35508,35509,35510,35511,35512,35513,35514,35515,35516,35517,35518,35519,35520,35521,35522,35523,35524,35525,35526,35527,35528,35529,35530,35531,35532,35533,35534,35535,35536,35537,35538,35539,35540,35541,35542,35543,35544,35545,35546,35547,35548,35549,35550,35551,35552,35553,35554,35555,38113,38392,30504,26629,27048,21643,20045,28856,35784,25688,25995,23429,31364,20538,23528,30651,27617,35449,31896,27838,30415,26025,36759,23853,23637,34360,26632,21344,25112,31449,28251,32509,27167,31456,24432,28467,24352,25484,28072,26454,19976,24080,36134,20183,32960,30260,38556,25307,26157,25214,27836,36213,29031,32617,20806,32903,21484,36974,25240,21746,34544,36761,32773,38167,34071,36825,27993,29645,26015,30495,29956,30759,33275,36126,38024,20390,26517,30137,35786,38663,25391,38215,38453,33976,25379,30529,24449,29424,20105,24596,25972,25327,27491,25919,35556,35557,35558,35559,35560,35561,35562,35563,35564,35565,35566,35567,35568,35569,35570,35571,35572,35573,35574,35575,35576,35577,35578,35579,35580,35581,35582,35583,35584,35585,35586,35587,35588,35589,35590,35592,35593,35594,35595,35596,35597,35598,35599,35600,35601,35602,35603,35604,35605,35606,35607,35608,35609,35610,35611,35612,35613,35614,35615,35616,35617,35618,35619,35620,35621,35623,35624,35625,35626,35627,35628,35629,35630,35631,35632,35633,35634,35635,35636,35637,35638,35639,35640,35641,35642,35643,35644,35645,35646,35647,35648,35649,35650,35651,35652,35653,24103,30151,37073,35777,33437,26525,25903,21553,34584,30693,32930,33026,27713,20043,32455,32844,30452,26893,27542,25191,20540,20356,22336,25351,27490,36286,21482,26088,32440,24535,25370,25527,33267,33268,32622,24092,23769,21046,26234,31209,31258,36136,28825,30164,28382,27835,31378,20013,30405,24544,38047,34935,32456,31181,32959,37325,20210,20247,33311,21608,24030,27954,35788,31909,36724,32920,24090,21650,30385,23449,26172,39588,29664,26666,34523,26417,29482,35832,35803,36880,31481,28891,29038,25284,30633,22065,20027,33879,26609,21161,34496,36142,38136,31569,35654,35655,35656,35657,35658,35659,35660,35661,35662,35663,35664,35665,35666,35667,35668,35669,35670,35671,35672,35673,35674,35675,35676,35677,35678,35679,35680,35681,35682,35683,35684,35685,35687,35688,35689,35690,35691,35693,35694,35695,35696,35697,35698,35699,35700,35701,35702,35703,35704,35705,35706,35707,35708,35709,35710,35711,35712,35713,35714,35715,35716,35717,35718,35719,35720,35721,35722,35723,35724,35725,35726,35727,35728,35729,35730,35731,35732,35733,35734,35735,35736,35737,35738,35739,35740,35741,35742,35743,35756,35761,35771,35783,35792,35818,35849,35870,20303,27880,31069,39547,25235,29226,25341,19987,30742,36716,25776,36186,31686,26729,24196,35013,22918,25758,22766,29366,26894,38181,36861,36184,22368,32512,35846,20934,25417,25305,21331,26700,29730,33537,37196,21828,30528,28796,27978,20857,21672,36164,23039,28363,28100,23388,32043,20180,31869,28371,23376,33258,28173,23383,39683,26837,36394,23447,32508,24635,32437,37049,36208,22863,25549,31199,36275,21330,26063,31062,35781,38459,32452,38075,32386,22068,37257,26368,32618,23562,36981,26152,24038,20304,26590,20570,20316,22352,24231,59408,59409,59410,59411,59412,35896,35897,35898,35899,35900,35901,35902,35903,35904,35906,35907,35908,35909,35912,35914,35915,35917,35918,35919,35920,35921,35922,35923,35924,35926,35927,35928,35929,35931,35932,35933,35934,35935,35936,35939,35940,35941,35942,35943,35944,35945,35948,35949,35950,35951,35952,35953,35954,35956,35957,35958,35959,35963,35964,35965,35966,35967,35968,35969,35971,35972,35974,35975,35976,35979,35981,35982,35983,35984,35985,35986,35987,35989,35990,35991,35993,35994,35995,35996,35997,35998,35999,36e3,36001,36002,36003,36004,36005,36006,36007,36008,36009,36010,36011,36012,36013,20109,19980,20800,19984,24319,21317,19989,20120,19998,39730,23404,22121,20008,31162,20031,21269,20039,22829,29243,21358,27664,22239,32996,39319,27603,30590,40727,20022,20127,40720,20060,20073,20115,33416,23387,21868,22031,20164,21389,21405,21411,21413,21422,38757,36189,21274,21493,21286,21294,21310,36188,21350,21347,20994,21e3,21006,21037,21043,21055,21056,21068,21086,21089,21084,33967,21117,21122,21121,21136,21139,20866,32596,20155,20163,20169,20162,20200,20193,20203,20190,20251,20211,20258,20324,20213,20261,20263,20233,20267,20318,20327,25912,20314,20317,36014,36015,36016,36017,36018,36019,36020,36021,36022,36023,36024,36025,36026,36027,36028,36029,36030,36031,36032,36033,36034,36035,36036,36037,36038,36039,36040,36041,36042,36043,36044,36045,36046,36047,36048,36049,36050,36051,36052,36053,36054,36055,36056,36057,36058,36059,36060,36061,36062,36063,36064,36065,36066,36067,36068,36069,36070,36071,36072,36073,36074,36075,36076,36077,36078,36079,36080,36081,36082,36083,36084,36085,36086,36087,36088,36089,36090,36091,36092,36093,36094,36095,36096,36097,36098,36099,36100,36101,36102,36103,36104,36105,36106,36107,36108,36109,20319,20311,20274,20285,20342,20340,20369,20361,20355,20367,20350,20347,20394,20348,20396,20372,20454,20456,20458,20421,20442,20451,20444,20433,20447,20472,20521,20556,20467,20524,20495,20526,20525,20478,20508,20492,20517,20520,20606,20547,20565,20552,20558,20588,20603,20645,20647,20649,20666,20694,20742,20717,20716,20710,20718,20743,20747,20189,27709,20312,20325,20430,40864,27718,31860,20846,24061,40649,39320,20865,22804,21241,21261,35335,21264,20971,22809,20821,20128,20822,20147,34926,34980,20149,33044,35026,31104,23348,34819,32696,20907,20913,20925,20924,36110,36111,36112,36113,36114,36115,36116,36117,36118,36119,36120,36121,36122,36123,36124,36128,36177,36178,36183,36191,36197,36200,36201,36202,36204,36206,36207,36209,36210,36216,36217,36218,36219,36220,36221,36222,36223,36224,36226,36227,36230,36231,36232,36233,36236,36237,36238,36239,36240,36242,36243,36245,36246,36247,36248,36249,36250,36251,36252,36253,36254,36256,36257,36258,36260,36261,36262,36263,36264,36265,36266,36267,36268,36269,36270,36271,36272,36274,36278,36279,36281,36283,36285,36288,36289,36290,36293,36295,36296,36297,36298,36301,36304,36306,36307,36308,20935,20886,20898,20901,35744,35750,35751,35754,35764,35765,35767,35778,35779,35787,35791,35790,35794,35795,35796,35798,35800,35801,35804,35807,35808,35812,35816,35817,35822,35824,35827,35830,35833,35836,35839,35840,35842,35844,35847,35852,35855,35857,35858,35860,35861,35862,35865,35867,35864,35869,35871,35872,35873,35877,35879,35882,35883,35886,35887,35890,35891,35893,35894,21353,21370,38429,38434,38433,38449,38442,38461,38460,38466,38473,38484,38495,38503,38508,38514,38516,38536,38541,38551,38576,37015,37019,37021,37017,37036,37025,37044,37043,37046,37050,36309,36312,36313,36316,36320,36321,36322,36325,36326,36327,36329,36333,36334,36336,36337,36338,36340,36342,36348,36350,36351,36352,36353,36354,36355,36356,36358,36359,36360,36363,36365,36366,36368,36369,36370,36371,36373,36374,36375,36376,36377,36378,36379,36380,36384,36385,36388,36389,36390,36391,36392,36395,36397,36400,36402,36403,36404,36406,36407,36408,36411,36412,36414,36415,36419,36421,36422,36428,36429,36430,36431,36432,36435,36436,36437,36438,36439,36440,36442,36443,36444,36445,36446,36447,36448,36449,36450,36451,36452,36453,36455,36456,36458,36459,36462,36465,37048,37040,37071,37061,37054,37072,37060,37063,37075,37094,37090,37084,37079,37083,37099,37103,37118,37124,37154,37150,37155,37169,37167,37177,37187,37190,21005,22850,21154,21164,21165,21182,21759,21200,21206,21232,21471,29166,30669,24308,20981,20988,39727,21430,24321,30042,24047,22348,22441,22433,22654,22716,22725,22737,22313,22316,22314,22323,22329,22318,22319,22364,22331,22338,22377,22405,22379,22406,22396,22395,22376,22381,22390,22387,22445,22436,22412,22450,22479,22439,22452,22419,22432,22485,22488,22490,22489,22482,22456,22516,22511,22520,22500,22493,36467,36469,36471,36472,36473,36474,36475,36477,36478,36480,36482,36483,36484,36486,36488,36489,36490,36491,36492,36493,36494,36497,36498,36499,36501,36502,36503,36504,36505,36506,36507,36509,36511,36512,36513,36514,36515,36516,36517,36518,36519,36520,36521,36522,36525,36526,36528,36529,36531,36532,36533,36534,36535,36536,36537,36539,36540,36541,36542,36543,36544,36545,36546,36547,36548,36549,36550,36551,36552,36553,36554,36555,36556,36557,36559,36560,36561,36562,36563,36564,36565,36566,36567,36568,36569,36570,36571,36572,36573,36574,36575,36576,36577,36578,36579,36580,22539,22541,22525,22509,22528,22558,22553,22596,22560,22629,22636,22657,22665,22682,22656,39336,40729,25087,33401,33405,33407,33423,33418,33448,33412,33422,33425,33431,33433,33451,33464,33470,33456,33480,33482,33507,33432,33463,33454,33483,33484,33473,33449,33460,33441,33450,33439,33476,33486,33444,33505,33545,33527,33508,33551,33543,33500,33524,33490,33496,33548,33531,33491,33553,33562,33542,33556,33557,33504,33493,33564,33617,33627,33628,33544,33682,33596,33588,33585,33691,33630,33583,33615,33607,33603,33631,33600,33559,33632,33581,33594,33587,33638,33637,36581,36582,36583,36584,36585,36586,36587,36588,36589,36590,36591,36592,36593,36594,36595,36596,36597,36598,36599,36600,36601,36602,36603,36604,36605,36606,36607,36608,36609,36610,36611,36612,36613,36614,36615,36616,36617,36618,36619,36620,36621,36622,36623,36624,36625,36626,36627,36628,36629,36630,36631,36632,36633,36634,36635,36636,36637,36638,36639,36640,36641,36642,36643,36644,36645,36646,36647,36648,36649,36650,36651,36652,36653,36654,36655,36656,36657,36658,36659,36660,36661,36662,36663,36664,36665,36666,36667,36668,36669,36670,36671,36672,36673,36674,36675,36676,33640,33563,33641,33644,33642,33645,33646,33712,33656,33715,33716,33696,33706,33683,33692,33669,33660,33718,33705,33661,33720,33659,33688,33694,33704,33722,33724,33729,33793,33765,33752,22535,33816,33803,33757,33789,33750,33820,33848,33809,33798,33748,33759,33807,33795,33784,33785,33770,33733,33728,33830,33776,33761,33884,33873,33882,33881,33907,33927,33928,33914,33929,33912,33852,33862,33897,33910,33932,33934,33841,33901,33985,33997,34e3,34022,33981,34003,33994,33983,33978,34016,33953,33977,33972,33943,34021,34019,34060,29965,34104,34032,34105,34079,34106,36677,36678,36679,36680,36681,36682,36683,36684,36685,36686,36687,36688,36689,36690,36691,36692,36693,36694,36695,36696,36697,36698,36699,36700,36701,36702,36703,36704,36705,36706,36707,36708,36709,36714,36736,36748,36754,36765,36768,36769,36770,36772,36773,36774,36775,36778,36780,36781,36782,36783,36786,36787,36788,36789,36791,36792,36794,36795,36796,36799,36800,36803,36806,36809,36810,36811,36812,36813,36815,36818,36822,36823,36826,36832,36833,36835,36839,36844,36847,36849,36850,36852,36853,36854,36858,36859,36860,36862,36863,36871,36872,36876,36878,36883,36885,36888,34134,34107,34047,34044,34137,34120,34152,34148,34142,34170,30626,34115,34162,34171,34212,34216,34183,34191,34169,34222,34204,34181,34233,34231,34224,34259,34241,34268,34303,34343,34309,34345,34326,34364,24318,24328,22844,22849,32823,22869,22874,22872,21263,23586,23589,23596,23604,25164,25194,25247,25275,25290,25306,25303,25326,25378,25334,25401,25419,25411,25517,25590,25457,25466,25486,25524,25453,25516,25482,25449,25518,25532,25586,25592,25568,25599,25540,25566,25550,25682,25542,25534,25669,25665,25611,25627,25632,25612,25638,25633,25694,25732,25709,25750,36889,36892,36899,36900,36901,36903,36904,36905,36906,36907,36908,36912,36913,36914,36915,36916,36919,36921,36922,36925,36927,36928,36931,36933,36934,36936,36937,36938,36939,36940,36942,36948,36949,36950,36953,36954,36956,36957,36958,36959,36960,36961,36964,36966,36967,36969,36970,36971,36972,36975,36976,36977,36978,36979,36982,36983,36984,36985,36986,36987,36988,36990,36993,36996,36997,36998,36999,37001,37002,37004,37005,37006,37007,37008,37010,37012,37014,37016,37018,37020,37022,37023,37024,37028,37029,37031,37032,37033,37035,37037,37042,37047,37052,37053,37055,37056,25722,25783,25784,25753,25786,25792,25808,25815,25828,25826,25865,25893,25902,24331,24530,29977,24337,21343,21489,21501,21481,21480,21499,21522,21526,21510,21579,21586,21587,21588,21590,21571,21537,21591,21593,21539,21554,21634,21652,21623,21617,21604,21658,21659,21636,21622,21606,21661,21712,21677,21698,21684,21714,21671,21670,21715,21716,21618,21667,21717,21691,21695,21708,21721,21722,21724,21673,21674,21668,21725,21711,21726,21787,21735,21792,21757,21780,21747,21794,21795,21775,21777,21799,21802,21863,21903,21941,21833,21869,21825,21845,21823,21840,21820,37058,37059,37062,37064,37065,37067,37068,37069,37074,37076,37077,37078,37080,37081,37082,37086,37087,37088,37091,37092,37093,37097,37098,37100,37102,37104,37105,37106,37107,37109,37110,37111,37113,37114,37115,37116,37119,37120,37121,37123,37125,37126,37127,37128,37129,37130,37131,37132,37133,37134,37135,37136,37137,37138,37139,37140,37141,37142,37143,37144,37146,37147,37148,37149,37151,37152,37153,37156,37157,37158,37159,37160,37161,37162,37163,37164,37165,37166,37168,37170,37171,37172,37173,37174,37175,37176,37178,37179,37180,37181,37182,37183,37184,37185,37186,37188,21815,21846,21877,21878,21879,21811,21808,21852,21899,21970,21891,21937,21945,21896,21889,21919,21886,21974,21905,21883,21983,21949,21950,21908,21913,21994,22007,21961,22047,21969,21995,21996,21972,21990,21981,21956,21999,21989,22002,22003,21964,21965,21992,22005,21988,36756,22046,22024,22028,22017,22052,22051,22014,22016,22055,22061,22104,22073,22103,22060,22093,22114,22105,22108,22092,22100,22150,22116,22129,22123,22139,22140,22149,22163,22191,22228,22231,22237,22241,22261,22251,22265,22271,22276,22282,22281,22300,24079,24089,24084,24081,24113,24123,24124,37189,37191,37192,37201,37203,37204,37205,37206,37208,37209,37211,37212,37215,37216,37222,37223,37224,37227,37229,37235,37242,37243,37244,37248,37249,37250,37251,37252,37254,37256,37258,37262,37263,37267,37268,37269,37270,37271,37272,37273,37276,37277,37278,37279,37280,37281,37284,37285,37286,37287,37288,37289,37291,37292,37296,37297,37298,37299,37302,37303,37304,37305,37307,37308,37309,37310,37311,37312,37313,37314,37315,37316,37317,37318,37320,37323,37328,37330,37331,37332,37333,37334,37335,37336,37337,37338,37339,37341,37342,37343,37344,37345,37346,37347,37348,37349,24119,24132,24148,24155,24158,24161,23692,23674,23693,23696,23702,23688,23704,23705,23697,23706,23708,23733,23714,23741,23724,23723,23729,23715,23745,23735,23748,23762,23780,23755,23781,23810,23811,23847,23846,23854,23844,23838,23814,23835,23896,23870,23860,23869,23916,23899,23919,23901,23915,23883,23882,23913,23924,23938,23961,23965,35955,23991,24005,24435,24439,24450,24455,24457,24460,24469,24473,24476,24488,24493,24501,24508,34914,24417,29357,29360,29364,29367,29368,29379,29377,29390,29389,29394,29416,29423,29417,29426,29428,29431,29441,29427,29443,29434,37350,37351,37352,37353,37354,37355,37356,37357,37358,37359,37360,37361,37362,37363,37364,37365,37366,37367,37368,37369,37370,37371,37372,37373,37374,37375,37376,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37387,37388,37389,37390,37391,37392,37393,37394,37395,37396,37397,37398,37399,37400,37401,37402,37403,37404,37405,37406,37407,37408,37409,37410,37411,37412,37413,37414,37415,37416,37417,37418,37419,37420,37421,37422,37423,37424,37425,37426,37427,37428,37429,37430,37431,37432,37433,37434,37435,37436,37437,37438,37439,37440,37441,37442,37443,37444,37445,29435,29463,29459,29473,29450,29470,29469,29461,29474,29497,29477,29484,29496,29489,29520,29517,29527,29536,29548,29551,29566,33307,22821,39143,22820,22786,39267,39271,39272,39273,39274,39275,39276,39284,39287,39293,39296,39300,39303,39306,39309,39312,39313,39315,39316,39317,24192,24209,24203,24214,24229,24224,24249,24245,24254,24243,36179,24274,24273,24283,24296,24298,33210,24516,24521,24534,24527,24579,24558,24580,24545,24548,24574,24581,24582,24554,24557,24568,24601,24629,24614,24603,24591,24589,24617,24619,24586,24639,24609,24696,24697,24699,24698,24642,37446,37447,37448,37449,37450,37451,37452,37453,37454,37455,37456,37457,37458,37459,37460,37461,37462,37463,37464,37465,37466,37467,37468,37469,37470,37471,37472,37473,37474,37475,37476,37477,37478,37479,37480,37481,37482,37483,37484,37485,37486,37487,37488,37489,37490,37491,37493,37494,37495,37496,37497,37498,37499,37500,37501,37502,37503,37504,37505,37506,37507,37508,37509,37510,37511,37512,37513,37514,37515,37516,37517,37519,37520,37521,37522,37523,37524,37525,37526,37527,37528,37529,37530,37531,37532,37533,37534,37535,37536,37537,37538,37539,37540,37541,37542,37543,24682,24701,24726,24730,24749,24733,24707,24722,24716,24731,24812,24763,24753,24797,24792,24774,24794,24756,24864,24870,24853,24867,24820,24832,24846,24875,24906,24949,25004,24980,24999,25015,25044,25077,24541,38579,38377,38379,38385,38387,38389,38390,38396,38398,38403,38404,38406,38408,38410,38411,38412,38413,38415,38418,38421,38422,38423,38425,38426,20012,29247,25109,27701,27732,27740,27722,27811,27781,27792,27796,27788,27752,27753,27764,27766,27782,27817,27856,27860,27821,27895,27896,27889,27863,27826,27872,27862,27898,27883,27886,27825,27859,27887,27902,37544,37545,37546,37547,37548,37549,37551,37552,37553,37554,37555,37556,37557,37558,37559,37560,37561,37562,37563,37564,37565,37566,37567,37568,37569,37570,37571,37572,37573,37574,37575,37577,37578,37579,37580,37581,37582,37583,37584,37585,37586,37587,37588,37589,37590,37591,37592,37593,37594,37595,37596,37597,37598,37599,37600,37601,37602,37603,37604,37605,37606,37607,37608,37609,37610,37611,37612,37613,37614,37615,37616,37617,37618,37619,37620,37621,37622,37623,37624,37625,37626,37627,37628,37629,37630,37631,37632,37633,37634,37635,37636,37637,37638,37639,37640,37641,27961,27943,27916,27971,27976,27911,27908,27929,27918,27947,27981,27950,27957,27930,27983,27986,27988,27955,28049,28015,28062,28064,27998,28051,28052,27996,28e3,28028,28003,28186,28103,28101,28126,28174,28095,28128,28177,28134,28125,28121,28182,28075,28172,28078,28203,28270,28238,28267,28338,28255,28294,28243,28244,28210,28197,28228,28383,28337,28312,28384,28461,28386,28325,28327,28349,28347,28343,28375,28340,28367,28303,28354,28319,28514,28486,28487,28452,28437,28409,28463,28470,28491,28532,28458,28425,28457,28553,28557,28556,28536,28530,28540,28538,28625,37642,37643,37644,37645,37646,37647,37648,37649,37650,37651,37652,37653,37654,37655,37656,37657,37658,37659,37660,37661,37662,37663,37664,37665,37666,37667,37668,37669,37670,37671,37672,37673,37674,37675,37676,37677,37678,37679,37680,37681,37682,37683,37684,37685,37686,37687,37688,37689,37690,37691,37692,37693,37695,37696,37697,37698,37699,37700,37701,37702,37703,37704,37705,37706,37707,37708,37709,37710,37711,37712,37713,37714,37715,37716,37717,37718,37719,37720,37721,37722,37723,37724,37725,37726,37727,37728,37729,37730,37731,37732,37733,37734,37735,37736,37737,37739,28617,28583,28601,28598,28610,28641,28654,28638,28640,28655,28698,28707,28699,28729,28725,28751,28766,23424,23428,23445,23443,23461,23480,29999,39582,25652,23524,23534,35120,23536,36423,35591,36790,36819,36821,36837,36846,36836,36841,36838,36851,36840,36869,36868,36875,36902,36881,36877,36886,36897,36917,36918,36909,36911,36932,36945,36946,36944,36968,36952,36962,36955,26297,36980,36989,36994,37e3,36995,37003,24400,24407,24406,24408,23611,21675,23632,23641,23409,23651,23654,32700,24362,24361,24365,33396,24380,39739,23662,22913,22915,22925,22953,22954,22947,37740,37741,37742,37743,37744,37745,37746,37747,37748,37749,37750,37751,37752,37753,37754,37755,37756,37757,37758,37759,37760,37761,37762,37763,37764,37765,37766,37767,37768,37769,37770,37771,37772,37773,37774,37776,37777,37778,37779,37780,37781,37782,37783,37784,37785,37786,37787,37788,37789,37790,37791,37792,37793,37794,37795,37796,37797,37798,37799,37800,37801,37802,37803,37804,37805,37806,37807,37808,37809,37810,37811,37812,37813,37814,37815,37816,37817,37818,37819,37820,37821,37822,37823,37824,37825,37826,37827,37828,37829,37830,37831,37832,37833,37835,37836,37837,22935,22986,22955,22942,22948,22994,22962,22959,22999,22974,23045,23046,23005,23048,23011,23e3,23033,23052,23049,23090,23092,23057,23075,23059,23104,23143,23114,23125,23100,23138,23157,33004,23210,23195,23159,23162,23230,23275,23218,23250,23252,23224,23264,23267,23281,23254,23270,23256,23260,23305,23319,23318,23346,23351,23360,23573,23580,23386,23397,23411,23377,23379,23394,39541,39543,39544,39546,39551,39549,39552,39553,39557,39560,39562,39568,39570,39571,39574,39576,39579,39580,39581,39583,39584,39586,39587,39589,39591,32415,32417,32419,32421,32424,32425,37838,37839,37840,37841,37842,37843,37844,37845,37847,37848,37849,37850,37851,37852,37853,37854,37855,37856,37857,37858,37859,37860,37861,37862,37863,37864,37865,37866,37867,37868,37869,37870,37871,37872,37873,37874,37875,37876,37877,37878,37879,37880,37881,37882,37883,37884,37885,37886,37887,37888,37889,37890,37891,37892,37893,37894,37895,37896,37897,37898,37899,37900,37901,37902,37903,37904,37905,37906,37907,37908,37909,37910,37911,37912,37913,37914,37915,37916,37917,37918,37919,37920,37921,37922,37923,37924,37925,37926,37927,37928,37929,37930,37931,37932,37933,37934,32429,32432,32446,32448,32449,32450,32457,32459,32460,32464,32468,32471,32475,32480,32481,32488,32491,32494,32495,32497,32498,32525,32502,32506,32507,32510,32513,32514,32515,32519,32520,32523,32524,32527,32529,32530,32535,32537,32540,32539,32543,32545,32546,32547,32548,32549,32550,32551,32554,32555,32556,32557,32559,32560,32561,32562,32563,32565,24186,30079,24027,30014,37013,29582,29585,29614,29602,29599,29647,29634,29649,29623,29619,29632,29641,29640,29669,29657,39036,29706,29673,29671,29662,29626,29682,29711,29738,29787,29734,29733,29736,29744,29742,29740,37935,37936,37937,37938,37939,37940,37941,37942,37943,37944,37945,37946,37947,37948,37949,37951,37952,37953,37954,37955,37956,37957,37958,37959,37960,37961,37962,37963,37964,37965,37966,37967,37968,37969,37970,37971,37972,37973,37974,37975,37976,37977,37978,37979,37980,37981,37982,37983,37984,37985,37986,37987,37988,37989,37990,37991,37992,37993,37994,37996,37997,37998,37999,38e3,38001,38002,38003,38004,38005,38006,38007,38008,38009,38010,38011,38012,38013,38014,38015,38016,38017,38018,38019,38020,38033,38038,38040,38087,38095,38099,38100,38106,38118,38139,38172,38176,29723,29722,29761,29788,29783,29781,29785,29815,29805,29822,29852,29838,29824,29825,29831,29835,29854,29864,29865,29840,29863,29906,29882,38890,38891,38892,26444,26451,26462,26440,26473,26533,26503,26474,26483,26520,26535,26485,26536,26526,26541,26507,26487,26492,26608,26633,26584,26634,26601,26544,26636,26585,26549,26586,26547,26589,26624,26563,26552,26594,26638,26561,26621,26674,26675,26720,26721,26702,26722,26692,26724,26755,26653,26709,26726,26689,26727,26688,26686,26698,26697,26665,26805,26767,26740,26743,26771,26731,26818,26990,26876,26911,26912,26873,38183,38195,38205,38211,38216,38219,38229,38234,38240,38254,38260,38261,38263,38264,38265,38266,38267,38268,38269,38270,38272,38273,38274,38275,38276,38277,38278,38279,38280,38281,38282,38283,38284,38285,38286,38287,38288,38289,38290,38291,38292,38293,38294,38295,38296,38297,38298,38299,38300,38301,38302,38303,38304,38305,38306,38307,38308,38309,38310,38311,38312,38313,38314,38315,38316,38317,38318,38319,38320,38321,38322,38323,38324,38325,38326,38327,38328,38329,38330,38331,38332,38333,38334,38335,38336,38337,38338,38339,38340,38341,38342,38343,38344,38345,38346,38347,26916,26864,26891,26881,26967,26851,26896,26993,26937,26976,26946,26973,27012,26987,27008,27032,27e3,26932,27084,27015,27016,27086,27017,26982,26979,27001,27035,27047,27067,27051,27053,27092,27057,27073,27082,27103,27029,27104,27021,27135,27183,27117,27159,27160,27237,27122,27204,27198,27296,27216,27227,27189,27278,27257,27197,27176,27224,27260,27281,27280,27305,27287,27307,29495,29522,27521,27522,27527,27524,27538,27539,27533,27546,27547,27553,27562,36715,36717,36721,36722,36723,36725,36726,36728,36727,36729,36730,36732,36734,36737,36738,36740,36743,36747,38348,38349,38350,38351,38352,38353,38354,38355,38356,38357,38358,38359,38360,38361,38362,38363,38364,38365,38366,38367,38368,38369,38370,38371,38372,38373,38374,38375,38380,38399,38407,38419,38424,38427,38430,38432,38435,38436,38437,38438,38439,38440,38441,38443,38444,38445,38447,38448,38455,38456,38457,38458,38462,38465,38467,38474,38478,38479,38481,38482,38483,38486,38487,38488,38489,38490,38492,38493,38494,38496,38499,38501,38502,38507,38509,38510,38511,38512,38513,38515,38520,38521,38522,38523,38524,38525,38526,38527,38528,38529,38530,38531,38532,38535,38537,38538,36749,36750,36751,36760,36762,36558,25099,25111,25115,25119,25122,25121,25125,25124,25132,33255,29935,29940,29951,29967,29969,29971,25908,26094,26095,26096,26122,26137,26482,26115,26133,26112,28805,26359,26141,26164,26161,26166,26165,32774,26207,26196,26177,26191,26198,26209,26199,26231,26244,26252,26279,26269,26302,26331,26332,26342,26345,36146,36147,36150,36155,36157,36160,36165,36166,36168,36169,36167,36173,36181,36185,35271,35274,35275,35276,35278,35279,35280,35281,29294,29343,29277,29286,29295,29310,29311,29316,29323,29325,29327,29330,25352,25394,25520,38540,38542,38545,38546,38547,38549,38550,38554,38555,38557,38558,38559,38560,38561,38562,38563,38564,38565,38566,38568,38569,38570,38571,38572,38573,38574,38575,38577,38578,38580,38581,38583,38584,38586,38587,38591,38594,38595,38600,38602,38603,38608,38609,38611,38612,38614,38615,38616,38617,38618,38619,38620,38621,38622,38623,38625,38626,38627,38628,38629,38630,38631,38635,38636,38637,38638,38640,38641,38642,38644,38645,38648,38650,38651,38652,38653,38655,38658,38659,38661,38666,38667,38668,38672,38673,38674,38676,38677,38679,38680,38681,38682,38683,38685,38687,38688,25663,25816,32772,27626,27635,27645,27637,27641,27653,27655,27654,27661,27669,27672,27673,27674,27681,27689,27684,27690,27698,25909,25941,25963,29261,29266,29270,29232,34402,21014,32927,32924,32915,32956,26378,32957,32945,32939,32941,32948,32951,32999,33e3,33001,33002,32987,32962,32964,32985,32973,32983,26384,32989,33003,33009,33012,33005,33037,33038,33010,33020,26389,33042,35930,33078,33054,33068,33048,33074,33096,33100,33107,33140,33113,33114,33137,33120,33129,33148,33149,33133,33127,22605,23221,33160,33154,33169,28373,33187,33194,33228,26406,33226,33211,38689,38690,38691,38692,38693,38694,38695,38696,38697,38699,38700,38702,38703,38705,38707,38708,38709,38710,38711,38714,38715,38716,38717,38719,38720,38721,38722,38723,38724,38725,38726,38727,38728,38729,38730,38731,38732,38733,38734,38735,38736,38737,38740,38741,38743,38744,38746,38748,38749,38751,38755,38756,38758,38759,38760,38762,38763,38764,38765,38766,38767,38768,38769,38770,38773,38775,38776,38777,38778,38779,38781,38782,38783,38784,38785,38786,38787,38788,38790,38791,38792,38793,38794,38796,38798,38799,38800,38803,38805,38806,38807,38809,38810,38811,38812,38813,33217,33190,27428,27447,27449,27459,27462,27481,39121,39122,39123,39125,39129,39130,27571,24384,27586,35315,26e3,40785,26003,26044,26054,26052,26051,26060,26062,26066,26070,28800,28828,28822,28829,28859,28864,28855,28843,28849,28904,28874,28944,28947,28950,28975,28977,29043,29020,29032,28997,29042,29002,29048,29050,29080,29107,29109,29096,29088,29152,29140,29159,29177,29213,29224,28780,28952,29030,29113,25150,25149,25155,25160,25161,31035,31040,31046,31049,31067,31068,31059,31066,31074,31063,31072,31087,31079,31098,31109,31114,31130,31143,31155,24529,24528,38814,38815,38817,38818,38820,38821,38822,38823,38824,38825,38826,38828,38830,38832,38833,38835,38837,38838,38839,38840,38841,38842,38843,38844,38845,38846,38847,38848,38849,38850,38851,38852,38853,38854,38855,38856,38857,38858,38859,38860,38861,38862,38863,38864,38865,38866,38867,38868,38869,38870,38871,38872,38873,38874,38875,38876,38877,38878,38879,38880,38881,38882,38883,38884,38885,38888,38894,38895,38896,38897,38898,38900,38903,38904,38905,38906,38907,38908,38909,38910,38911,38912,38913,38914,38915,38916,38917,38918,38919,38920,38921,38922,38923,38924,38925,38926,24636,24669,24666,24679,24641,24665,24675,24747,24838,24845,24925,25001,24989,25035,25041,25094,32896,32895,27795,27894,28156,30710,30712,30720,30729,30743,30744,30737,26027,30765,30748,30749,30777,30778,30779,30751,30780,30757,30764,30755,30761,30798,30829,30806,30807,30758,30800,30791,30796,30826,30875,30867,30874,30855,30876,30881,30883,30898,30905,30885,30932,30937,30921,30956,30962,30981,30964,30995,31012,31006,31028,40859,40697,40699,40700,30449,30468,30477,30457,30471,30472,30490,30498,30489,30509,30502,30517,30520,30544,30545,30535,30531,30554,30568,38927,38928,38929,38930,38931,38932,38933,38934,38935,38936,38937,38938,38939,38940,38941,38942,38943,38944,38945,38946,38947,38948,38949,38950,38951,38952,38953,38954,38955,38956,38957,38958,38959,38960,38961,38962,38963,38964,38965,38966,38967,38968,38969,38970,38971,38972,38973,38974,38975,38976,38977,38978,38979,38980,38981,38982,38983,38984,38985,38986,38987,38988,38989,38990,38991,38992,38993,38994,38995,38996,38997,38998,38999,39e3,39001,39002,39003,39004,39005,39006,39007,39008,39009,39010,39011,39012,39013,39014,39015,39016,39017,39018,39019,39020,39021,39022,30562,30565,30591,30605,30589,30592,30604,30609,30623,30624,30640,30645,30653,30010,30016,30030,30027,30024,30043,30066,30073,30083,32600,32609,32607,35400,32616,32628,32625,32633,32641,32638,30413,30437,34866,38021,38022,38023,38027,38026,38028,38029,38031,38032,38036,38039,38037,38042,38043,38044,38051,38052,38059,38058,38061,38060,38063,38064,38066,38068,38070,38071,38072,38073,38074,38076,38077,38079,38084,38088,38089,38090,38091,38092,38093,38094,38096,38097,38098,38101,38102,38103,38105,38104,38107,38110,38111,38112,38114,38116,38117,38119,38120,38122,39023,39024,39025,39026,39027,39028,39051,39054,39058,39061,39065,39075,39080,39081,39082,39083,39084,39085,39086,39087,39088,39089,39090,39091,39092,39093,39094,39095,39096,39097,39098,39099,39100,39101,39102,39103,39104,39105,39106,39107,39108,39109,39110,39111,39112,39113,39114,39115,39116,39117,39119,39120,39124,39126,39127,39131,39132,39133,39136,39137,39138,39139,39140,39141,39142,39145,39146,39147,39148,39149,39150,39151,39152,39153,39154,39155,39156,39157,39158,39159,39160,39161,39162,39163,39164,39165,39166,39167,39168,39169,39170,39171,39172,39173,39174,39175,38121,38123,38126,38127,38131,38132,38133,38135,38137,38140,38141,38143,38147,38146,38150,38151,38153,38154,38157,38158,38159,38162,38163,38164,38165,38166,38168,38171,38173,38174,38175,38178,38186,38187,38185,38188,38193,38194,38196,38198,38199,38200,38204,38206,38207,38210,38197,38212,38213,38214,38217,38220,38222,38223,38226,38227,38228,38230,38231,38232,38233,38235,38238,38239,38237,38241,38242,38244,38245,38246,38247,38248,38249,38250,38251,38252,38255,38257,38258,38259,38202,30695,30700,38601,31189,31213,31203,31211,31238,23879,31235,31234,31262,31252,39176,39177,39178,39179,39180,39182,39183,39185,39186,39187,39188,39189,39190,39191,39192,39193,39194,39195,39196,39197,39198,39199,39200,39201,39202,39203,39204,39205,39206,39207,39208,39209,39210,39211,39212,39213,39215,39216,39217,39218,39219,39220,39221,39222,39223,39224,39225,39226,39227,39228,39229,39230,39231,39232,39233,39234,39235,39236,39237,39238,39239,39240,39241,39242,39243,39244,39245,39246,39247,39248,39249,39250,39251,39254,39255,39256,39257,39258,39259,39260,39261,39262,39263,39264,39265,39266,39268,39270,39283,39288,39289,39291,39294,39298,39299,39305,31289,31287,31313,40655,39333,31344,30344,30350,30355,30361,30372,29918,29920,29996,40480,40482,40488,40489,40490,40491,40492,40498,40497,40502,40504,40503,40505,40506,40510,40513,40514,40516,40518,40519,40520,40521,40523,40524,40526,40529,40533,40535,40538,40539,40540,40542,40547,40550,40551,40552,40553,40554,40555,40556,40561,40557,40563,30098,30100,30102,30112,30109,30124,30115,30131,30132,30136,30148,30129,30128,30147,30146,30166,30157,30179,30184,30182,30180,30187,30183,30211,30193,30204,30207,30224,30208,30213,30220,30231,30218,30245,30232,30229,30233,39308,39310,39322,39323,39324,39325,39326,39327,39328,39329,39330,39331,39332,39334,39335,39337,39338,39339,39340,39341,39342,39343,39344,39345,39346,39347,39348,39349,39350,39351,39352,39353,39354,39355,39356,39357,39358,39359,39360,39361,39362,39363,39364,39365,39366,39367,39368,39369,39370,39371,39372,39373,39374,39375,39376,39377,39378,39379,39380,39381,39382,39383,39384,39385,39386,39387,39388,39389,39390,39391,39392,39393,39394,39395,39396,39397,39398,39399,39400,39401,39402,39403,39404,39405,39406,39407,39408,39409,39410,39411,39412,39413,39414,39415,39416,39417,30235,30268,30242,30240,30272,30253,30256,30271,30261,30275,30270,30259,30285,30302,30292,30300,30294,30315,30319,32714,31462,31352,31353,31360,31366,31368,31381,31398,31392,31404,31400,31405,31411,34916,34921,34930,34941,34943,34946,34978,35014,34999,35004,35017,35042,35022,35043,35045,35057,35098,35068,35048,35070,35056,35105,35097,35091,35099,35082,35124,35115,35126,35137,35174,35195,30091,32997,30386,30388,30684,32786,32788,32790,32796,32800,32802,32805,32806,32807,32809,32808,32817,32779,32821,32835,32838,32845,32850,32873,32881,35203,39032,39040,39043,39418,39419,39420,39421,39422,39423,39424,39425,39426,39427,39428,39429,39430,39431,39432,39433,39434,39435,39436,39437,39438,39439,39440,39441,39442,39443,39444,39445,39446,39447,39448,39449,39450,39451,39452,39453,39454,39455,39456,39457,39458,39459,39460,39461,39462,39463,39464,39465,39466,39467,39468,39469,39470,39471,39472,39473,39474,39475,39476,39477,39478,39479,39480,39481,39482,39483,39484,39485,39486,39487,39488,39489,39490,39491,39492,39493,39494,39495,39496,39497,39498,39499,39500,39501,39502,39503,39504,39505,39506,39507,39508,39509,39510,39511,39512,39513,39049,39052,39053,39055,39060,39066,39067,39070,39071,39073,39074,39077,39078,34381,34388,34412,34414,34431,34426,34428,34427,34472,34445,34443,34476,34461,34471,34467,34474,34451,34473,34486,34500,34485,34510,34480,34490,34481,34479,34505,34511,34484,34537,34545,34546,34541,34547,34512,34579,34526,34548,34527,34520,34513,34563,34567,34552,34568,34570,34573,34569,34595,34619,34590,34597,34606,34586,34622,34632,34612,34609,34601,34615,34623,34690,34594,34685,34686,34683,34656,34672,34636,34670,34699,34643,34659,34684,34660,34649,34661,34707,34735,34728,34770,39514,39515,39516,39517,39518,39519,39520,39521,39522,39523,39524,39525,39526,39527,39528,39529,39530,39531,39538,39555,39561,39565,39566,39572,39573,39577,39590,39593,39594,39595,39596,39597,39598,39599,39602,39603,39604,39605,39609,39611,39613,39614,39615,39619,39620,39622,39623,39624,39625,39626,39629,39630,39631,39632,39634,39636,39637,39638,39639,39641,39642,39643,39644,39645,39646,39648,39650,39651,39652,39653,39655,39656,39657,39658,39660,39662,39664,39665,39666,39667,39668,39669,39670,39671,39672,39674,39676,39677,39678,39679,39680,39681,39682,39684,39685,39686,34758,34696,34693,34733,34711,34691,34731,34789,34732,34741,34739,34763,34771,34749,34769,34752,34762,34779,34794,34784,34798,34838,34835,34814,34826,34843,34849,34873,34876,32566,32578,32580,32581,33296,31482,31485,31496,31491,31492,31509,31498,31531,31503,31559,31544,31530,31513,31534,31537,31520,31525,31524,31539,31550,31518,31576,31578,31557,31605,31564,31581,31584,31598,31611,31586,31602,31601,31632,31654,31655,31672,31660,31645,31656,31621,31658,31644,31650,31659,31668,31697,31681,31692,31709,31706,31717,31718,31722,31756,31742,31740,31759,31766,31755,39687,39689,39690,39691,39692,39693,39694,39696,39697,39698,39700,39701,39702,39703,39704,39705,39706,39707,39708,39709,39710,39712,39713,39714,39716,39717,39718,39719,39720,39721,39722,39723,39724,39725,39726,39728,39729,39731,39732,39733,39734,39735,39736,39737,39738,39741,39742,39743,39744,39750,39754,39755,39756,39758,39760,39762,39763,39765,39766,39767,39768,39769,39770,39771,39772,39773,39774,39775,39776,39777,39778,39779,39780,39781,39782,39783,39784,39785,39786,39787,39788,39789,39790,39791,39792,39793,39794,39795,39796,39797,39798,39799,39800,39801,39802,39803,31775,31786,31782,31800,31809,31808,33278,33281,33282,33284,33260,34884,33313,33314,33315,33325,33327,33320,33323,33336,33339,33331,33332,33342,33348,33353,33355,33359,33370,33375,33384,34942,34949,34952,35032,35039,35166,32669,32671,32679,32687,32688,32690,31868,25929,31889,31901,31900,31902,31906,31922,31932,31933,31937,31943,31948,31949,31944,31941,31959,31976,33390,26280,32703,32718,32725,32741,32737,32742,32745,32750,32755,31992,32119,32166,32174,32327,32411,40632,40628,36211,36228,36244,36241,36273,36199,36205,35911,35913,37194,37200,37198,37199,37220,39804,39805,39806,39807,39808,39809,39810,39811,39812,39813,39814,39815,39816,39817,39818,39819,39820,39821,39822,39823,39824,39825,39826,39827,39828,39829,39830,39831,39832,39833,39834,39835,39836,39837,39838,39839,39840,39841,39842,39843,39844,39845,39846,39847,39848,39849,39850,39851,39852,39853,39854,39855,39856,39857,39858,39859,39860,39861,39862,39863,39864,39865,39866,39867,39868,39869,39870,39871,39872,39873,39874,39875,39876,39877,39878,39879,39880,39881,39882,39883,39884,39885,39886,39887,39888,39889,39890,39891,39892,39893,39894,39895,39896,39897,39898,39899,37218,37217,37232,37225,37231,37245,37246,37234,37236,37241,37260,37253,37264,37261,37265,37282,37283,37290,37293,37294,37295,37301,37300,37306,35925,40574,36280,36331,36357,36441,36457,36277,36287,36284,36282,36292,36310,36311,36314,36318,36302,36303,36315,36294,36332,36343,36344,36323,36345,36347,36324,36361,36349,36372,36381,36383,36396,36398,36387,36399,36410,36416,36409,36405,36413,36401,36425,36417,36418,36433,36434,36426,36464,36470,36476,36463,36468,36485,36495,36500,36496,36508,36510,35960,35970,35978,35973,35992,35988,26011,35286,35294,35290,35292,39900,39901,39902,39903,39904,39905,39906,39907,39908,39909,39910,39911,39912,39913,39914,39915,39916,39917,39918,39919,39920,39921,39922,39923,39924,39925,39926,39927,39928,39929,39930,39931,39932,39933,39934,39935,39936,39937,39938,39939,39940,39941,39942,39943,39944,39945,39946,39947,39948,39949,39950,39951,39952,39953,39954,39955,39956,39957,39958,39959,39960,39961,39962,39963,39964,39965,39966,39967,39968,39969,39970,39971,39972,39973,39974,39975,39976,39977,39978,39979,39980,39981,39982,39983,39984,39985,39986,39987,39988,39989,39990,39991,39992,39993,39994,39995,35301,35307,35311,35390,35622,38739,38633,38643,38639,38662,38657,38664,38671,38670,38698,38701,38704,38718,40832,40835,40837,40838,40839,40840,40841,40842,40844,40702,40715,40717,38585,38588,38589,38606,38610,30655,38624,37518,37550,37576,37694,37738,37834,37775,37950,37995,40063,40066,40069,40070,40071,40072,31267,40075,40078,40080,40081,40082,40084,40085,40090,40091,40094,40095,40096,40097,40098,40099,40101,40102,40103,40104,40105,40107,40109,40110,40112,40113,40114,40115,40116,40117,40118,40119,40122,40123,40124,40125,40132,40133,40134,40135,40138,40139,39996,39997,39998,39999,4e4,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,40011,40012,40013,40014,40015,40016,40017,40018,40019,40020,40021,40022,40023,40024,40025,40026,40027,40028,40029,40030,40031,40032,40033,40034,40035,40036,40037,40038,40039,40040,40041,40042,40043,40044,40045,40046,40047,40048,40049,40050,40051,40052,40053,40054,40055,40056,40057,40058,40059,40061,40062,40064,40067,40068,40073,40074,40076,40079,40083,40086,40087,40088,40089,40093,40106,40108,40111,40121,40126,40127,40128,40129,40130,40136,40137,40145,40146,40154,40155,40160,40161,40140,40141,40142,40143,40144,40147,40148,40149,40151,40152,40153,40156,40157,40159,40162,38780,38789,38801,38802,38804,38831,38827,38819,38834,38836,39601,39600,39607,40536,39606,39610,39612,39617,39616,39621,39618,39627,39628,39633,39749,39747,39751,39753,39752,39757,39761,39144,39181,39214,39253,39252,39647,39649,39654,39663,39659,39675,39661,39673,39688,39695,39699,39711,39715,40637,40638,32315,40578,40583,40584,40587,40594,37846,40605,40607,40667,40668,40669,40672,40671,40674,40681,40679,40677,40682,40687,40738,40748,40751,40761,40759,40765,40766,40772,40163,40164,40165,40166,40167,40168,40169,40170,40171,40172,40173,40174,40175,40176,40177,40178,40179,40180,40181,40182,40183,40184,40185,40186,40187,40188,40189,40190,40191,40192,40193,40194,40195,40196,40197,40198,40199,40200,40201,40202,40203,40204,40205,40206,40207,40208,40209,40210,40211,40212,40213,40214,40215,40216,40217,40218,40219,40220,40221,40222,40223,40224,40225,40226,40227,40228,40229,40230,40231,40232,40233,40234,40235,40236,40237,40238,40239,40240,40241,40242,40243,40244,40245,40246,40247,40248,40249,40250,40251,40252,40253,40254,40255,40256,40257,40258,57908,57909,57910,57911,57912,57913,57914,57915,57916,57917,57918,57919,57920,57921,57922,57923,57924,57925,57926,57927,57928,57929,57930,57931,57932,57933,57934,57935,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57950,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,57968,57969,57970,57971,57972,57973,57974,57975,57976,57977,57978,57979,57980,57981,57982,57983,57984,57985,57986,57987,57988,57989,57990,57991,57992,57993,57994,57995,57996,57997,57998,57999,58e3,58001,40259,40260,40261,40262,40263,40264,40265,40266,40267,40268,40269,40270,40271,40272,40273,40274,40275,40276,40277,40278,40279,40280,40281,40282,40283,40284,40285,40286,40287,40288,40289,40290,40291,40292,40293,40294,40295,40296,40297,40298,40299,40300,40301,40302,40303,40304,40305,40306,40307,40308,40309,40310,40311,40312,40313,40314,40315,40316,40317,40318,40319,40320,40321,40322,40323,40324,40325,40326,40327,40328,40329,40330,40331,40332,40333,40334,40335,40336,40337,40338,40339,40340,40341,40342,40343,40344,40345,40346,40347,40348,40349,40350,40351,40352,40353,40354,58002,58003,58004,58005,58006,58007,58008,58009,58010,58011,58012,58013,58014,58015,58016,58017,58018,58019,58020,58021,58022,58023,58024,58025,58026,58027,58028,58029,58030,58031,58032,58033,58034,58035,58036,58037,58038,58039,58040,58041,58042,58043,58044,58045,58046,58047,58048,58049,58050,58051,58052,58053,58054,58055,58056,58057,58058,58059,58060,58061,58062,58063,58064,58065,58066,58067,58068,58069,58070,58071,58072,58073,58074,58075,58076,58077,58078,58079,58080,58081,58082,58083,58084,58085,58086,58087,58088,58089,58090,58091,58092,58093,58094,58095,40355,40356,40357,40358,40359,40360,40361,40362,40363,40364,40365,40366,40367,40368,40369,40370,40371,40372,40373,40374,40375,40376,40377,40378,40379,40380,40381,40382,40383,40384,40385,40386,40387,40388,40389,40390,40391,40392,40393,40394,40395,40396,40397,40398,40399,40400,40401,40402,40403,40404,40405,40406,40407,40408,40409,40410,40411,40412,40413,40414,40415,40416,40417,40418,40419,40420,40421,40422,40423,40424,40425,40426,40427,40428,40429,40430,40431,40432,40433,40434,40435,40436,40437,40438,40439,40440,40441,40442,40443,40444,40445,40446,40447,40448,40449,40450,58096,58097,58098,58099,58100,58101,58102,58103,58104,58105,58106,58107,58108,58109,58110,58111,58112,58113,58114,58115,58116,58117,58118,58119,58120,58121,58122,58123,58124,58125,58126,58127,58128,58129,58130,58131,58132,58133,58134,58135,58136,58137,58138,58139,58140,58141,58142,58143,58144,58145,58146,58147,58148,58149,58150,58151,58152,58153,58154,58155,58156,58157,58158,58159,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58176,58177,58178,58179,58180,58181,58182,58183,58184,58185,58186,58187,58188,58189,40451,40452,40453,40454,40455,40456,40457,40458,40459,40460,40461,40462,40463,40464,40465,40466,40467,40468,40469,40470,40471,40472,40473,40474,40475,40476,40477,40478,40484,40487,40494,40496,40500,40507,40508,40512,40525,40528,40530,40531,40532,40534,40537,40541,40543,40544,40545,40546,40549,40558,40559,40562,40564,40565,40566,40567,40568,40569,40570,40571,40572,40573,40576,40577,40579,40580,40581,40582,40585,40586,40588,40589,40590,40591,40592,40593,40596,40597,40598,40599,40600,40601,40602,40603,40604,40606,40608,40609,40610,40611,40612,40613,40615,40616,40617,40618,58190,58191,58192,58193,58194,58195,58196,58197,58198,58199,58200,58201,58202,58203,58204,58205,58206,58207,58208,58209,58210,58211,58212,58213,58214,58215,58216,58217,58218,58219,58220,58221,58222,58223,58224,58225,58226,58227,58228,58229,58230,58231,58232,58233,58234,58235,58236,58237,58238,58239,58240,58241,58242,58243,58244,58245,58246,58247,58248,58249,58250,58251,58252,58253,58254,58255,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58272,58273,58274,58275,58276,58277,58278,58279,58280,58281,58282,58283,40619,40620,40621,40622,40623,40624,40625,40626,40627,40629,40630,40631,40633,40634,40636,40639,40640,40641,40642,40643,40645,40646,40647,40648,40650,40651,40652,40656,40658,40659,40661,40662,40663,40665,40666,40670,40673,40675,40676,40678,40680,40683,40684,40685,40686,40688,40689,40690,40691,40692,40693,40694,40695,40696,40698,40701,40703,40704,40705,40706,40707,40708,40709,40710,40711,40712,40713,40714,40716,40719,40721,40722,40724,40725,40726,40728,40730,40731,40732,40733,40734,40735,40737,40739,40740,40741,40742,40743,40744,40745,40746,40747,40749,40750,40752,40753,58284,58285,58286,58287,58288,58289,58290,58291,58292,58293,58294,58295,58296,58297,58298,58299,58300,58301,58302,58303,58304,58305,58306,58307,58308,58309,58310,58311,58312,58313,58314,58315,58316,58317,58318,58319,58320,58321,58322,58323,58324,58325,58326,58327,58328,58329,58330,58331,58332,58333,58334,58335,58336,58337,58338,58339,58340,58341,58342,58343,58344,58345,58346,58347,58348,58349,58350,58351,58352,58353,58354,58355,58356,58357,58358,58359,58360,58361,58362,58363,58364,58365,58366,58367,58368,58369,58370,58371,58372,58373,58374,58375,58376,58377,40754,40755,40756,40757,40758,40760,40762,40764,40767,40768,40769,40770,40771,40773,40774,40775,40776,40777,40778,40779,40780,40781,40782,40783,40786,40787,40788,40789,40790,40791,40792,40793,40794,40795,40796,40797,40798,40799,40800,40801,40802,40803,40804,40805,40806,40807,40808,40809,40810,40811,40812,40813,40814,40815,40816,40817,40818,40819,40820,40821,40822,40823,40824,40825,40826,40827,40828,40829,40830,40833,40834,40845,40846,40847,40848,40849,40850,40851,40852,40853,40854,40855,40856,40860,40861,40862,40865,40866,40867,40868,40869,63788,63865,63893,63975,63985,58378,58379,58380,58381,58382,58383,58384,58385,58386,58387,58388,58389,58390,58391,58392,58393,58394,58395,58396,58397,58398,58399,58400,58401,58402,58403,58404,58405,58406,58407,58408,58409,58410,58411,58412,58413,58414,58415,58416,58417,58418,58419,58420,58421,58422,58423,58424,58425,58426,58427,58428,58429,58430,58431,58432,58433,58434,58435,58436,58437,58438,58439,58440,58441,58442,58443,58444,58445,58446,58447,58448,58449,58450,58451,58452,58453,58454,58455,58456,58457,58458,58459,58460,58461,58462,58463,58464,58465,58466,58467,58468,58469,58470,58471,64012,64013,64014,64015,64017,64019,64020,64024,64031,64032,64033,64035,64036,64039,64040,64041,11905,59414,59415,59416,11908,13427,13383,11912,11915,59422,13726,13850,13838,11916,11927,14702,14616,59430,14799,14815,14963,14800,59435,59436,15182,15470,15584,11943,59441,59442,11946,16470,16735,11950,17207,11955,11958,11959,59451,17329,17324,11963,17373,17622,18017,17996,59459,18211,18217,18300,18317,11978,18759,18810,18813,18818,18819,18821,18822,18847,18843,18871,18870,59476,59477,19619,19615,19616,19617,19575,19618,19731,19732,19733,19734,19735,19736,19737,19886,59492,58472,58473,58474,58475,58476,58477,58478,58479,58480,58481,58482,58483,58484,58485,58486,58487,58488,58489,58490,58491,58492,58493,58494,58495,58496,58497,58498,58499,58500,58501,58502,58503,58504,58505,58506,58507,58508,58509,58510,58511,58512,58513,58514,58515,58516,58517,58518,58519,58520,58521,58522,58523,58524,58525,58526,58527,58528,58529,58530,58531,58532,58533,58534,58535,58536,58537,58538,58539,58540,58541,58542,58543,58544,58545,58546,58547,58548,58549,58550,58551,58552,58553,58554,58555,58556,58557,58558,58559,58560,58561,58562,58563,58564,58565],"gb18030-ranges":[[0,128],[36,165],[38,169],[45,178],[50,184],[81,216],[89,226],[95,235],[96,238],[100,244],[103,248],[104,251],[105,253],[109,258],[126,276],[133,284],[148,300],[172,325],[175,329],[179,334],[208,364],[306,463],[307,465],[308,467],[309,469],[310,471],[311,473],[312,475],[313,477],[341,506],[428,594],[443,610],[544,712],[545,716],[558,730],[741,930],[742,938],[749,962],[750,970],[805,1026],[819,1104],[820,1106],[7922,8209],[7924,8215],[7925,8218],[7927,8222],[7934,8231],[7943,8241],[7944,8244],[7945,8246],[7950,8252],[8062,8365],[8148,8452],[8149,8454],[8152,8458],[8164,8471],[8174,8482],[8236,8556],[8240,8570],[8262,8596],[8264,8602],[8374,8713],[8380,8720],[8381,8722],[8384,8726],[8388,8731],[8390,8737],[8392,8740],[8393,8742],[8394,8748],[8396,8751],[8401,8760],[8406,8766],[8416,8777],[8419,8781],[8424,8787],[8437,8802],[8439,8808],[8445,8816],[8482,8854],[8485,8858],[8496,8870],[8521,8896],[8603,8979],[8936,9322],[8946,9372],[9046,9548],[9050,9588],[9063,9616],[9066,9622],[9076,9634],[9092,9652],[9100,9662],[9108,9672],[9111,9676],[9113,9680],[9131,9702],[9162,9735],[9164,9738],[9218,9793],[9219,9795],[11329,11906],[11331,11909],[11334,11913],[11336,11917],[11346,11928],[11361,11944],[11363,11947],[11366,11951],[11370,11956],[11372,11960],[11375,11964],[11389,11979],[11682,12284],[11686,12292],[11687,12312],[11692,12319],[11694,12330],[11714,12351],[11716,12436],[11723,12447],[11725,12535],[11730,12543],[11736,12586],[11982,12842],[11989,12850],[12102,12964],[12336,13200],[12348,13215],[12350,13218],[12384,13253],[12393,13263],[12395,13267],[12397,13270],[12510,13384],[12553,13428],[12851,13727],[12962,13839],[12973,13851],[13738,14617],[13823,14703],[13919,14801],[13933,14816],[14080,14964],[14298,15183],[14585,15471],[14698,15585],[15583,16471],[15847,16736],[16318,17208],[16434,17325],[16438,17330],[16481,17374],[16729,17623],[17102,17997],[17122,18018],[17315,18212],[17320,18218],[17402,18301],[17418,18318],[17859,18760],[17909,18811],[17911,18814],[17915,18820],[17916,18823],[17936,18844],[17939,18848],[17961,18872],[18664,19576],[18703,19620],[18814,19738],[18962,19887],[19043,40870],[33469,59244],[33470,59336],[33471,59367],[33484,59413],[33485,59417],[33490,59423],[33497,59431],[33501,59437],[33505,59443],[33513,59452],[33520,59460],[33536,59478],[33550,59493],[37845,63789],[37921,63866],[37948,63894],[38029,63976],[38038,63986],[38064,64016],[38065,64018],[38066,64021],[38069,64025],[38075,64034],[38076,64037],[38078,64042],[39108,65074],[39109,65093],[39113,65107],[39114,65112],[39115,65127],[39116,65132],[39265,65375],[39394,65510],[189e3,65536]],jis0208:[12288,12289,12290,65292,65294,12539,65306,65307,65311,65281,12443,12444,180,65344,168,65342,65507,65343,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,8213,8208,65295,65340,65374,8741,65372,8230,8229,8216,8217,8220,8221,65288,65289,12308,12309,65339,65341,65371,65373,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,65291,65293,177,215,247,65309,8800,65308,65310,8806,8807,8734,8756,9794,9792,176,8242,8243,8451,65509,65284,65504,65505,65285,65283,65286,65290,65312,167,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8251,12306,8594,8592,8593,8595,12307,null,null,null,null,null,null,null,null,null,null,null,8712,8715,8838,8839,8834,8835,8746,8745,null,null,null,null,null,null,null,null,8743,8744,65506,8658,8660,8704,8707,null,null,null,null,null,null,null,null,null,null,null,8736,8869,8978,8706,8711,8801,8786,8810,8811,8730,8765,8733,8757,8747,8748,null,null,null,null,null,null,null,8491,8240,9839,9837,9834,8224,8225,182,null,null,null,null,9711,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,null,null,null,null,null,null,null,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,null,null,null,null,null,null,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,null,null,null,null,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,13129,13076,13090,13133,13080,13095,13059,13110,13137,13143,13069,13094,13091,13099,13130,13115,13212,13213,13214,13198,13199,13252,13217,null,null,null,null,null,null,null,null,13179,12317,12319,8470,13261,8481,12964,12965,12966,12967,12968,12849,12850,12857,13182,13181,13180,8786,8801,8747,8750,8721,8730,8869,8736,8735,8895,8757,8745,8746,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20124,21782,23043,38463,21696,24859,25384,23030,36898,33909,33564,31312,24746,25569,28197,26093,33894,33446,39925,26771,22311,26017,25201,23451,22992,34427,39156,32098,32190,39822,25110,31903,34999,23433,24245,25353,26263,26696,38343,38797,26447,20197,20234,20301,20381,20553,22258,22839,22996,23041,23561,24799,24847,24944,26131,26885,28858,30031,30064,31227,32173,32239,32963,33806,34915,35586,36949,36986,21307,20117,20133,22495,32946,37057,30959,19968,22769,28322,36920,31282,33576,33419,39983,20801,21360,21693,21729,22240,23035,24341,39154,28139,32996,34093,38498,38512,38560,38907,21515,21491,23431,28879,32701,36802,38632,21359,40284,31418,19985,30867,33276,28198,22040,21764,27421,34074,39995,23013,21417,28006,29916,38287,22082,20113,36939,38642,33615,39180,21473,21942,23344,24433,26144,26355,26628,27704,27891,27945,29787,30408,31310,38964,33521,34907,35424,37613,28082,30123,30410,39365,24742,35585,36234,38322,27022,21421,20870,22290,22576,22852,23476,24310,24616,25513,25588,27839,28436,28814,28948,29017,29141,29503,32257,33398,33489,34199,36960,37467,40219,22633,26044,27738,29989,20985,22830,22885,24448,24540,25276,26106,27178,27431,27572,29579,32705,35158,40236,40206,40644,23713,27798,33659,20740,23627,25014,33222,26742,29281,20057,20474,21368,24681,28201,31311,38899,19979,21270,20206,20309,20285,20385,20339,21152,21487,22025,22799,23233,23478,23521,31185,26247,26524,26550,27468,27827,28779,29634,31117,31166,31292,31623,33457,33499,33540,33655,33775,33747,34662,35506,22057,36008,36838,36942,38686,34442,20420,23784,25105,29273,30011,33253,33469,34558,36032,38597,39187,39381,20171,20250,35299,22238,22602,22730,24315,24555,24618,24724,24674,25040,25106,25296,25913,39745,26214,26800,28023,28784,30028,30342,32117,33445,34809,38283,38542,35997,20977,21182,22806,21683,23475,23830,24936,27010,28079,30861,33995,34903,35442,37799,39608,28012,39336,34521,22435,26623,34510,37390,21123,22151,21508,24275,25313,25785,26684,26680,27579,29554,30906,31339,35226,35282,36203,36611,37101,38307,38548,38761,23398,23731,27005,38989,38990,25499,31520,27179,27263,26806,39949,28511,21106,21917,24688,25324,27963,28167,28369,33883,35088,36676,19988,39993,21494,26907,27194,38788,26666,20828,31427,33970,37340,37772,22107,40232,26658,33541,33841,31909,21e3,33477,29926,20094,20355,20896,23506,21002,21208,21223,24059,21914,22570,23014,23436,23448,23515,24178,24185,24739,24863,24931,25022,25563,25954,26577,26707,26874,27454,27475,27735,28450,28567,28485,29872,29976,30435,30475,31487,31649,31777,32233,32566,32752,32925,33382,33694,35251,35532,36011,36996,37969,38291,38289,38306,38501,38867,39208,33304,20024,21547,23736,24012,29609,30284,30524,23721,32747,36107,38593,38929,38996,39e3,20225,20238,21361,21916,22120,22522,22855,23305,23492,23696,24076,24190,24524,25582,26426,26071,26082,26399,26827,26820,27231,24112,27589,27671,27773,30079,31048,23395,31232,32e3,24509,35215,35352,36020,36215,36556,36637,39138,39438,39740,20096,20605,20736,22931,23452,25135,25216,25836,27450,29344,30097,31047,32681,34811,35516,35696,25516,33738,38816,21513,21507,21931,26708,27224,35440,30759,26485,40653,21364,23458,33050,34384,36870,19992,20037,20167,20241,21450,21560,23470,24339,24613,25937,26429,27714,27762,27875,28792,29699,31350,31406,31496,32026,31998,32102,26087,29275,21435,23621,24040,25298,25312,25369,28192,34394,35377,36317,37624,28417,31142,39770,20136,20139,20140,20379,20384,20689,20807,31478,20849,20982,21332,21281,21375,21483,21932,22659,23777,24375,24394,24623,24656,24685,25375,25945,27211,27841,29378,29421,30703,33016,33029,33288,34126,37111,37857,38911,39255,39514,20208,20957,23597,26241,26989,23616,26354,26997,29577,26704,31873,20677,21220,22343,24062,37670,26020,27427,27453,29748,31105,31165,31563,32202,33465,33740,34943,35167,35641,36817,37329,21535,37504,20061,20534,21477,21306,29399,29590,30697,33510,36527,39366,39368,39378,20855,24858,34398,21936,31354,20598,23507,36935,38533,20018,27355,37351,23633,23624,25496,31391,27795,38772,36705,31402,29066,38536,31874,26647,32368,26705,37740,21234,21531,34219,35347,32676,36557,37089,21350,34952,31041,20418,20670,21009,20804,21843,22317,29674,22411,22865,24418,24452,24693,24950,24935,25001,25522,25658,25964,26223,26690,28179,30054,31293,31995,32076,32153,32331,32619,33550,33610,34509,35336,35427,35686,36605,38938,40335,33464,36814,39912,21127,25119,25731,28608,38553,26689,20625,27424,27770,28500,31348,32080,34880,35363,26376,20214,20537,20518,20581,20860,21048,21091,21927,22287,22533,23244,24314,25010,25080,25331,25458,26908,27177,29309,29356,29486,30740,30831,32121,30476,32937,35211,35609,36066,36562,36963,37749,38522,38997,39443,40568,20803,21407,21427,24187,24358,28187,28304,29572,29694,32067,33335,35328,35578,38480,20046,20491,21476,21628,22266,22993,23396,24049,24235,24359,25144,25925,26543,28246,29392,31946,34996,32929,32993,33776,34382,35463,36328,37431,38599,39015,40723,20116,20114,20237,21320,21577,21566,23087,24460,24481,24735,26791,27278,29786,30849,35486,35492,35703,37264,20062,39881,20132,20348,20399,20505,20502,20809,20844,21151,21177,21246,21402,21475,21521,21518,21897,22353,22434,22909,23380,23389,23439,24037,24039,24055,24184,24195,24218,24247,24344,24658,24908,25239,25304,25511,25915,26114,26179,26356,26477,26657,26775,27083,27743,27946,28009,28207,28317,30002,30343,30828,31295,31968,32005,32024,32094,32177,32789,32771,32943,32945,33108,33167,33322,33618,34892,34913,35611,36002,36092,37066,37237,37489,30783,37628,38308,38477,38917,39321,39640,40251,21083,21163,21495,21512,22741,25335,28640,35946,36703,40633,20811,21051,21578,22269,31296,37239,40288,40658,29508,28425,33136,29969,24573,24794,39592,29403,36796,27492,38915,20170,22256,22372,22718,23130,24680,25031,26127,26118,26681,26801,28151,30165,32058,33390,39746,20123,20304,21449,21766,23919,24038,24046,26619,27801,29811,30722,35408,37782,35039,22352,24231,25387,20661,20652,20877,26368,21705,22622,22971,23472,24425,25165,25505,26685,27507,28168,28797,37319,29312,30741,30758,31085,25998,32048,33756,35009,36617,38555,21092,22312,26448,32618,36001,20916,22338,38442,22586,27018,32948,21682,23822,22524,30869,40442,20316,21066,21643,25662,26152,26388,26613,31364,31574,32034,37679,26716,39853,31545,21273,20874,21047,23519,25334,25774,25830,26413,27578,34217,38609,30352,39894,25420,37638,39851,30399,26194,19977,20632,21442,23665,24808,25746,25955,26719,29158,29642,29987,31639,32386,34453,35715,36059,37240,39184,26028,26283,27531,20181,20180,20282,20351,21050,21496,21490,21987,22235,22763,22987,22985,23039,23376,23629,24066,24107,24535,24605,25351,25903,23388,26031,26045,26088,26525,27490,27515,27663,29509,31049,31169,31992,32025,32043,32930,33026,33267,35222,35422,35433,35430,35468,35566,36039,36060,38604,39164,27503,20107,20284,20365,20816,23383,23546,24904,25345,26178,27425,28363,27835,29246,29885,30164,30913,31034,32780,32819,33258,33940,36766,27728,40575,24335,35672,40235,31482,36600,23437,38635,19971,21489,22519,22833,23241,23460,24713,28287,28422,30142,36074,23455,34048,31712,20594,26612,33437,23649,34122,32286,33294,20889,23556,25448,36198,26012,29038,31038,32023,32773,35613,36554,36974,34503,37034,20511,21242,23610,26451,28796,29237,37196,37320,37675,33509,23490,24369,24825,20027,21462,23432,25163,26417,27530,29417,29664,31278,33131,36259,37202,39318,20754,21463,21610,23551,25480,27193,32172,38656,22234,21454,21608,23447,23601,24030,20462,24833,25342,27954,31168,31179,32066,32333,32722,33261,33311,33936,34886,35186,35728,36468,36655,36913,37195,37228,38598,37276,20160,20303,20805,21313,24467,25102,26580,27713,28171,29539,32294,37325,37507,21460,22809,23487,28113,31069,32302,31899,22654,29087,20986,34899,36848,20426,23803,26149,30636,31459,33308,39423,20934,24490,26092,26991,27529,28147,28310,28516,30462,32020,24033,36981,37255,38918,20966,21021,25152,26257,26329,28186,24246,32210,32626,26360,34223,34295,35576,21161,21465,22899,24207,24464,24661,37604,38500,20663,20767,21213,21280,21319,21484,21736,21830,21809,22039,22888,22974,23100,23477,23558,23567,23569,23578,24196,24202,24288,24432,25215,25220,25307,25484,25463,26119,26124,26157,26230,26494,26786,27167,27189,27836,28040,28169,28248,28988,28966,29031,30151,30465,30813,30977,31077,31216,31456,31505,31911,32057,32918,33750,33931,34121,34909,35059,35359,35388,35412,35443,35937,36062,37284,37478,37758,37912,38556,38808,19978,19976,19998,20055,20887,21104,22478,22580,22732,23330,24120,24773,25854,26465,26454,27972,29366,30067,31331,33976,35698,37304,37664,22065,22516,39166,25325,26893,27542,29165,32340,32887,33394,35302,39135,34645,36785,23611,20280,20449,20405,21767,23072,23517,23529,24515,24910,25391,26032,26187,26862,27035,28024,28145,30003,30137,30495,31070,31206,32051,33251,33455,34218,35242,35386,36523,36763,36914,37341,38663,20154,20161,20995,22645,22764,23563,29978,23613,33102,35338,36805,38499,38765,31525,35535,38920,37218,22259,21416,36887,21561,22402,24101,25512,27700,28810,30561,31883,32736,34928,36930,37204,37648,37656,38543,29790,39620,23815,23913,25968,26530,36264,38619,25454,26441,26905,33733,38935,38592,35070,28548,25722,23544,19990,28716,30045,26159,20932,21046,21218,22995,24449,24615,25104,25919,25972,26143,26228,26866,26646,27491,28165,29298,29983,30427,31934,32854,22768,35069,35199,35488,35475,35531,36893,37266,38738,38745,25993,31246,33030,38587,24109,24796,25114,26021,26132,26512,30707,31309,31821,32318,33034,36012,36196,36321,36447,30889,20999,25305,25509,25666,25240,35373,31363,31680,35500,38634,32118,33292,34633,20185,20808,21315,21344,23459,23554,23574,24029,25126,25159,25776,26643,26676,27849,27973,27927,26579,28508,29006,29053,26059,31359,31661,32218,32330,32680,33146,33307,33337,34214,35438,36046,36341,36984,36983,37549,37521,38275,39854,21069,21892,28472,28982,20840,31109,32341,33203,31950,22092,22609,23720,25514,26366,26365,26970,29401,30095,30094,30990,31062,31199,31895,32032,32068,34311,35380,38459,36961,40736,20711,21109,21452,21474,20489,21930,22766,22863,29245,23435,23652,21277,24803,24819,25436,25475,25407,25531,25805,26089,26361,24035,27085,27133,28437,29157,20105,30185,30456,31379,31967,32207,32156,32865,33609,33624,33900,33980,34299,35013,36208,36865,36973,37783,38684,39442,20687,22679,24974,33235,34101,36104,36896,20419,20596,21063,21363,24687,25417,26463,28204,36275,36895,20439,23646,36042,26063,32154,21330,34966,20854,25539,23384,23403,23562,25613,26449,36956,20182,22810,22826,27760,35409,21822,22549,22949,24816,25171,26561,33333,26965,38464,39364,39464,20307,22534,23550,32784,23729,24111,24453,24608,24907,25140,26367,27888,28382,32974,33151,33492,34955,36024,36864,36910,38538,40667,39899,20195,21488,22823,31532,37261,38988,40441,28381,28711,21331,21828,23429,25176,25246,25299,27810,28655,29730,35351,37944,28609,35582,33592,20967,34552,21482,21481,20294,36948,36784,22890,33073,24061,31466,36799,26842,35895,29432,40008,27197,35504,20025,21336,22022,22374,25285,25506,26086,27470,28129,28251,28845,30701,31471,31658,32187,32829,32966,34507,35477,37723,22243,22727,24382,26029,26262,27264,27573,30007,35527,20516,30693,22320,24347,24677,26234,27744,30196,31258,32622,33268,34584,36933,39347,31689,30044,31481,31569,33988,36880,31209,31378,33590,23265,30528,20013,20210,23449,24544,25277,26172,26609,27880,34411,34935,35387,37198,37619,39376,27159,28710,29482,33511,33879,36015,19969,20806,20939,21899,23541,24086,24115,24193,24340,24373,24427,24500,25074,25361,26274,26397,28526,29266,30010,30522,32884,33081,33144,34678,35519,35548,36229,36339,37530,38263,38914,40165,21189,25431,30452,26389,27784,29645,36035,37806,38515,27941,22684,26894,27084,36861,37786,30171,36890,22618,26626,25524,27131,20291,28460,26584,36795,34086,32180,37716,26943,28528,22378,22775,23340,32044,29226,21514,37347,40372,20141,20302,20572,20597,21059,35998,21576,22564,23450,24093,24213,24237,24311,24351,24716,25269,25402,25552,26799,27712,30855,31118,31243,32224,33351,35330,35558,36420,36883,37048,37165,37336,40718,27877,25688,25826,25973,28404,30340,31515,36969,37841,28346,21746,24505,25764,36685,36845,37444,20856,22635,22825,23637,24215,28155,32399,29980,36028,36578,39003,28857,20253,27583,28593,3e4,38651,20814,21520,22581,22615,22956,23648,24466,26007,26460,28193,30331,33759,36077,36884,37117,37709,30757,30778,21162,24230,22303,22900,24594,20498,20826,20908,20941,20992,21776,22612,22616,22871,23445,23798,23947,24764,25237,25645,26481,26691,26812,26847,30423,28120,28271,28059,28783,29128,24403,30168,31095,31561,31572,31570,31958,32113,21040,33891,34153,34276,35342,35588,35910,36367,36867,36879,37913,38518,38957,39472,38360,20685,21205,21516,22530,23566,24999,25758,27934,30643,31461,33012,33796,36947,37509,23776,40199,21311,24471,24499,28060,29305,30563,31167,31716,27602,29420,35501,26627,27233,20984,31361,26932,23626,40182,33515,23493,37193,28702,22136,23663,24775,25958,27788,35930,36929,38931,21585,26311,37389,22856,37027,20869,20045,20970,34201,35598,28760,25466,37707,26978,39348,32260,30071,21335,26976,36575,38627,27741,20108,23612,24336,36841,21250,36049,32905,34425,24319,26085,20083,20837,22914,23615,38894,20219,22922,24525,35469,28641,31152,31074,23527,33905,29483,29105,24180,24565,25467,25754,29123,31896,20035,24316,20043,22492,22178,24745,28611,32013,33021,33075,33215,36786,35223,34468,24052,25226,25773,35207,26487,27874,27966,29750,30772,23110,32629,33453,39340,20467,24259,25309,25490,25943,26479,30403,29260,32972,32954,36649,37197,20493,22521,23186,26757,26995,29028,29437,36023,22770,36064,38506,36889,34687,31204,30695,33833,20271,21093,21338,25293,26575,27850,30333,31636,31893,33334,34180,36843,26333,28448,29190,32283,33707,39361,40614,20989,31665,30834,31672,32903,31560,27368,24161,32908,30033,30048,20843,37474,28300,30330,37271,39658,20240,32624,25244,31567,38309,40169,22138,22617,34532,38588,20276,21028,21322,21453,21467,24070,25644,26001,26495,27710,27726,29256,29359,29677,30036,32321,33324,34281,36009,31684,37318,29033,38930,39151,25405,26217,30058,30436,30928,34115,34542,21290,21329,21542,22915,24199,24444,24754,25161,25209,25259,26e3,27604,27852,30130,30382,30865,31192,32203,32631,32933,34987,35513,36027,36991,38750,39131,27147,31800,20633,23614,24494,26503,27608,29749,30473,32654,40763,26570,31255,21305,30091,39661,24422,33181,33777,32920,24380,24517,30050,31558,36924,26727,23019,23195,32016,30334,35628,20469,24426,27161,27703,28418,29922,31080,34920,35413,35961,24287,25551,30149,31186,33495,37672,37618,33948,34541,39981,21697,24428,25996,27996,28693,36007,36051,38971,25935,29942,19981,20184,22496,22827,23142,23500,20904,24067,24220,24598,25206,25975,26023,26222,28014,29238,31526,33104,33178,33433,35676,36e3,36070,36212,38428,38468,20398,25771,27494,33310,33889,34154,37096,23553,26963,39080,33914,34135,20239,21103,24489,24133,26381,31119,33145,35079,35206,28149,24343,25173,27832,20175,29289,39826,20998,21563,22132,22707,24996,25198,28954,22894,31881,31966,32027,38640,25991,32862,19993,20341,20853,22592,24163,24179,24330,26564,20006,34109,38281,38491,31859,38913,20731,22721,30294,30887,21029,30629,34065,31622,20559,22793,29255,31687,32232,36794,36820,36941,20415,21193,23081,24321,38829,20445,33303,37610,22275,25429,27497,29995,35036,36628,31298,21215,22675,24917,25098,26286,27597,31807,33769,20515,20472,21253,21574,22577,22857,23453,23792,23791,23849,24214,25265,25447,25918,26041,26379,27861,27873,28921,30770,32299,32990,33459,33804,34028,34562,35090,35370,35914,37030,37586,39165,40179,40300,20047,20129,20621,21078,22346,22952,24125,24536,24537,25151,26292,26395,26576,26834,20882,32033,32938,33192,35584,35980,36031,37502,38450,21536,38956,21271,20693,21340,22696,25778,26420,29287,30566,31302,37350,21187,27809,27526,22528,24140,22868,26412,32763,20961,30406,25705,30952,39764,40635,22475,22969,26151,26522,27598,21737,27097,24149,33180,26517,39850,26622,40018,26717,20134,20451,21448,25273,26411,27819,36804,20397,32365,40639,19975,24930,28288,28459,34067,21619,26410,39749,24051,31637,23724,23494,34588,28234,34001,31252,33032,22937,31885,27665,30496,21209,22818,28961,29279,30683,38695,40289,26891,23167,23064,20901,21517,21629,26126,30431,36855,37528,40180,23018,29277,28357,20813,26825,32191,32236,38754,40634,25720,27169,33538,22916,23391,27611,29467,30450,32178,32791,33945,20786,26408,40665,30446,26466,21247,39173,23588,25147,31870,36016,21839,24758,32011,38272,21249,20063,20918,22812,29242,32822,37326,24357,30690,21380,24441,32004,34220,35379,36493,38742,26611,34222,37971,24841,24840,27833,30290,35565,36664,21807,20305,20778,21191,21451,23461,24189,24736,24962,25558,26377,26586,28263,28044,29494,29495,30001,31056,35029,35480,36938,37009,37109,38596,34701,22805,20104,20313,19982,35465,36671,38928,20653,24188,22934,23481,24248,25562,25594,25793,26332,26954,27096,27915,28342,29076,29992,31407,32650,32768,33865,33993,35201,35617,36362,36965,38525,39178,24958,25233,27442,27779,28020,32716,32764,28096,32645,34746,35064,26469,33713,38972,38647,27931,32097,33853,37226,20081,21365,23888,27396,28651,34253,34349,35239,21033,21519,23653,26446,26792,29702,29827,30178,35023,35041,37324,38626,38520,24459,29575,31435,33870,25504,30053,21129,27969,28316,29705,30041,30827,31890,38534,31452,40845,20406,24942,26053,34396,20102,20142,20698,20001,20940,23534,26009,26753,28092,29471,30274,30637,31260,31975,33391,35538,36988,37327,38517,38936,21147,32209,20523,21400,26519,28107,29136,29747,33256,36650,38563,40023,40607,29792,22593,28057,32047,39006,20196,20278,20363,20919,21169,23994,24604,29618,31036,33491,37428,38583,38646,38666,40599,40802,26278,27508,21015,21155,28872,35010,24265,24651,24976,28451,29001,31806,32244,32879,34030,36899,37676,21570,39791,27347,28809,36034,36335,38706,21172,23105,24266,24324,26391,27004,27028,28010,28431,29282,29436,31725,32769,32894,34635,37070,20845,40595,31108,32907,37682,35542,20525,21644,35441,27498,36036,33031,24785,26528,40434,20121,20120,39952,35435,34241,34152,26880,28286,30871,33109,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24332,19984,19989,20010,20017,20022,20028,20031,20034,20054,20056,20098,20101,35947,20106,33298,24333,20110,20126,20127,20128,20130,20144,20147,20150,20174,20173,20164,20166,20162,20183,20190,20205,20191,20215,20233,20314,20272,20315,20317,20311,20295,20342,20360,20367,20376,20347,20329,20336,20369,20335,20358,20374,20760,20436,20447,20430,20440,20443,20433,20442,20432,20452,20453,20506,20520,20500,20522,20517,20485,20252,20470,20513,20521,20524,20478,20463,20497,20486,20547,20551,26371,20565,20560,20552,20570,20566,20588,20600,20608,20634,20613,20660,20658,20681,20682,20659,20674,20694,20702,20709,20717,20707,20718,20729,20725,20745,20737,20738,20758,20757,20756,20762,20769,20794,20791,20796,20795,20799,20800,20818,20812,20820,20834,31480,20841,20842,20846,20864,20866,22232,20876,20873,20879,20881,20883,20885,20886,20900,20902,20898,20905,20906,20907,20915,20913,20914,20912,20917,20925,20933,20937,20955,20960,34389,20969,20973,20976,20981,20990,20996,21003,21012,21006,21031,21034,21038,21043,21049,21071,21060,21067,21068,21086,21076,21098,21108,21097,21107,21119,21117,21133,21140,21138,21105,21128,21137,36776,36775,21164,21165,21180,21173,21185,21197,21207,21214,21219,21222,39149,21216,21235,21237,21240,21241,21254,21256,30008,21261,21264,21263,21269,21274,21283,21295,21297,21299,21304,21312,21318,21317,19991,21321,21325,20950,21342,21353,21358,22808,21371,21367,21378,21398,21408,21414,21413,21422,21424,21430,21443,31762,38617,21471,26364,29166,21486,21480,21485,21498,21505,21565,21568,21548,21549,21564,21550,21558,21545,21533,21582,21647,21621,21646,21599,21617,21623,21616,21650,21627,21632,21622,21636,21648,21638,21703,21666,21688,21669,21676,21700,21704,21672,21675,21698,21668,21694,21692,21720,21733,21734,21775,21780,21757,21742,21741,21754,21730,21817,21824,21859,21836,21806,21852,21829,21846,21847,21816,21811,21853,21913,21888,21679,21898,21919,21883,21886,21912,21918,21934,21884,21891,21929,21895,21928,21978,21957,21983,21956,21980,21988,21972,22036,22007,22038,22014,22013,22043,22009,22094,22096,29151,22068,22070,22066,22072,22123,22116,22063,22124,22122,22150,22144,22154,22176,22164,22159,22181,22190,22198,22196,22210,22204,22209,22211,22208,22216,22222,22225,22227,22231,22254,22265,22272,22271,22276,22281,22280,22283,22285,22291,22296,22294,21959,22300,22310,22327,22328,22350,22331,22336,22351,22377,22464,22408,22369,22399,22409,22419,22432,22451,22436,22442,22448,22467,22470,22484,22482,22483,22538,22486,22499,22539,22553,22557,22642,22561,22626,22603,22640,27584,22610,22589,22649,22661,22713,22687,22699,22714,22750,22715,22712,22702,22725,22739,22737,22743,22745,22744,22757,22748,22756,22751,22767,22778,22777,22779,22780,22781,22786,22794,22800,22811,26790,22821,22828,22829,22834,22840,22846,31442,22869,22864,22862,22874,22872,22882,22880,22887,22892,22889,22904,22913,22941,20318,20395,22947,22962,22982,23016,23004,22925,23001,23002,23077,23071,23057,23068,23049,23066,23104,23148,23113,23093,23094,23138,23146,23194,23228,23230,23243,23234,23229,23267,23255,23270,23273,23254,23290,23291,23308,23307,23318,23346,23248,23338,23350,23358,23363,23365,23360,23377,23381,23386,23387,23397,23401,23408,23411,23413,23416,25992,23418,23424,23427,23462,23480,23491,23495,23497,23508,23504,23524,23526,23522,23518,23525,23531,23536,23542,23539,23557,23559,23560,23565,23571,23584,23586,23592,23608,23609,23617,23622,23630,23635,23632,23631,23409,23660,23662,20066,23670,23673,23692,23697,23700,22939,23723,23739,23734,23740,23735,23749,23742,23751,23769,23785,23805,23802,23789,23948,23786,23819,23829,23831,23900,23839,23835,23825,23828,23842,23834,23833,23832,23884,23890,23886,23883,23916,23923,23926,23943,23940,23938,23970,23965,23980,23982,23997,23952,23991,23996,24009,24013,24019,24018,24022,24027,24043,24050,24053,24075,24090,24089,24081,24091,24118,24119,24132,24131,24128,24142,24151,24148,24159,24162,24164,24135,24181,24182,24186,40636,24191,24224,24257,24258,24264,24272,24271,24278,24291,24285,24282,24283,24290,24289,24296,24297,24300,24305,24307,24304,24308,24312,24318,24323,24329,24413,24412,24331,24337,24342,24361,24365,24376,24385,24392,24396,24398,24367,24401,24406,24407,24409,24417,24429,24435,24439,24451,24450,24447,24458,24456,24465,24455,24478,24473,24472,24480,24488,24493,24508,24534,24571,24548,24568,24561,24541,24755,24575,24609,24672,24601,24592,24617,24590,24625,24603,24597,24619,24614,24591,24634,24666,24641,24682,24695,24671,24650,24646,24653,24675,24643,24676,24642,24684,24683,24665,24705,24717,24807,24707,24730,24708,24731,24726,24727,24722,24743,24715,24801,24760,24800,24787,24756,24560,24765,24774,24757,24792,24909,24853,24838,24822,24823,24832,24820,24826,24835,24865,24827,24817,24845,24846,24903,24894,24872,24871,24906,24895,24892,24876,24884,24893,24898,24900,24947,24951,24920,24921,24922,24939,24948,24943,24933,24945,24927,24925,24915,24949,24985,24982,24967,25004,24980,24986,24970,24977,25003,25006,25036,25034,25033,25079,25032,25027,25030,25018,25035,32633,25037,25062,25059,25078,25082,25076,25087,25085,25084,25086,25088,25096,25097,25101,25100,25108,25115,25118,25121,25130,25134,25136,25138,25139,25153,25166,25182,25187,25179,25184,25192,25212,25218,25225,25214,25234,25235,25238,25300,25219,25236,25303,25297,25275,25295,25343,25286,25812,25288,25308,25292,25290,25282,25287,25243,25289,25356,25326,25329,25383,25346,25352,25327,25333,25424,25406,25421,25628,25423,25494,25486,25472,25515,25462,25507,25487,25481,25503,25525,25451,25449,25534,25577,25536,25542,25571,25545,25554,25590,25540,25622,25652,25606,25619,25638,25654,25885,25623,25640,25615,25703,25711,25718,25678,25898,25749,25747,25765,25769,25736,25788,25818,25810,25797,25799,25787,25816,25794,25841,25831,33289,25824,25825,25260,25827,25839,25900,25846,25844,25842,25850,25856,25853,25880,25884,25861,25892,25891,25899,25908,25909,25911,25910,25912,30027,25928,25942,25941,25933,25944,25950,25949,25970,25976,25986,25987,35722,26011,26015,26027,26039,26051,26054,26049,26052,26060,26066,26075,26073,26080,26081,26097,26482,26122,26115,26107,26483,26165,26166,26164,26140,26191,26180,26185,26177,26206,26205,26212,26215,26216,26207,26210,26224,26243,26248,26254,26249,26244,26264,26269,26305,26297,26313,26302,26300,26308,26296,26326,26330,26336,26175,26342,26345,26352,26357,26359,26383,26390,26398,26406,26407,38712,26414,26431,26422,26433,26424,26423,26438,26462,26464,26457,26467,26468,26505,26480,26537,26492,26474,26508,26507,26534,26529,26501,26551,26607,26548,26604,26547,26601,26552,26596,26590,26589,26594,26606,26553,26574,26566,26599,27292,26654,26694,26665,26688,26701,26674,26702,26803,26667,26713,26723,26743,26751,26783,26767,26797,26772,26781,26779,26755,27310,26809,26740,26805,26784,26810,26895,26765,26750,26881,26826,26888,26840,26914,26918,26849,26892,26829,26836,26855,26837,26934,26898,26884,26839,26851,26917,26873,26848,26863,26920,26922,26906,26915,26913,26822,27001,26999,26972,27e3,26987,26964,27006,26990,26937,26996,26941,26969,26928,26977,26974,26973,27009,26986,27058,27054,27088,27071,27073,27091,27070,27086,23528,27082,27101,27067,27075,27047,27182,27025,27040,27036,27029,27060,27102,27112,27138,27163,27135,27402,27129,27122,27111,27141,27057,27166,27117,27156,27115,27146,27154,27329,27171,27155,27204,27148,27250,27190,27256,27207,27234,27225,27238,27208,27192,27170,27280,27277,27296,27268,27298,27299,27287,34327,27323,27331,27330,27320,27315,27308,27358,27345,27359,27306,27354,27370,27387,27397,34326,27386,27410,27414,39729,27423,27448,27447,30428,27449,39150,27463,27459,27465,27472,27481,27476,27483,27487,27489,27512,27513,27519,27520,27524,27523,27533,27544,27541,27550,27556,27562,27563,27567,27570,27569,27571,27575,27580,27590,27595,27603,27615,27628,27627,27635,27631,40638,27656,27667,27668,27675,27684,27683,27742,27733,27746,27754,27778,27789,27802,27777,27803,27774,27752,27763,27794,27792,27844,27889,27859,27837,27863,27845,27869,27822,27825,27838,27834,27867,27887,27865,27882,27935,34893,27958,27947,27965,27960,27929,27957,27955,27922,27916,28003,28051,28004,27994,28025,27993,28046,28053,28644,28037,28153,28181,28170,28085,28103,28134,28088,28102,28140,28126,28108,28136,28114,28101,28154,28121,28132,28117,28138,28142,28205,28270,28206,28185,28274,28255,28222,28195,28267,28203,28278,28237,28191,28227,28218,28238,28196,28415,28189,28216,28290,28330,28312,28361,28343,28371,28349,28335,28356,28338,28372,28373,28303,28325,28354,28319,28481,28433,28748,28396,28408,28414,28479,28402,28465,28399,28466,28364,28478,28435,28407,28550,28538,28536,28545,28544,28527,28507,28659,28525,28546,28540,28504,28558,28561,28610,28518,28595,28579,28577,28580,28601,28614,28586,28639,28629,28652,28628,28632,28657,28654,28635,28681,28683,28666,28689,28673,28687,28670,28699,28698,28532,28701,28696,28703,28720,28734,28722,28753,28771,28825,28818,28847,28913,28844,28856,28851,28846,28895,28875,28893,28889,28937,28925,28956,28953,29029,29013,29064,29030,29026,29004,29014,29036,29071,29179,29060,29077,29096,29100,29143,29113,29118,29138,29129,29140,29134,29152,29164,29159,29173,29180,29177,29183,29197,29200,29211,29224,29229,29228,29232,29234,29243,29244,29247,29248,29254,29259,29272,29300,29310,29314,29313,29319,29330,29334,29346,29351,29369,29362,29379,29382,29380,29390,29394,29410,29408,29409,29433,29431,20495,29463,29450,29468,29462,29469,29492,29487,29481,29477,29502,29518,29519,40664,29527,29546,29544,29552,29560,29557,29563,29562,29640,29619,29646,29627,29632,29669,29678,29662,29858,29701,29807,29733,29688,29746,29754,29781,29759,29791,29785,29761,29788,29801,29808,29795,29802,29814,29822,29835,29854,29863,29898,29903,29908,29681,29920,29923,29927,29929,29934,29938,29936,29937,29944,29943,29956,29955,29957,29964,29966,29965,29973,29971,29982,29990,29996,30012,30020,30029,30026,30025,30043,30022,30042,30057,30052,30055,30059,30061,30072,30070,30086,30087,30068,30090,30089,30082,30100,30106,30109,30117,30115,30146,30131,30147,30133,30141,30136,30140,30129,30157,30154,30162,30169,30179,30174,30206,30207,30204,30209,30192,30202,30194,30195,30219,30221,30217,30239,30247,30240,30241,30242,30244,30260,30256,30267,30279,30280,30278,30300,30296,30305,30306,30312,30313,30314,30311,30316,30320,30322,30326,30328,30332,30336,30339,30344,30347,30350,30358,30355,30361,30362,30384,30388,30392,30393,30394,30402,30413,30422,30418,30430,30433,30437,30439,30442,34351,30459,30472,30471,30468,30505,30500,30494,30501,30502,30491,30519,30520,30535,30554,30568,30571,30555,30565,30591,30590,30585,30606,30603,30609,30624,30622,30640,30646,30649,30655,30652,30653,30651,30663,30669,30679,30682,30684,30691,30702,30716,30732,30738,31014,30752,31018,30789,30862,30836,30854,30844,30874,30860,30883,30901,30890,30895,30929,30918,30923,30932,30910,30908,30917,30922,30956,30951,30938,30973,30964,30983,30994,30993,31001,31020,31019,31040,31072,31063,31071,31066,31061,31059,31098,31103,31114,31133,31143,40779,31146,31150,31155,31161,31162,31177,31189,31207,31212,31201,31203,31240,31245,31256,31257,31264,31263,31104,31281,31291,31294,31287,31299,31319,31305,31329,31330,31337,40861,31344,31353,31357,31368,31383,31381,31384,31382,31401,31432,31408,31414,31429,31428,31423,36995,31431,31434,31437,31439,31445,31443,31449,31450,31453,31457,31458,31462,31469,31472,31490,31503,31498,31494,31539,31512,31513,31518,31541,31528,31542,31568,31610,31492,31565,31499,31564,31557,31605,31589,31604,31591,31600,31601,31596,31598,31645,31640,31647,31629,31644,31642,31627,31634,31631,31581,31641,31691,31681,31692,31695,31668,31686,31709,31721,31761,31764,31718,31717,31840,31744,31751,31763,31731,31735,31767,31757,31734,31779,31783,31786,31775,31799,31787,31805,31820,31811,31828,31823,31808,31824,31832,31839,31844,31830,31845,31852,31861,31875,31888,31908,31917,31906,31915,31905,31912,31923,31922,31921,31918,31929,31933,31936,31941,31938,31960,31954,31964,31970,39739,31983,31986,31988,31990,31994,32006,32002,32028,32021,32010,32069,32075,32046,32050,32063,32053,32070,32115,32086,32078,32114,32104,32110,32079,32099,32147,32137,32091,32143,32125,32155,32186,32174,32163,32181,32199,32189,32171,32317,32162,32175,32220,32184,32159,32176,32216,32221,32228,32222,32251,32242,32225,32261,32266,32291,32289,32274,32305,32287,32265,32267,32290,32326,32358,32315,32309,32313,32323,32311,32306,32314,32359,32349,32342,32350,32345,32346,32377,32362,32361,32380,32379,32387,32213,32381,36782,32383,32392,32393,32396,32402,32400,32403,32404,32406,32398,32411,32412,32568,32570,32581,32588,32589,32590,32592,32593,32597,32596,32600,32607,32608,32616,32617,32615,32632,32642,32646,32643,32648,32647,32652,32660,32670,32669,32666,32675,32687,32690,32697,32686,32694,32696,35697,32709,32710,32714,32725,32724,32737,32742,32745,32755,32761,39132,32774,32772,32779,32786,32792,32793,32796,32801,32808,32831,32827,32842,32838,32850,32856,32858,32863,32866,32872,32883,32882,32880,32886,32889,32893,32895,32900,32902,32901,32923,32915,32922,32941,20880,32940,32987,32997,32985,32989,32964,32986,32982,33033,33007,33009,33051,33065,33059,33071,33099,38539,33094,33086,33107,33105,33020,33137,33134,33125,33126,33140,33155,33160,33162,33152,33154,33184,33173,33188,33187,33119,33171,33193,33200,33205,33214,33208,33213,33216,33218,33210,33225,33229,33233,33241,33240,33224,33242,33247,33248,33255,33274,33275,33278,33281,33282,33285,33287,33290,33293,33296,33302,33321,33323,33336,33331,33344,33369,33368,33373,33370,33375,33380,33378,33384,33386,33387,33326,33393,33399,33400,33406,33421,33426,33451,33439,33467,33452,33505,33507,33503,33490,33524,33523,33530,33683,33539,33531,33529,33502,33542,33500,33545,33497,33589,33588,33558,33586,33585,33600,33593,33616,33605,33583,33579,33559,33560,33669,33690,33706,33695,33698,33686,33571,33678,33671,33674,33660,33717,33651,33653,33696,33673,33704,33780,33811,33771,33742,33789,33795,33752,33803,33729,33783,33799,33760,33778,33805,33826,33824,33725,33848,34054,33787,33901,33834,33852,34138,33924,33911,33899,33965,33902,33922,33897,33862,33836,33903,33913,33845,33994,33890,33977,33983,33951,34009,33997,33979,34010,34e3,33985,33990,34006,33953,34081,34047,34036,34071,34072,34092,34079,34069,34068,34044,34112,34147,34136,34120,34113,34306,34123,34133,34176,34212,34184,34193,34186,34216,34157,34196,34203,34282,34183,34204,34167,34174,34192,34249,34234,34255,34233,34256,34261,34269,34277,34268,34297,34314,34323,34315,34302,34298,34310,34338,34330,34352,34367,34381,20053,34388,34399,34407,34417,34451,34467,34473,34474,34443,34444,34486,34479,34500,34502,34480,34505,34851,34475,34516,34526,34537,34540,34527,34523,34543,34578,34566,34568,34560,34563,34555,34577,34569,34573,34553,34570,34612,34623,34615,34619,34597,34601,34586,34656,34655,34680,34636,34638,34676,34647,34664,34670,34649,34643,34659,34666,34821,34722,34719,34690,34735,34763,34749,34752,34768,38614,34731,34756,34739,34759,34758,34747,34799,34802,34784,34831,34829,34814,34806,34807,34830,34770,34833,34838,34837,34850,34849,34865,34870,34873,34855,34875,34884,34882,34898,34905,34910,34914,34923,34945,34942,34974,34933,34941,34997,34930,34946,34967,34962,34990,34969,34978,34957,34980,34992,35007,34993,35011,35012,35028,35032,35033,35037,35065,35074,35068,35060,35048,35058,35076,35084,35082,35091,35139,35102,35109,35114,35115,35137,35140,35131,35126,35128,35148,35101,35168,35166,35174,35172,35181,35178,35183,35188,35191,35198,35203,35208,35210,35219,35224,35233,35241,35238,35244,35247,35250,35258,35261,35263,35264,35290,35292,35293,35303,35316,35320,35331,35350,35344,35340,35355,35357,35365,35382,35393,35419,35410,35398,35400,35452,35437,35436,35426,35461,35458,35460,35496,35489,35473,35493,35494,35482,35491,35524,35533,35522,35546,35563,35571,35559,35556,35569,35604,35552,35554,35575,35550,35547,35596,35591,35610,35553,35606,35600,35607,35616,35635,38827,35622,35627,35646,35624,35649,35660,35663,35662,35657,35670,35675,35674,35691,35679,35692,35695,35700,35709,35712,35724,35726,35730,35731,35734,35737,35738,35898,35905,35903,35912,35916,35918,35920,35925,35938,35948,35960,35962,35970,35977,35973,35978,35981,35982,35988,35964,35992,25117,36013,36010,36029,36018,36019,36014,36022,36040,36033,36068,36067,36058,36093,36090,36091,36100,36101,36106,36103,36111,36109,36112,40782,36115,36045,36116,36118,36199,36205,36209,36211,36225,36249,36290,36286,36282,36303,36314,36310,36300,36315,36299,36330,36331,36319,36323,36348,36360,36361,36351,36381,36382,36368,36383,36418,36405,36400,36404,36426,36423,36425,36428,36432,36424,36441,36452,36448,36394,36451,36437,36470,36466,36476,36481,36487,36485,36484,36491,36490,36499,36497,36500,36505,36522,36513,36524,36528,36550,36529,36542,36549,36552,36555,36571,36579,36604,36603,36587,36606,36618,36613,36629,36626,36633,36627,36636,36639,36635,36620,36646,36659,36667,36665,36677,36674,36670,36684,36681,36678,36686,36695,36700,36706,36707,36708,36764,36767,36771,36781,36783,36791,36826,36837,36834,36842,36847,36999,36852,36869,36857,36858,36881,36885,36897,36877,36894,36886,36875,36903,36918,36917,36921,36856,36943,36944,36945,36946,36878,36937,36926,36950,36952,36958,36968,36975,36982,38568,36978,36994,36989,36993,36992,37002,37001,37007,37032,37039,37041,37045,37090,37092,25160,37083,37122,37138,37145,37170,37168,37194,37206,37208,37219,37221,37225,37235,37234,37259,37257,37250,37282,37291,37295,37290,37301,37300,37306,37312,37313,37321,37323,37328,37334,37343,37345,37339,37372,37365,37366,37406,37375,37396,37420,37397,37393,37470,37463,37445,37449,37476,37448,37525,37439,37451,37456,37532,37526,37523,37531,37466,37583,37561,37559,37609,37647,37626,37700,37678,37657,37666,37658,37667,37690,37685,37691,37724,37728,37756,37742,37718,37808,37804,37805,37780,37817,37846,37847,37864,37861,37848,37827,37853,37840,37832,37860,37914,37908,37907,37891,37895,37904,37942,37931,37941,37921,37946,37953,37970,37956,37979,37984,37986,37982,37994,37417,38e3,38005,38007,38013,37978,38012,38014,38017,38015,38274,38279,38282,38292,38294,38296,38297,38304,38312,38311,38317,38332,38331,38329,38334,38346,28662,38339,38349,38348,38357,38356,38358,38364,38369,38373,38370,38433,38440,38446,38447,38466,38476,38479,38475,38519,38492,38494,38493,38495,38502,38514,38508,38541,38552,38549,38551,38570,38567,38577,38578,38576,38580,38582,38584,38585,38606,38603,38601,38605,35149,38620,38669,38613,38649,38660,38662,38664,38675,38670,38673,38671,38678,38681,38692,38698,38704,38713,38717,38718,38724,38726,38728,38722,38729,38748,38752,38756,38758,38760,21202,38763,38769,38777,38789,38780,38785,38778,38790,38795,38799,38800,38812,38824,38822,38819,38835,38836,38851,38854,38856,38859,38876,38893,40783,38898,31455,38902,38901,38927,38924,38968,38948,38945,38967,38973,38982,38991,38987,39019,39023,39024,39025,39028,39027,39082,39087,39089,39094,39108,39107,39110,39145,39147,39171,39177,39186,39188,39192,39201,39197,39198,39204,39200,39212,39214,39229,39230,39234,39241,39237,39248,39243,39249,39250,39244,39253,39319,39320,39333,39341,39342,39356,39391,39387,39389,39384,39377,39405,39406,39409,39410,39419,39416,39425,39439,39429,39394,39449,39467,39479,39493,39490,39488,39491,39486,39509,39501,39515,39511,39519,39522,39525,39524,39529,39531,39530,39597,39600,39612,39616,39631,39633,39635,39636,39646,39647,39650,39651,39654,39663,39659,39662,39668,39665,39671,39675,39686,39704,39706,39711,39714,39715,39717,39719,39720,39721,39722,39726,39727,39730,39748,39747,39759,39757,39758,39761,39768,39796,39827,39811,39825,39830,39831,39839,39840,39848,39860,39872,39882,39865,39878,39887,39889,39890,39907,39906,39908,39892,39905,39994,39922,39921,39920,39957,39956,39945,39955,39948,39942,39944,39954,39946,39940,39982,39963,39973,39972,39969,39984,40007,39986,40006,39998,40026,40032,40039,40054,40056,40167,40172,40176,40201,40200,40171,40195,40198,40234,40230,40367,40227,40223,40260,40213,40210,40257,40255,40254,40262,40264,40285,40286,40292,40273,40272,40281,40306,40329,40327,40363,40303,40314,40346,40356,40361,40370,40388,40385,40379,40376,40378,40390,40399,40386,40409,40403,40440,40422,40429,40431,40445,40474,40475,40478,40565,40569,40573,40577,40584,40587,40588,40594,40597,40593,40605,40613,40617,40632,40618,40621,38753,40652,40654,40655,40656,40660,40668,40670,40669,40672,40677,40680,40687,40692,40694,40695,40697,40699,40700,40701,40711,40712,30391,40725,40737,40748,40766,40778,40786,40788,40803,40799,40800,40801,40806,40807,40812,40810,40823,40818,40822,40853,40860,40864,22575,27079,36953,29796,20956,29081,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,65506,65508,65287,65282,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,65506,65508,65287,65282,12849,8470,8481,8757,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],jis0212:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25e3,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37e3,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],ibm866:[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],"iso-8859-2":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"iso-8859-3":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],"iso-8859-4":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],"iso-8859-5":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],"iso-8859-6":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],"iso-8859-7":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"iso-8859-8":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"iso-8859-10":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],"iso-8859-13":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],"iso-8859-14":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],"iso-8859-15":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"iso-8859-16":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],"koi8-r":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],"koi8-u":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,1118,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,1038,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],macintosh:[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],"windows-874":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],"windows-1250":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"windows-1251":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],"windows-1252":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"windows-1253":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"windows-1254":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],"windows-1255":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"windows-1256":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],"windows-1257":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],"windows-1258":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],"x-mac-cyrillic":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]}}(this||{})},4498:function(n,t,e){!function(t){"use strict";function l(n,t,e){return t<=n&&n<=e}n.exports&&!t["encoding-indexes"]&&(t["encoding-indexes"]=e(2162)["encoding-indexes"]);var r=Math.floor;function i(n){if(void 0===n)return{};if(n===Object(n))return n;throw TypeError("Could not convert argument to dictionary")}function u(n){return 0<=n&&n<=127}var o=u,a=-1;function s(n){this.tokens=[].slice.call(n),this.tokens.reverse()}s.prototype={endOfStream:function(){return!this.tokens.length},read:function(){return this.tokens.length?this.tokens.pop():a},prepend:function(n){if(Array.isArray(n))for(var t=n;t.length;)this.tokens.push(t.pop());else this.tokens.push(n)},push:function(n){if(Array.isArray(n))for(var t=n;t.length;)this.tokens.unshift(t.shift());else this.tokens.unshift(n)}};var c=-1;function h(n,t){if(n)throw TypeError("Decoder error");return t||65533}function p(n){throw TypeError("The code point "+n+" could not be encoded.")}function d(n){return n=String(n).trim().toLowerCase(),Object.prototype.hasOwnProperty.call(m,n)?m[n]:null}var f=[{encodings:[{labels:["unicode-1-1-utf-8","utf-8","utf8"],name:"UTF-8"}],heading:"The Encoding"},{encodings:[{labels:["866","cp866","csibm866","ibm866"],name:"IBM866"},{labels:["csisolatin2","iso-8859-2","iso-ir-101","iso8859-2","iso88592","iso_8859-2","iso_8859-2:1987","l2","latin2"],name:"ISO-8859-2"},{labels:["csisolatin3","iso-8859-3","iso-ir-109","iso8859-3","iso88593","iso_8859-3","iso_8859-3:1988","l3","latin3"],name:"ISO-8859-3"},{labels:["csisolatin4","iso-8859-4","iso-ir-110","iso8859-4","iso88594","iso_8859-4","iso_8859-4:1988","l4","latin4"],name:"ISO-8859-4"},{labels:["csisolatincyrillic","cyrillic","iso-8859-5","iso-ir-144","iso8859-5","iso88595","iso_8859-5","iso_8859-5:1988"],name:"ISO-8859-5"},{labels:["arabic","asmo-708","csiso88596e","csiso88596i","csisolatinarabic","ecma-114","iso-8859-6","iso-8859-6-e","iso-8859-6-i","iso-ir-127","iso8859-6","iso88596","iso_8859-6","iso_8859-6:1987"],name:"ISO-8859-6"},{labels:["csisolatingreek","ecma-118","elot_928","greek","greek8","iso-8859-7","iso-ir-126","iso8859-7","iso88597","iso_8859-7","iso_8859-7:1987","sun_eu_greek"],name:"ISO-8859-7"},{labels:["csiso88598e","csisolatinhebrew","hebrew","iso-8859-8","iso-8859-8-e","iso-ir-138","iso8859-8","iso88598","iso_8859-8","iso_8859-8:1988","visual"],name:"ISO-8859-8"},{labels:["csiso88598i","iso-8859-8-i","logical"],name:"ISO-8859-8-I"},{labels:["csisolatin6","iso-8859-10","iso-ir-157","iso8859-10","iso885910","l6","latin6"],name:"ISO-8859-10"},{labels:["iso-8859-13","iso8859-13","iso885913"],name:"ISO-8859-13"},{labels:["iso-8859-14","iso8859-14","iso885914"],name:"ISO-8859-14"},{labels:["csisolatin9","iso-8859-15","iso8859-15","iso885915","iso_8859-15","l9"],name:"ISO-8859-15"},{labels:["iso-8859-16"],name:"ISO-8859-16"},{labels:["cskoi8r","koi","koi8","koi8-r","koi8_r"],name:"KOI8-R"},{labels:["koi8-ru","koi8-u"],name:"KOI8-U"},{labels:["csmacintosh","mac","macintosh","x-mac-roman"],name:"macintosh"},{labels:["dos-874","iso-8859-11","iso8859-11","iso885911","tis-620","windows-874"],name:"windows-874"},{labels:["cp1250","windows-1250","x-cp1250"],name:"windows-1250"},{labels:["cp1251","windows-1251","x-cp1251"],name:"windows-1251"},{labels:["ansi_x3.4-1968","ascii","cp1252","cp819","csisolatin1","ibm819","iso-8859-1","iso-ir-100","iso8859-1","iso88591","iso_8859-1","iso_8859-1:1987","l1","latin1","us-ascii","windows-1252","x-cp1252"],name:"windows-1252"},{labels:["cp1253","windows-1253","x-cp1253"],name:"windows-1253"},{labels:["cp1254","csisolatin5","iso-8859-9","iso-ir-148","iso8859-9","iso88599","iso_8859-9","iso_8859-9:1989","l5","latin5","windows-1254","x-cp1254"],name:"windows-1254"},{labels:["cp1255","windows-1255","x-cp1255"],name:"windows-1255"},{labels:["cp1256","windows-1256","x-cp1256"],name:"windows-1256"},{labels:["cp1257","windows-1257","x-cp1257"],name:"windows-1257"},{labels:["cp1258","windows-1258","x-cp1258"],name:"windows-1258"},{labels:["x-mac-cyrillic","x-mac-ukrainian"],name:"x-mac-cyrillic"}],heading:"Legacy single-byte encodings"},{encodings:[{labels:["chinese","csgb2312","csiso58gb231280","gb2312","gb_2312","gb_2312-80","gbk","iso-ir-58","x-gbk"],name:"GBK"},{labels:["gb18030"],name:"gb18030"}],heading:"Legacy multi-byte Chinese (simplified) encodings"},{encodings:[{labels:["big5","big5-hkscs","cn-big5","csbig5","x-x-big5"],name:"Big5"}],heading:"Legacy multi-byte Chinese (traditional) encodings"},{encodings:[{labels:["cseucpkdfmtjapanese","euc-jp","x-euc-jp"],name:"EUC-JP"},{labels:["csiso2022jp","iso-2022-jp"],name:"ISO-2022-JP"},{labels:["csshiftjis","ms932","ms_kanji","shift-jis","shift_jis","sjis","windows-31j","x-sjis"],name:"Shift_JIS"}],heading:"Legacy multi-byte Japanese encodings"},{encodings:[{labels:["cseuckr","csksc56011987","euc-kr","iso-ir-149","korean","ks_c_5601-1987","ks_c_5601-1989","ksc5601","ksc_5601","windows-949"],name:"EUC-KR"}],heading:"Legacy multi-byte Korean encodings"},{encodings:[{labels:["csiso2022kr","hz-gb-2312","iso-2022-cn","iso-2022-cn-ext","iso-2022-kr"],name:"replacement"},{labels:["utf-16be"],name:"UTF-16BE"},{labels:["utf-16","utf-16le"],name:"UTF-16LE"},{labels:["x-user-defined"],name:"x-user-defined"}],heading:"Legacy miscellaneous encodings"}],m={};f.forEach((function(n){n.encodings.forEach((function(n){n.labels.forEach((function(t){m[t]=n}))}))}));var v,g,y={},x={};function b(n,t){return t&&t[n]||null}function _(n,t){var e=t.indexOf(n);return-1===e?null:e}function w(n){if(!("encoding-indexes"in t))throw Error("Indexes missing. Did you forget to include encoding-indexes.js first?");return t["encoding-indexes"][n]}var M="utf-8";function E(n,t){if(!(this instanceof E))throw TypeError("Called as a function. Did you forget 'new'?");n=void 0!==n?String(n):M,t=i(t),this._encoding=null,this._decoder=null,this._ignoreBOM=!1,this._BOMseen=!1,this._error_mode="replacement",this._do_not_flush=!1;var e=d(n);if(null===e||"replacement"===e.name)throw RangeError("Unknown encoding: "+n);if(!x[e.name])throw Error("Decoder not present. Did you forget to include encoding-indexes.js first?");var l=this;return l._encoding=e,Boolean(t.fatal)&&(l._error_mode="fatal"),Boolean(t.ignoreBOM)&&(l._ignoreBOM=!0),Object.defineProperty||(this.encoding=l._encoding.name.toLowerCase(),this.fatal="fatal"===l._error_mode,this.ignoreBOM=l._ignoreBOM),l}function S(n,e){if(!(this instanceof S))throw TypeError("Called as a function. Did you forget 'new'?");e=i(e),this._encoding=null,this._encoder=null,this._do_not_flush=!1,this._fatal=Boolean(e.fatal)?"fatal":"replacement";var l=this;if(Boolean(e.NONSTANDARD_allowLegacyEncoding)){var r=d(n=void 0!==n?String(n):M);if(null===r||"replacement"===r.name)throw RangeError("Unknown encoding: "+n);if(!y[r.name])throw Error("Encoder not present. Did you forget to include encoding-indexes.js first?");l._encoding=r}else l._encoding=d("utf-8"),void 0!==n&&"console"in t&&console.warn("TextEncoder constructor called with encoding label, which is ignored.");return Object.defineProperty||(this.encoding=l._encoding.name.toLowerCase()),l}function T(n){var t=n.fatal,e=0,r=0,i=0,u=128,o=191;this.handler=function(n,s){if(s===a&&0!==i)return i=0,h(t);if(s===a)return c;if(0===i){if(l(s,0,127))return s;if(l(s,194,223))i=1,e=31&s;else if(l(s,224,239))224===s&&(u=160),237===s&&(o=159),i=2,e=15&s;else{if(!l(s,240,244))return h(t);240===s&&(u=144),244===s&&(o=143),i=3,e=7&s}return null}if(!l(s,u,o))return e=i=r=0,u=128,o=191,n.prepend(s),h(t);if(u=128,o=191,e=e<<6|63&s,(r+=1)!==i)return null;var p=e;return e=i=r=0,p}}function A(n){n.fatal,this.handler=function(n,t){if(t===a)return c;if(o(t))return t;var e,r;l(t,128,2047)?(e=1,r=192):l(t,2048,65535)?(e=2,r=224):l(t,65536,1114111)&&(e=3,r=240);for(var i=[(t>>6*e)+r];e>0;){var u=t>>6*(e-1);i.push(128|63&u),e-=1}return i}}function L(n,t){var e=t.fatal;this.handler=function(t,l){if(l===a)return c;if(u(l))return l;var r=n[l-128];return null===r?h(e):r}}function P(n,t){t.fatal,this.handler=function(t,e){if(e===a)return c;if(o(e))return e;var l=_(e,n);return null===l&&p(e),l+128}}function C(n){var t=n.fatal,e=0,r=0,i=0;this.handler=function(n,o){if(o===a&&0===e&&0===r&&0===i)return c;var s;if(o!==a||0===e&&0===r&&0===i||(e=0,r=0,i=0,h(t)),0!==i){s=null,l(o,48,57)&&(s=function(n){if(n>39419&&n<189e3||n>1237575)return null;if(7457===n)return 59335;var t,e=0,l=0,r=w("gb18030-ranges");for(t=0;t<r.length;++t){var i=r[t];if(!(i[0]<=n))break;e=i[0],l=i[1]}return l+n-e}(10*(126*(10*(e-129)+r-48)+i-129)+o-48));var p=[r,i,o];return e=0,r=0,i=0,null===s?(n.prepend(p),h(t)):s}if(0!==r)return l(o,129,254)?(i=o,null):(n.prepend([r,o]),e=0,r=0,h(t));if(0!==e){if(l(o,48,57))return r=o,null;var d=e,f=null;e=0;var m=o<127?64:65;return(l(o,64,126)||l(o,128,254))&&(f=190*(d-129)+(o-m)),null===(s=null===f?null:b(f,w("gb18030")))&&u(o)&&n.prepend(o),null===s?h(t):s}return u(o)?o:128===o?8364:l(o,129,254)?(e=o,null):h(t)}}function R(n,t){n.fatal,this.handler=function(n,e){if(e===a)return c;if(o(e))return e;if(58853===e)return p(e);if(t&&8364===e)return 128;var l=_(e,w("gb18030"));if(null!==l){var i=l%190;return[r(l/190)+129,i+(i<63?64:65)]}if(t)return p(e);l=function(n){if(59335===n)return 7457;var t,e=0,l=0,r=w("gb18030-ranges");for(t=0;t<r.length;++t){var i=r[t];if(!(i[1]<=n))break;e=i[1],l=i[0]}return l+n-e}(e);var u=r(l/10/126/10),s=r((l-=10*u*126*10)/10/126),h=r((l-=10*s*126)/10);return[u+129,s+48,h+129,l-10*h+48]}}function O(n){var t=n.fatal,e=0;this.handler=function(n,r){if(r===a&&0!==e)return e=0,h(t);if(r===a&&0===e)return c;if(0!==e){var i=e,o=null;e=0;var s=r<127?64:98;switch((l(r,64,126)||l(r,161,254))&&(o=157*(i-129)+(r-s)),o){case 1133:return[202,772];case 1135:return[202,780];case 1164:return[234,772];case 1166:return[234,780]}var p=null===o?null:b(o,w("big5"));return null===p&&u(r)&&n.prepend(r),null===p?h(t):p}return u(r)?r:l(r,129,254)?(e=r,null):h(t)}}function D(n){n.fatal,this.handler=function(n,t){if(t===a)return c;if(o(t))return t;var e=function(n){g=g||w("big5").map((function(n,t){return t<5024?null:n}));var t=g;return 9552===n||9566===n||9569===n||9578===n||21313===n||21317===n?t.lastIndexOf(n):_(n,t)}(t);if(null===e)return p(t);var l=r(e/157)+129;if(l<161)return p(t);var i=e%157;return[l,i+(i<63?64:98)]}}function I(n){var t=n.fatal,e=!1,r=0;this.handler=function(n,i){if(i===a&&0!==r)return r=0,h(t);if(i===a&&0===r)return c;if(142===r&&l(i,161,223))return r=0,65216+i;if(143===r&&l(i,161,254))return e=!0,r=i,null;if(0!==r){var o=r;r=0;var s=null;return l(o,161,254)&&l(i,161,254)&&(s=b(94*(o-161)+(i-161),w(e?"jis0212":"jis0208"))),e=!1,l(i,161,254)||n.prepend(i),null===s?h(t):s}return u(i)?i:142===i||143===i||l(i,161,254)?(r=i,null):h(t)}}function z(n){n.fatal,this.handler=function(n,t){if(t===a)return c;if(o(t))return t;if(165===t)return 92;if(8254===t)return 126;if(l(t,65377,65439))return[142,t-65377+161];8722===t&&(t=65293);var e=_(t,w("jis0208"));return null===e?p(t):[r(e/94)+161,e%94+161]}}function N(n){var t=n.fatal,e=0,r=0,i=!1;this.handler=function(n,u){switch(e){default:case 0:return 27===u?(e=5,null):l(u,0,127)&&14!==u&&15!==u&&27!==u?(i=!1,u):u===a?c:(i=!1,h(t));case 1:return 27===u?(e=5,null):92===u?(i=!1,165):126===u?(i=!1,8254):l(u,0,127)&&14!==u&&15!==u&&27!==u&&92!==u&&126!==u?(i=!1,u):u===a?c:(i=!1,h(t));case 2:return 27===u?(e=5,null):l(u,33,95)?(i=!1,65344+u):u===a?c:(i=!1,h(t));case 3:return 27===u?(e=5,null):l(u,33,126)?(i=!1,r=u,e=4,null):u===a?c:(i=!1,h(t));case 4:if(27===u)return e=5,h(t);if(l(u,33,126)){e=3;var o=b(94*(r-33)+u-33,w("jis0208"));return null===o?h(t):o}return u===a?(e=3,n.prepend(u),h(t)):(e=3,h(t));case 5:return 36===u||40===u?(r=u,e=6,null):(n.prepend(u),i=!1,e=0,h(t));case 6:var s=r;r=0;var p=null;if(40===s&&66===u&&(p=0),40===s&&74===u&&(p=1),40===s&&73===u&&(p=2),36!==s||64!==u&&66!==u||(p=3),null!==p){e=e=p;var d=i;return i=!0,d?h(t):null}return n.prepend([s,u]),i=!1,e=0,h(t)}}}function B(n){n.fatal;var t=0;this.handler=function(n,e){if(e===a&&0!==t)return n.prepend(e),t=0,[27,40,66];if(e===a&&0===t)return c;if(!(0!==t&&1!==t||14!==e&&15!==e&&27!==e))return p(65533);if(0===t&&o(e))return e;if(1===t&&(o(e)&&92!==e&&126!==e||165==e||8254==e)){if(o(e))return e;if(165===e)return 92;if(8254===e)return 126}if(o(e)&&0!==t)return n.prepend(e),t=0,[27,40,66];if((165===e||8254===e)&&1!==t)return n.prepend(e),t=1,[27,40,74];8722===e&&(e=65293);var l=_(e,w("jis0208"));return null===l?p(e):2!==t?(n.prepend(e),t=2,[27,36,66]):[r(l/94)+33,l%94+33]}}function F(n){var t=n.fatal,e=0;this.handler=function(n,r){if(r===a&&0!==e)return e=0,h(t);if(r===a&&0===e)return c;if(0!==e){var i=e,o=null;e=0;var s=r<127?64:65,p=i<160?129:193;if((l(r,64,126)||l(r,128,252))&&(o=188*(i-p)+r-s),l(o,8836,10715))return 48508+o;var d=null===o?null:b(o,w("jis0208"));return null===d&&u(r)&&n.prepend(r),null===d?h(t):d}return u(r)||128===r?r:l(r,161,223)?65216+r:l(r,129,159)||l(r,224,252)?(e=r,null):h(t)}}function k(n){n.fatal,this.handler=function(n,t){if(t===a)return c;if(o(t)||128===t)return t;if(165===t)return 92;if(8254===t)return 126;if(l(t,65377,65439))return t-65377+161;8722===t&&(t=65293);var e=function(n){return v=v||w("jis0208").map((function(n,t){return l(t,8272,8835)?null:n})),v.indexOf(n)}(t);if(null===e)return p(t);var i=r(e/188),u=e%188;return[i+(i<31?129:193),u+(u<63?64:65)]}}function U(n){var t=n.fatal,e=0;this.handler=function(n,r){if(r===a&&0!==e)return e=0,h(t);if(r===a&&0===e)return c;if(0!==e){var i=e,o=null;e=0,l(r,65,254)&&(o=190*(i-129)+(r-65));var s=null===o?null:b(o,w("euc-kr"));return null===o&&u(r)&&n.prepend(r),null===s?h(t):s}return u(r)?r:l(r,129,254)?(e=r,null):h(t)}}function j(n){n.fatal,this.handler=function(n,t){if(t===a)return c;if(o(t))return t;var e=_(t,w("euc-kr"));return null===e?p(t):[r(e/190)+129,e%190+65]}}function G(n,t){var e=n>>8,l=255&n;return t?[e,l]:[l,e]}function H(n,t){var e=t.fatal,r=null,i=null;this.handler=function(t,u){if(u===a&&(null!==r||null!==i))return h(e);if(u===a&&null===r&&null===i)return c;if(null===r)return r=u,null;var o;if(o=n?(r<<8)+u:(u<<8)+r,r=null,null!==i){var s=i;return i=null,l(o,56320,57343)?65536+1024*(s-55296)+(o-56320):(t.prepend(G(o,n)),h(e))}return l(o,55296,56319)?(i=o,null):l(o,56320,57343)?h(e):o}}function V(n,t){t.fatal,this.handler=function(t,e){if(e===a)return c;if(l(e,0,65535))return G(e,n);var r=G(55296+(e-65536>>10),n),i=G(56320+(e-65536&1023),n);return r.concat(i)}}function W(n){n.fatal,this.handler=function(n,t){return t===a?c:u(t)?t:63360+t-128}}function q(n){n.fatal,this.handler=function(n,t){return t===a?c:o(t)?t:l(t,63360,63487)?t-63360+128:p(t)}}Object.defineProperty&&(Object.defineProperty(E.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),Object.defineProperty(E.prototype,"fatal",{get:function(){return"fatal"===this._error_mode}}),Object.defineProperty(E.prototype,"ignoreBOM",{get:function(){return this._ignoreBOM}})),E.prototype.decode=function(n,t){var e;e="object"==typeof n&&n instanceof ArrayBuffer?new Uint8Array(n):"object"==typeof n&&"buffer"in n&&n.buffer instanceof ArrayBuffer?new Uint8Array(n.buffer,n.byteOffset,n.byteLength):new Uint8Array(0),t=i(t),this._do_not_flush||(this._decoder=x[this._encoding.name]({fatal:"fatal"===this._error_mode}),this._BOMseen=!1),this._do_not_flush=Boolean(t.stream);for(var l,r=new s(e),u=[];;){var o=r.read();if(o===a)break;if((l=this._decoder.handler(r,o))===c)break;null!==l&&(Array.isArray(l)?u.push.apply(u,l):u.push(l))}if(!this._do_not_flush){do{if((l=this._decoder.handler(r,r.read()))===c)break;null!==l&&(Array.isArray(l)?u.push.apply(u,l):u.push(l))}while(!r.endOfStream());this._decoder=null}return function(n){var t,e;return t=["UTF-8","UTF-16LE","UTF-16BE"],e=this._encoding.name,-1===t.indexOf(e)||this._ignoreBOM||this._BOMseen||(n.length>0&&65279===n[0]?(this._BOMseen=!0,n.shift()):n.length>0&&(this._BOMseen=!0)),function(n){for(var t="",e=0;e<n.length;++e){var l=n[e];l<=65535?t+=String.fromCharCode(l):(l-=65536,t+=String.fromCharCode(55296+(l>>10),56320+(1023&l)))}return t}(n)}.call(this,u)},Object.defineProperty&&Object.defineProperty(S.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),S.prototype.encode=function(n,t){n=void 0===n?"":String(n),t=i(t),this._do_not_flush||(this._encoder=y[this._encoding.name]({fatal:"fatal"===this._fatal})),this._do_not_flush=Boolean(t.stream);for(var e,l=new s(function(n){for(var t=String(n),e=t.length,l=0,r=[];l<e;){var i=t.charCodeAt(l);if(i<55296||i>57343)r.push(i);else if(56320<=i&&i<=57343)r.push(65533);else if(55296<=i&&i<=56319)if(l===e-1)r.push(65533);else{var u=t.charCodeAt(l+1);if(56320<=u&&u<=57343){var o=1023&i,a=1023&u;r.push(65536+(o<<10)+a),l+=1}else r.push(65533)}l+=1}return r}(n)),r=[];;){var u=l.read();if(u===a)break;if((e=this._encoder.handler(l,u))===c)break;Array.isArray(e)?r.push.apply(r,e):r.push(e)}if(!this._do_not_flush){for(;(e=this._encoder.handler(l,l.read()))!==c;)Array.isArray(e)?r.push.apply(r,e):r.push(e);this._encoder=null}return new Uint8Array(r)},y["UTF-8"]=function(n){return new A(n)},x["UTF-8"]=function(n){return new T(n)},"encoding-indexes"in t&&f.forEach((function(n){"Legacy single-byte encodings"===n.heading&&n.encodings.forEach((function(n){var t=n.name,e=w(t.toLowerCase());x[t]=function(n){return new L(e,n)},y[t]=function(n){return new P(e,n)}}))})),x.GBK=function(n){return new C(n)},y.GBK=function(n){return new R(n,!0)},y.gb18030=function(n){return new R(n)},x.gb18030=function(n){return new C(n)},y.Big5=function(n){return new D(n)},x.Big5=function(n){return new O(n)},y["EUC-JP"]=function(n){return new z(n)},x["EUC-JP"]=function(n){return new I(n)},y["ISO-2022-JP"]=function(n){return new B(n)},x["ISO-2022-JP"]=function(n){return new N(n)},y.Shift_JIS=function(n){return new k(n)},x.Shift_JIS=function(n){return new F(n)},y["EUC-KR"]=function(n){return new j(n)},x["EUC-KR"]=function(n){return new U(n)},y["UTF-16BE"]=function(n){return new V(!0,n)},x["UTF-16BE"]=function(n){return new H(!0,n)},y["UTF-16LE"]=function(n){return new V(!1,n)},x["UTF-16LE"]=function(n){return new H(!1,n)},y["x-user-defined"]=function(n){return new q(n)},x["x-user-defined"]=function(n){return new W(n)},t.TextEncoder||(t.TextEncoder=S),t.TextDecoder||(t.TextDecoder=E),n.exports&&(n.exports={TextEncoder:t.TextEncoder,TextDecoder:t.TextDecoder,EncodingIndexes:t["encoding-indexes"]})}(this||{})},9087:function(n,t){!function(n){"use strict";function t(){}function e(n){if(!n)return t;var e,l,r=n.scale[0],i=n.scale[1],u=n.translate[0],o=n.translate[1];return function(n,t){t||(e=l=0),n[0]=(e+=n[0])*r+u,n[1]=(l+=n[1])*i+o}}function l(n,t){for(var e=0,l=n.length;e<l;){var r=e+l>>>1;n[r]<t?e=r+1:l=r}return e}function r(n,t){var e={type:"Feature",id:t.id,properties:t.properties||{},geometry:i(n,t)};return null==t.id&&delete e.id,e}function i(n,t){var l=e(n.transform),r=n.arcs;function i(n,t){t.length&&t.pop();for(var e,i=r[n<0?~n:n],u=0,o=i.length;u<o;++u)t.push(e=i[u].slice()),l(e,u);n<0&&function(n,t){for(var e,l=n.length,r=l-t;r<--l;)e=n[r],n[r++]=n[l],n[l]=e}(t,o)}function u(n){return n=n.slice(),l(n,0),n}function o(n){for(var t=[],e=0,l=n.length;e<l;++e)i(n[e],t);return t.length<2&&t.push(t[0].slice()),t}function a(n){for(var t=o(n);t.length<4;)t.push(t[0].slice());return t}function s(n){return n.map(a)}var c={Point:function(n){return u(n.coordinates)},MultiPoint:function(n){return n.coordinates.map(u)},LineString:function(n){return o(n.arcs)},MultiLineString:function(n){return n.arcs.map(o)},Polygon:function(n){return s(n.arcs)},MultiPolygon:function(n){return n.arcs.map(s)}};return function n(t){var e=t.type;return"GeometryCollection"===e?{type:e,geometries:t.geometries.map(n)}:e in c?{type:e,coordinates:c[e](t)}:null}(t)}function u(n,t){var e={},l={},r={},i=[],u=-1;function o(n,t){for(var l in n){var r=n[l];delete t[r.start],delete r.start,delete r.end,r.forEach((function(n){e[n<0?~n:n]=1})),i.push(r)}}return t.forEach((function(e,l){var r,i=n.arcs[e<0?~e:e];i.length<3&&!i[1][0]&&!i[1][1]&&(r=t[++u],t[u]=e,t[l]=r)})),t.forEach((function(t){var e,i,u=function(t){var e,l=n.arcs[t<0?~t:t],r=l[0];return n.transform?(e=[0,0],l.forEach((function(n){e[0]+=n[0],e[1]+=n[1]}))):e=l[l.length-1],t<0?[e,r]:[r,e]}(t),o=u[0],a=u[1];if(e=r[o])if(delete r[e.end],e.push(t),e.end=a,i=l[a]){delete l[i.start];var s=i===e?e:e.concat(i);l[s.start=e.start]=r[s.end=i.end]=s}else l[e.start]=r[e.end]=e;else if(e=l[a])if(delete l[e.start],e.unshift(t),e.start=o,i=r[o]){delete r[i.end];var c=i===e?e:i.concat(e);l[c.start=i.start]=r[c.end=e.end]=c}else l[e.start]=r[e.end]=e;else l[(e=[t]).start=o]=r[e.end=a]=e})),o(r,l),o(l,r),t.forEach((function(n){e[n<0?~n:n]||i.push([n])})),i}function o(n,t,e){var l=[];function r(n){var t=n<0?~n:n;(s[t]||(s[t]=[])).push({i:n,g:a})}function i(n){n.forEach(r)}function o(n){n.forEach(i)}if(arguments.length>1){var a,s=[],c={LineString:i,MultiLineString:o,Polygon:o,MultiPolygon:function(n){n.forEach(o)}};(function n(t){"GeometryCollection"===t.type?t.geometries.forEach(n):t.type in c&&(a=t,c[t.type](t.arcs))})(t),s.forEach(arguments.length<3?function(n){l.push(n[0].i)}:function(n){e(n[0].g,n[n.length-1].g)&&l.push(n[0].i)})}else for(var h=0,p=n.arcs.length;h<p;++h)l.push(h);return{type:"MultiLineString",arcs:u(n,l)}}function a(n){var t=n[0],e=n[1],l=n[2];return Math.abs((t[0]-l[0])*(e[1]-t[1])-(t[0]-e[0])*(l[1]-t[1]))}function s(n,t){var e={},l=[],r=[];function o(n){n.forEach((function(t){t.forEach((function(t){(e[t=t<0?~t:t]||(e[t]=[])).push(n)}))})),l.push(n)}function a(t){return Math.abs(function(n){for(var t,e=-1,l=n.length,r=n[l-1],i=0;++e<l;)t=r,r=n[e],i+=t[0]*r[1]-t[1]*r[0];return i/2}(i(n,{type:"Polygon",arcs:[t]}).coordinates[0]))}return t.forEach((function(n){"Polygon"===n.type?o(n.arcs):"MultiPolygon"===n.type&&n.arcs.forEach(o)})),l.forEach((function(n){if(!n._){var t=[],l=[n];for(n._=1,r.push(t);n=l.pop();)t.push(n),n.forEach((function(n){n.forEach((function(n){e[n<0?~n:n].forEach((function(n){n._||(n._=1,l.push(n))}))}))}))}})),l.forEach((function(n){delete n._})),{type:"MultiPolygon",arcs:r.map((function(t){var l,r=[];if(t.forEach((function(n){n.forEach((function(n){n.forEach((function(n){e[n<0?~n:n].length<2&&r.push(n)}))}))})),(l=(r=u(n,r)).length)>1)for(var i,o,s=1,c=a(r[0]);s<l;++s)(i=a(r[s]))>c&&(o=r[0],r[0]=r[s],r[s]=o,c=i);return r}))}}function c(n,t){return n[1][2]-t[1][2]}n.version="1.6.27",n.mesh=function(n){return i(n,o.apply(this,arguments))},n.meshArcs=o,n.merge=function(n){return i(n,s.apply(this,arguments))},n.mergeArcs=s,n.feature=function(n,t){return"GeometryCollection"===t.type?{type:"FeatureCollection",features:t.geometries.map((function(t){return r(n,t)}))}:r(n,t)},n.neighbors=function(n){var t={},e=n.map((function(){return[]}));function r(n,e){n.forEach((function(n){n<0&&(n=~n);var l=t[n];l?l.push(e):t[n]=[e]}))}function i(n,t){n.forEach((function(n){r(n,t)}))}var u={LineString:r,MultiLineString:i,Polygon:i,MultiPolygon:function(n,t){n.forEach((function(n){i(n,t)}))}};for(var o in n.forEach((function n(t,e){"GeometryCollection"===t.type?t.geometries.forEach((function(t){n(t,e)})):t.type in u&&u[t.type](t.arcs,e)})),t)for(var a=t[o],s=a.length,c=0;c<s;++c)for(var h=c+1;h<s;++h){var p,d=a[c],f=a[h];(p=e[d])[o=l(p,f)]!==f&&p.splice(o,0,f),(p=e[f])[o=l(p,d)]!==d&&p.splice(o,0,d)}return e},n.presimplify=function(n,l){var r=e(n.transform),i=function(n){if(!n)return t;var e,l,r=n.scale[0],i=n.scale[1],u=n.translate[0],o=n.translate[1];return function(n,t){t||(e=l=0);var a=Math.round((n[0]-u)/r),s=Math.round((n[1]-o)/i);n[0]=a-e,n[1]=s-l,e=a,l=s}}(n.transform),u=function(){var n={},t=[],e=0;function l(n,e){for(;e>0;){var l=(e+1>>1)-1,r=t[l];if(c(n,r)>=0)break;t[r._=e]=r,t[n._=e=l]=n}}function r(n,l){for(;;){var r=l+1<<1,i=r-1,u=l,o=t[u];if(i<e&&c(t[i],o)<0&&(o=t[u=i]),r<e&&c(t[r],o)<0&&(o=t[u=r]),u===l)break;t[o._=l]=o,t[n._=l=u]=n}}return n.push=function(n){return l(t[n._=e]=n,e++),e},n.pop=function(){if(!(e<=0)){var n,l=t[0];return--e>0&&(n=t[e],r(t[n._=0]=n,0)),l}},n.remove=function(n){var i,u=n._;if(t[u]===n)return u!==--e&&(c(i=t[e],n)<0?l:r)(t[i._=u]=i,u),u},n}();function o(n){u.remove(n),n[1][2]=l(n),u.push(n)}return l||(l=a),n.arcs.forEach((function(n){var t,e,a,s,c=[],h=0;for(e=0,a=n.length;e<a;++e)s=n[e],r(n[e]=[s[0],s[1],1/0],e);for(e=1,a=n.length-1;e<a;++e)(t=n.slice(e-1,e+2))[1][2]=l(t),c.push(t),u.push(t);for(e=0,a=c.length;e<a;++e)(t=c[e]).previous=c[e-1],t.next=c[e+1];for(;t=u.pop();){var p=t.previous,d=t.next;t[1][2]<h?t[1][2]=h:h=t[1][2],p&&(p.next=d,p[2]=t[2],o(p)),d&&(d.previous=p,d[0]=t[0],o(d))}n.forEach(i)})),n},Object.defineProperty(n,"__esModule",{value:!0})}(t)},384:n=>{n.exports=function(n){return n&&"object"==typeof n&&"function"==typeof n.copy&&"function"==typeof n.fill&&"function"==typeof n.readUInt8}},5955:(n,t,e)=>{"use strict";var l=e(2584),r=e(8662),i=e(6430),u=e(5692);function o(n){return n.call.bind(n)}var a="undefined"!=typeof BigInt,s="undefined"!=typeof Symbol,c=o(Object.prototype.toString),h=o(Number.prototype.valueOf),p=o(String.prototype.valueOf),d=o(Boolean.prototype.valueOf);if(a)var f=o(BigInt.prototype.valueOf);if(s)var m=o(Symbol.prototype.valueOf);function v(n,t){if("object"!=typeof n)return!1;try{return t(n),!0}catch(n){return!1}}function g(n){return"[object Map]"===c(n)}function y(n){return"[object Set]"===c(n)}function x(n){return"[object WeakMap]"===c(n)}function b(n){return"[object WeakSet]"===c(n)}function _(n){return"[object ArrayBuffer]"===c(n)}function w(n){return"undefined"!=typeof ArrayBuffer&&(_.working?_(n):n instanceof ArrayBuffer)}function M(n){return"[object DataView]"===c(n)}function E(n){return"undefined"!=typeof DataView&&(M.working?M(n):n instanceof DataView)}t.isArgumentsObject=l,t.isGeneratorFunction=r,t.isTypedArray=u,t.isPromise=function(n){return"undefined"!=typeof Promise&&n instanceof Promise||null!==n&&"object"==typeof n&&"function"==typeof n.then&&"function"==typeof n.catch},t.isArrayBufferView=function(n){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(n):u(n)||E(n)},t.isUint8Array=function(n){return"Uint8Array"===i(n)},t.isUint8ClampedArray=function(n){return"Uint8ClampedArray"===i(n)},t.isUint16Array=function(n){return"Uint16Array"===i(n)},t.isUint32Array=function(n){return"Uint32Array"===i(n)},t.isInt8Array=function(n){return"Int8Array"===i(n)},t.isInt16Array=function(n){return"Int16Array"===i(n)},t.isInt32Array=function(n){return"Int32Array"===i(n)},t.isFloat32Array=function(n){return"Float32Array"===i(n)},t.isFloat64Array=function(n){return"Float64Array"===i(n)},t.isBigInt64Array=function(n){return"BigInt64Array"===i(n)},t.isBigUint64Array=function(n){return"BigUint64Array"===i(n)},g.working="undefined"!=typeof Map&&g(new Map),t.isMap=function(n){return"undefined"!=typeof Map&&(g.working?g(n):n instanceof Map)},y.working="undefined"!=typeof Set&&y(new Set),t.isSet=function(n){return"undefined"!=typeof Set&&(y.working?y(n):n instanceof Set)},x.working="undefined"!=typeof WeakMap&&x(new WeakMap),t.isWeakMap=function(n){return"undefined"!=typeof WeakMap&&(x.working?x(n):n instanceof WeakMap)},b.working="undefined"!=typeof WeakSet&&b(new WeakSet),t.isWeakSet=function(n){return b(n)},_.working="undefined"!=typeof ArrayBuffer&&_(new ArrayBuffer),t.isArrayBuffer=w,M.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&M(new DataView(new ArrayBuffer(1),0,1)),t.isDataView=E;var S="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function T(n){return"[object SharedArrayBuffer]"===c(n)}function A(n){return void 0!==S&&(void 0===T.working&&(T.working=T(new S)),T.working?T(n):n instanceof S)}function L(n){return v(n,h)}function P(n){return v(n,p)}function C(n){return v(n,d)}function R(n){return a&&v(n,f)}function O(n){return s&&v(n,m)}t.isSharedArrayBuffer=A,t.isAsyncFunction=function(n){return"[object AsyncFunction]"===c(n)},t.isMapIterator=function(n){return"[object Map Iterator]"===c(n)},t.isSetIterator=function(n){return"[object Set Iterator]"===c(n)},t.isGeneratorObject=function(n){return"[object Generator]"===c(n)},t.isWebAssemblyCompiledModule=function(n){return"[object WebAssembly.Module]"===c(n)},t.isNumberObject=L,t.isStringObject=P,t.isBooleanObject=C,t.isBigIntObject=R,t.isSymbolObject=O,t.isBoxedPrimitive=function(n){return L(n)||P(n)||C(n)||R(n)||O(n)},t.isAnyArrayBuffer=function(n){return"undefined"!=typeof Uint8Array&&(w(n)||A(n))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(n){Object.defineProperty(t,n,{enumerable:!1,value:function(){throw new Error(n+" is not supported in userland")}})}))},9539:(n,t,e)=>{var l=Object.getOwnPropertyDescriptors||function(n){for(var t=Object.keys(n),e={},l=0;l<t.length;l++)e[t[l]]=Object.getOwnPropertyDescriptor(n,t[l]);return e},r=/%[sdj%]/g;t.format=function(n){if(!y(n)){for(var t=[],e=0;e<arguments.length;e++)t.push(a(arguments[e]));return t.join(" ")}e=1;for(var l=arguments,i=l.length,u=String(n).replace(r,(function(n){if("%%"===n)return"%";if(e>=i)return n;switch(n){case"%s":return String(l[e++]);case"%d":return Number(l[e++]);case"%j":try{return JSON.stringify(l[e++])}catch(n){return"[Circular]"}default:return n}})),o=l[e];e<i;o=l[++e])v(o)||!_(o)?u+=" "+o:u+=" "+a(o);return u},t.deprecate=function(n,e){if("undefined"!=typeof process&&!0===process.noDeprecation)return n;if("undefined"==typeof process)return function(){return t.deprecate(n,e).apply(this,arguments)};var l=!1;return function(){if(!l){if(process.throwDeprecation)throw new Error(e);process.traceDeprecation?console.trace(e):console.error(e),l=!0}return n.apply(this,arguments)}};var i={},u=/^$/;if(process.env.NODE_DEBUG){var o=process.env.NODE_DEBUG;o=o.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),u=new RegExp("^"+o+"$","i")}function a(n,e){var l={seen:[],stylize:c};return arguments.length>=3&&(l.depth=arguments[2]),arguments.length>=4&&(l.colors=arguments[3]),m(e)?l.showHidden=e:e&&t._extend(l,e),x(l.showHidden)&&(l.showHidden=!1),x(l.depth)&&(l.depth=2),x(l.colors)&&(l.colors=!1),x(l.customInspect)&&(l.customInspect=!0),l.colors&&(l.stylize=s),h(l,n,l.depth)}function s(n,t){var e=a.styles[t];return e?"["+a.colors[e][0]+"m"+n+"["+a.colors[e][1]+"m":n}function c(n,t){return n}function h(n,e,l){if(n.customInspect&&e&&E(e.inspect)&&e.inspect!==t.inspect&&(!e.constructor||e.constructor.prototype!==e)){var r=e.inspect(l,n);return y(r)||(r=h(n,r,l)),r}var i=function(n,t){if(x(t))return n.stylize("undefined","undefined");if(y(t)){var e="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return n.stylize(e,"string")}return g(t)?n.stylize(""+t,"number"):m(t)?n.stylize(""+t,"boolean"):v(t)?n.stylize("null","null"):void 0}(n,e);if(i)return i;var u=Object.keys(e),o=function(n){var t={};return n.forEach((function(n,e){t[n]=!0})),t}(u);if(n.showHidden&&(u=Object.getOwnPropertyNames(e)),M(e)&&(u.indexOf("message")>=0||u.indexOf("description")>=0))return p(e);if(0===u.length){if(E(e)){var a=e.name?": "+e.name:"";return n.stylize("[Function"+a+"]","special")}if(b(e))return n.stylize(RegExp.prototype.toString.call(e),"regexp");if(w(e))return n.stylize(Date.prototype.toString.call(e),"date");if(M(e))return p(e)}var s,c="",_=!1,S=["{","}"];return f(e)&&(_=!0,S=["[","]"]),E(e)&&(c=" [Function"+(e.name?": "+e.name:"")+"]"),b(e)&&(c=" "+RegExp.prototype.toString.call(e)),w(e)&&(c=" "+Date.prototype.toUTCString.call(e)),M(e)&&(c=" "+p(e)),0!==u.length||_&&0!=e.length?l<0?b(e)?n.stylize(RegExp.prototype.toString.call(e),"regexp"):n.stylize("[Object]","special"):(n.seen.push(e),s=_?function(n,t,e,l,r){for(var i=[],u=0,o=t.length;u<o;++u)L(t,String(u))?i.push(d(n,t,e,l,String(u),!0)):i.push("");return r.forEach((function(r){r.match(/^\d+$/)||i.push(d(n,t,e,l,r,!0))})),i}(n,e,l,o,u):u.map((function(t){return d(n,e,l,o,t,_)})),n.seen.pop(),function(n,t,e){return n.reduce((function(n,t){return t.indexOf("\n"),n+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?e[0]+(""===t?"":t+"\n ")+" "+n.join(",\n  ")+" "+e[1]:e[0]+t+" "+n.join(", ")+" "+e[1]}(s,c,S)):S[0]+c+S[1]}function p(n){return"["+Error.prototype.toString.call(n)+"]"}function d(n,t,e,l,r,i){var u,o,a;if((a=Object.getOwnPropertyDescriptor(t,r)||{value:t[r]}).get?o=a.set?n.stylize("[Getter/Setter]","special"):n.stylize("[Getter]","special"):a.set&&(o=n.stylize("[Setter]","special")),L(l,r)||(u="["+r+"]"),o||(n.seen.indexOf(a.value)<0?(o=v(e)?h(n,a.value,null):h(n,a.value,e-1)).indexOf("\n")>-1&&(o=i?o.split("\n").map((function(n){return"  "+n})).join("\n").slice(2):"\n"+o.split("\n").map((function(n){return"   "+n})).join("\n")):o=n.stylize("[Circular]","special")),x(u)){if(i&&r.match(/^\d+$/))return o;(u=JSON.stringify(""+r)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.slice(1,-1),u=n.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=n.stylize(u,"string"))}return u+": "+o}function f(n){return Array.isArray(n)}function m(n){return"boolean"==typeof n}function v(n){return null===n}function g(n){return"number"==typeof n}function y(n){return"string"==typeof n}function x(n){return void 0===n}function b(n){return _(n)&&"[object RegExp]"===S(n)}function _(n){return"object"==typeof n&&null!==n}function w(n){return _(n)&&"[object Date]"===S(n)}function M(n){return _(n)&&("[object Error]"===S(n)||n instanceof Error)}function E(n){return"function"==typeof n}function S(n){return Object.prototype.toString.call(n)}function T(n){return n<10?"0"+n.toString(10):n.toString(10)}t.debuglog=function(n){if(n=n.toUpperCase(),!i[n])if(u.test(n)){var e=process.pid;i[n]=function(){var l=t.format.apply(t,arguments);console.error("%s %d: %s",n,e,l)}}else i[n]=function(){};return i[n]},t.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.types=e(5955),t.isArray=f,t.isBoolean=m,t.isNull=v,t.isNullOrUndefined=function(n){return null==n},t.isNumber=g,t.isString=y,t.isSymbol=function(n){return"symbol"==typeof n},t.isUndefined=x,t.isRegExp=b,t.types.isRegExp=b,t.isObject=_,t.isDate=w,t.types.isDate=w,t.isError=M,t.types.isNativeError=M,t.isFunction=E,t.isPrimitive=function(n){return null===n||"boolean"==typeof n||"number"==typeof n||"string"==typeof n||"symbol"==typeof n||void 0===n},t.isBuffer=e(384);var A=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function L(n,t){return Object.prototype.hasOwnProperty.call(n,t)}t.log=function(){var n,e;console.log("%s - %s",(e=[T((n=new Date).getHours()),T(n.getMinutes()),T(n.getSeconds())].join(":"),[n.getDate(),A[n.getMonth()],e].join(" ")),t.format.apply(t,arguments))},t.inherits=e(5717),t._extend=function(n,t){if(!t||!_(t))return n;for(var e=Object.keys(t),l=e.length;l--;)n[e[l]]=t[e[l]];return n};var P="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function C(n,t){if(!n){var e=new Error("Promise was rejected with a falsy value");e.reason=n,n=e}return t(n)}t.promisify=function(n){if("function"!=typeof n)throw new TypeError('The "original" argument must be of type Function');if(P&&n[P]){var t;if("function"!=typeof(t=n[P]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,P,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,e,l=new Promise((function(n,l){t=n,e=l})),r=[],i=0;i<arguments.length;i++)r.push(arguments[i]);r.push((function(n,l){n?e(n):t(l)}));try{n.apply(this,r)}catch(n){e(n)}return l}return Object.setPrototypeOf(t,Object.getPrototypeOf(n)),P&&Object.defineProperty(t,P,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,l(n))},t.promisify.custom=P,t.callbackify=function(n){if("function"!=typeof n)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);var l=t.pop();if("function"!=typeof l)throw new TypeError("The last argument must be of type Function");var r=this,i=function(){return l.apply(r,arguments)};n.apply(this,t).then((function(n){process.nextTick(i.bind(null,null,n))}),(function(n){process.nextTick(C.bind(null,n,i))}))}return Object.setPrototypeOf(t,Object.getPrototypeOf(n)),Object.defineProperties(t,l(n)),t}},6430:(n,t,e)=>{"use strict";var l=e(4029),r=e(3083),i=e(5559),u=e(1924),o=e(7296),a=u("Object.prototype.toString"),s=e(6410)(),c="undefined"==typeof globalThis?e.g:globalThis,h=r(),p=u("String.prototype.slice"),d=Object.getPrototypeOf,f=u("Array.prototype.indexOf",!0)||function(n,t){for(var e=0;e<n.length;e+=1)if(n[e]===t)return e;return-1},m={__proto__:null};l(h,s&&o&&d?function(n){var t=new c[n];if(Symbol.toStringTag in t){var e=d(t),l=o(e,Symbol.toStringTag);if(!l){var r=d(e);l=o(r,Symbol.toStringTag)}m["$"+n]=i(l.get)}}:function(n){var t=new c[n],e=t.slice||t.set;e&&(m["$"+n]=i(e))}),n.exports=function(n){if(!n||"object"!=typeof n)return!1;if(!s){var t=p(a(n),8,-1);return f(h,t)>-1?t:"Object"===t&&function(n){var t=!1;return l(m,(function(e,l){if(!t)try{e(n),t=p(l,1)}catch(n){}})),t}(n)}return o?function(n){var t=!1;return l(m,(function(e,l){if(!t)try{"$"+e(n)===l&&(t=p(l,1))}catch(n){}})),t}(n):null}},4411:n=>{function t(n){var e=this;if(e instanceof t||(e=new t),e.tail=null,e.head=null,e.length=0,n&&"function"==typeof n.forEach)n.forEach((function(n){e.push(n)}));else if(arguments.length>0)for(var l=0,r=arguments.length;l<r;l++)e.push(arguments[l]);return e}function e(n,t){n.tail=new r(t,n.tail,null,n),n.head||(n.head=n.tail),n.length++}function l(n,t){n.head=new r(t,null,n.head,n),n.tail||(n.tail=n.head),n.length++}function r(n,t,e,l){if(!(this instanceof r))return new r(n,t,e,l);this.list=l,this.value=n,t?(t.next=this,this.prev=t):this.prev=null,e?(e.prev=this,this.next=e):this.next=null}n.exports=t,t.Node=r,t.create=t,t.prototype.removeNode=function(n){if(n.list!==this)throw new Error("removing node which does not belong to this list");var t=n.next,e=n.prev;t&&(t.prev=e),e&&(e.next=t),n===this.head&&(this.head=t),n===this.tail&&(this.tail=e),n.list.length--,n.next=null,n.prev=null,n.list=null},t.prototype.unshiftNode=function(n){if(n!==this.head){n.list&&n.list.removeNode(n);var t=this.head;n.list=this,n.next=t,t&&(t.prev=n),this.head=n,this.tail||(this.tail=n),this.length++}},t.prototype.pushNode=function(n){if(n!==this.tail){n.list&&n.list.removeNode(n);var t=this.tail;n.list=this,n.prev=t,t&&(t.next=n),this.tail=n,this.head||(this.head=n),this.length++}},t.prototype.push=function(){for(var n=0,t=arguments.length;n<t;n++)e(this,arguments[n]);return this.length},t.prototype.unshift=function(){for(var n=0,t=arguments.length;n<t;n++)l(this,arguments[n]);return this.length},t.prototype.pop=function(){if(this.tail){var n=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,n}},t.prototype.shift=function(){if(this.head){var n=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,n}},t.prototype.forEach=function(n,t){t=t||this;for(var e=this.head,l=0;null!==e;l++)n.call(t,e.value,l,this),e=e.next},t.prototype.forEachReverse=function(n,t){t=t||this;for(var e=this.tail,l=this.length-1;null!==e;l--)n.call(t,e.value,l,this),e=e.prev},t.prototype.get=function(n){for(var t=0,e=this.head;null!==e&&t<n;t++)e=e.next;if(t===n&&null!==e)return e.value},t.prototype.getReverse=function(n){for(var t=0,e=this.tail;null!==e&&t<n;t++)e=e.prev;if(t===n&&null!==e)return e.value},t.prototype.map=function(n,e){e=e||this;for(var l=new t,r=this.head;null!==r;)l.push(n.call(e,r.value,this)),r=r.next;return l},t.prototype.mapReverse=function(n,e){e=e||this;for(var l=new t,r=this.tail;null!==r;)l.push(n.call(e,r.value,this)),r=r.prev;return l},t.prototype.reduce=function(n,t){var e,l=this.head;if(arguments.length>1)e=t;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");l=this.head.next,e=this.head.value}for(var r=0;null!==l;r++)e=n(e,l.value,r),l=l.next;return e},t.prototype.reduceReverse=function(n,t){var e,l=this.tail;if(arguments.length>1)e=t;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");l=this.tail.prev,e=this.tail.value}for(var r=this.length-1;null!==l;r--)e=n(e,l.value,r),l=l.prev;return e},t.prototype.toArray=function(){for(var n=new Array(this.length),t=0,e=this.head;null!==e;t++)n[t]=e.value,e=e.next;return n},t.prototype.toArrayReverse=function(){for(var n=new Array(this.length),t=0,e=this.tail;null!==e;t++)n[t]=e.value,e=e.prev;return n},t.prototype.slice=function(n,e){(e=e||this.length)<0&&(e+=this.length),(n=n||0)<0&&(n+=this.length);var l=new t;if(e<n||e<0)return l;n<0&&(n=0),e>this.length&&(e=this.length);for(var r=0,i=this.head;null!==i&&r<n;r++)i=i.next;for(;null!==i&&r<e;r++,i=i.next)l.push(i.value);return l},t.prototype.sliceReverse=function(n,e){(e=e||this.length)<0&&(e+=this.length),(n=n||0)<0&&(n+=this.length);var l=new t;if(e<n||e<0)return l;n<0&&(n=0),e>this.length&&(e=this.length);for(var r=this.length,i=this.tail;null!==i&&r>e;r--)i=i.prev;for(;null!==i&&r>n;r--,i=i.prev)l.push(i.value);return l},t.prototype.reverse=function(){for(var n=this.head,t=this.tail,e=n;null!==e;e=e.prev){var l=e.prev;e.prev=e.next,e.next=l}return this.head=t,this.tail=n,this}},2676:()=>{},3083:(n,t,e)=>{"use strict";var l=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],r="undefined"==typeof globalThis?e.g:globalThis;n.exports=function(){for(var n=[],t=0;t<l.length;t++)"function"==typeof r[l[t]]&&(n[n.length]=l[t]);return n}}},__webpack_module_cache__={};function __webpack_require__(n){var t=__webpack_module_cache__[n];if(void 0!==t)return t.exports;var e=__webpack_module_cache__[n]={id:n,exports:{}};return __webpack_modules__[n].call(e.exports,e,e.exports,__webpack_require__),e.exports}__webpack_require__.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(n,t)=>{for(var e in t)__webpack_require__.o(t,e)&&!__webpack_require__.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),__webpack_require__.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__={};(()=>{"use strict";var n={};function t(){}__webpack_require__.r(n),__webpack_require__.d(n,{_Li:()=>M,ZzF:()=>le,DvJ:()=>Ye,TlE:()=>Ie,u9r:()=>Xe,SUY:()=>Na,Ilk:()=>me,_am:()=>za,Ox3:()=>ea,pBf:()=>t,iWj:()=>ue,ZXM:()=>De,VLJ:()=>Ts,nls:()=>wi,ejS:()=>Ei,wem:()=>Tn,FDw:()=>Ln,RsA:()=>v,F5T:()=>pl,ZX$:()=>Ft,yGw:()=>Ut,Kj0:()=>gl,vBJ:()=>vl,xoR:()=>Yu,Wid:()=>qu,bdR:()=>L,Tme:()=>Pe,iKG:()=>na,cPb:()=>Kr,BKK:()=>Ke,_fP:()=>jt,UZH:()=>m,wk1:()=>Hn,iMs:()=>ps,xsS:()=>di,Vj0:()=>ye,jyz:()=>dl,Aip:()=>Lu,$V:()=>ms,xEZ:()=>Kt,rDY:()=>de,FM8:()=>kt,Pa4:()=>Gt,jSK:()=>T,dd2:()=>$t,CP7:()=>ci}),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(n){return"number"==typeof n&&isFinite(n)&&Math.floor(n)===n}),void 0===Math.sign&&(Math.sign=function(n){return n<0?-1:n>0?1:+n}),"name"in Function.prototype==0&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(n){if(null==n)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(n),e=1;e<arguments.length;e++){var l=arguments[e];if(null!=l)for(var r in l)Object.prototype.hasOwnProperty.call(l,r)&&(t[r]=l[r])}return t}),Object.assign(t.prototype,{addEventListener:function(n,t){void 0===this._listeners&&(this._listeners={});var e=this._listeners;void 0===e[n]&&(e[n]=[]),-1===e[n].indexOf(t)&&e[n].push(t)},hasEventListener:function(n,t){if(void 0===this._listeners)return!1;var e=this._listeners;return void 0!==e[n]&&-1!==e[n].indexOf(t)},removeEventListener:function(n,t){if(void 0!==this._listeners){var e=this._listeners[n];if(void 0!==e){var l=e.indexOf(t);-1!==l&&e.splice(l,1)}}},dispatchEvent:function(n){if(void 0!==this._listeners){var t=this._listeners[n.type];if(void 0!==t){n.target=this;for(var e=t.slice(0),l=0,r=e.length;l<r;l++)e[l].call(this,n)}}}});var e,l,r,u,o,a,s,c,h,p,d,f,m="101",v={LEFT:0,MIDDLE:1,RIGHT:2},g=0,y=1,x=2,b=1,_=2,w=0,M=1,E=2,S=0,T=2,A=0,L=1,P=2,C=3,R=4,O=5,D=100,I=101,z=102,N=103,B=104,F=200,k=201,U=202,j=203,G=204,H=205,V=206,W=207,q=208,X=209,Y=210,Z=0,J=1,K=2,Q=3,$=4,nn=5,tn=6,en=7,ln=0,rn=1,un=2,on=0,an=1,sn=2,cn=3,hn=4,pn=5,dn=301,fn=302,mn=303,vn=304,gn=305,yn=306,xn=307,bn=1e3,_n=1001,wn=1002,Mn=1003,En=1004,Sn=1005,Tn=1006,An=1007,Ln=1008,Pn=1009,Cn=1010,Rn=1011,On=1012,Dn=1013,In=1014,zn=1015,Nn=1016,Bn=1017,Fn=1018,kn=1019,Un=1020,jn=1021,Gn=1022,Hn=1023,Vn=1024,Wn=1025,qn=1026,Xn=1027,Yn=1028,Zn=33776,Jn=33777,Kn=33778,Qn=33779,$n=35840,nt=35841,tt=35842,et=35843,lt=36196,rt=37808,it=37809,ut=37810,ot=37811,at=37812,st=37813,ct=37814,ht=37815,pt=37816,dt=37817,ft=37818,mt=37819,vt=37820,gt=37821,yt=2300,xt=2301,bt=2302,_t=2400,wt=2401,Mt=2402,Et=0,St=1,Tt=2,At=3e3,Lt=3001,Pt=3007,Ct=3002,Rt=3004,Ot=3005,Dt=3006,It=3200,zt=3201,Nt=0,Bt=1,Ft={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var n=[],t=0;t<256;t++)n[t]=(t<16?"0":"")+t.toString(16);return function(){var t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,l=4294967295*Math.random()|0,r=4294967295*Math.random()|0;return(n[255&t]+n[t>>8&255]+n[t>>16&255]+n[t>>24&255]+"-"+n[255&e]+n[e>>8&255]+"-"+n[e>>16&15|64]+n[e>>24&255]+"-"+n[63&l|128]+n[l>>8&255]+"-"+n[l>>16&255]+n[l>>24&255]+n[255&r]+n[r>>8&255]+n[r>>16&255]+n[r>>24&255]).toUpperCase()}}(),clamp:function(n,t,e){return Math.max(t,Math.min(e,n))},euclideanModulo:function(n,t){return(n%t+t)%t},mapLinear:function(n,t,e,l,r){return l+(n-t)*(r-l)/(e-t)},lerp:function(n,t,e){return(1-e)*n+e*t},smoothstep:function(n,t,e){return n<=t?0:n>=e?1:(n=(n-t)/(e-t))*n*(3-2*n)},smootherstep:function(n,t,e){return n<=t?0:n>=e?1:(n=(n-t)/(e-t))*n*n*(n*(6*n-15)+10)},randInt:function(n,t){return n+Math.floor(Math.random()*(t-n+1))},randFloat:function(n,t){return n+Math.random()*(t-n)},randFloatSpread:function(n){return n*(.5-Math.random())},degToRad:function(n){return n*Ft.DEG2RAD},radToDeg:function(n){return n*Ft.RAD2DEG},isPowerOfTwo:function(n){return 0==(n&n-1)&&0!==n},ceilPowerOfTwo:function(n){return Math.pow(2,Math.ceil(Math.log(n)/Math.LN2))},floorPowerOfTwo:function(n){return Math.pow(2,Math.floor(Math.log(n)/Math.LN2))}};function kt(n,t){this.x=n||0,this.y=t||0}function Ut(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function jt(n,t,e,l){this._x=n||0,this._y=t||0,this._z=e||0,this._w=void 0!==l?l:1}function Gt(n,t,e){this.x=n||0,this.y=t||0,this.z=e||0}function Ht(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.defineProperties(kt.prototype,{width:{get:function(){return this.x},set:function(n){this.x=n}},height:{get:function(){return this.y},set:function(n){this.y=n}}}),Object.assign(kt.prototype,{isVector2:!0,set:function(n,t){return this.x=n,this.y=t,this},setScalar:function(n){return this.x=n,this.y=n,this},setX:function(n){return this.x=n,this},setY:function(n){return this.y=n,this},setComponent:function(n,t){switch(n){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+n)}return this},getComponent:function(n){switch(n){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+n)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(n){return this.x=n.x,this.y=n.y,this},add:function(n,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(n,t)):(this.x+=n.x,this.y+=n.y,this)},addScalar:function(n){return this.x+=n,this.y+=n,this},addVectors:function(n,t){return this.x=n.x+t.x,this.y=n.y+t.y,this},addScaledVector:function(n,t){return this.x+=n.x*t,this.y+=n.y*t,this},sub:function(n,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(n,t)):(this.x-=n.x,this.y-=n.y,this)},subScalar:function(n){return this.x-=n,this.y-=n,this},subVectors:function(n,t){return this.x=n.x-t.x,this.y=n.y-t.y,this},multiply:function(n){return this.x*=n.x,this.y*=n.y,this},multiplyScalar:function(n){return this.x*=n,this.y*=n,this},divide:function(n){return this.x/=n.x,this.y/=n.y,this},divideScalar:function(n){return this.multiplyScalar(1/n)},applyMatrix3:function(n){var t=this.x,e=this.y,l=n.elements;return this.x=l[0]*t+l[3]*e+l[6],this.y=l[1]*t+l[4]*e+l[7],this},min:function(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this},max:function(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this},clamp:function(n,t){return this.x=Math.max(n.x,Math.min(t.x,this.x)),this.y=Math.max(n.y,Math.min(t.y,this.y)),this},clampScalar:(e=new kt,l=new kt,function(n,t){return e.set(n,n),l.set(t,t),this.clamp(e,l)}),clampLength:function(n,t){var e=this.length();return this.divideScalar(e||1).multiplyScalar(Math.max(n,Math.min(t,e)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(n){return this.x*n.x+this.y*n.y},cross:function(n){return this.x*n.y-this.y*n.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var n=Math.atan2(this.y,this.x);return n<0&&(n+=2*Math.PI),n},distanceTo:function(n){return Math.sqrt(this.distanceToSquared(n))},distanceToSquared:function(n){var t=this.x-n.x,e=this.y-n.y;return t*t+e*e},manhattanDistanceTo:function(n){return Math.abs(this.x-n.x)+Math.abs(this.y-n.y)},setLength:function(n){return this.normalize().multiplyScalar(n)},lerp:function(n,t){return this.x+=(n.x-this.x)*t,this.y+=(n.y-this.y)*t,this},lerpVectors:function(n,t,e){return this.subVectors(t,n).multiplyScalar(e).add(n)},equals:function(n){return n.x===this.x&&n.y===this.y},fromArray:function(n,t){return void 0===t&&(t=0),this.x=n[t],this.y=n[t+1],this},toArray:function(n,t){return void 0===n&&(n=[]),void 0===t&&(t=0),n[t]=this.x,n[t+1]=this.y,n},fromBufferAttribute:function(n,t,e){return void 0!==e&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=n.getX(t),this.y=n.getY(t),this},rotateAround:function(n,t){var e=Math.cos(t),l=Math.sin(t),r=this.x-n.x,i=this.y-n.y;return this.x=r*e-i*l+n.x,this.y=r*l+i*e+n.y,this}}),Object.assign(Ut.prototype,{isMatrix4:!0,set:function(n,t,e,l,r,i,u,o,a,s,c,h,p,d,f,m){var v=this.elements;return v[0]=n,v[4]=t,v[8]=e,v[12]=l,v[1]=r,v[5]=i,v[9]=u,v[13]=o,v[2]=a,v[6]=s,v[10]=c,v[14]=h,v[3]=p,v[7]=d,v[11]=f,v[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new Ut).fromArray(this.elements)},copy:function(n){var t=this.elements,e=n.elements;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],this},copyPosition:function(n){var t=this.elements,e=n.elements;return t[12]=e[12],t[13]=e[13],t[14]=e[14],this},extractBasis:function(n,t,e){return n.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),e.setFromMatrixColumn(this,2),this},makeBasis:function(n,t,e){return this.set(n.x,t.x,e.x,0,n.y,t.y,e.y,0,n.z,t.z,e.z,0,0,0,0,1),this},extractRotation:(p=new Gt,function(n){var t=this.elements,e=n.elements,l=1/p.setFromMatrixColumn(n,0).length(),r=1/p.setFromMatrixColumn(n,1).length(),i=1/p.setFromMatrixColumn(n,2).length();return t[0]=e[0]*l,t[1]=e[1]*l,t[2]=e[2]*l,t[3]=0,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=0,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}),makeRotationFromEuler:function(n){n&&n.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var t=this.elements,e=n.x,l=n.y,r=n.z,i=Math.cos(e),u=Math.sin(e),o=Math.cos(l),a=Math.sin(l),s=Math.cos(r),c=Math.sin(r);if("XYZ"===n.order){var h=i*s,p=i*c,d=u*s,f=u*c;t[0]=o*s,t[4]=-o*c,t[8]=a,t[1]=p+d*a,t[5]=h-f*a,t[9]=-u*o,t[2]=f-h*a,t[6]=d+p*a,t[10]=i*o}else if("YXZ"===n.order){var m=o*s,v=o*c,g=a*s,y=a*c;t[0]=m+y*u,t[4]=g*u-v,t[8]=i*a,t[1]=i*c,t[5]=i*s,t[9]=-u,t[2]=v*u-g,t[6]=y+m*u,t[10]=i*o}else if("ZXY"===n.order)m=o*s,v=o*c,g=a*s,y=a*c,t[0]=m-y*u,t[4]=-i*c,t[8]=g+v*u,t[1]=v+g*u,t[5]=i*s,t[9]=y-m*u,t[2]=-i*a,t[6]=u,t[10]=i*o;else if("ZYX"===n.order)h=i*s,p=i*c,d=u*s,f=u*c,t[0]=o*s,t[4]=d*a-p,t[8]=h*a+f,t[1]=o*c,t[5]=f*a+h,t[9]=p*a-d,t[2]=-a,t[6]=u*o,t[10]=i*o;else if("YZX"===n.order){var x=i*o,b=i*a,_=u*o,w=u*a;t[0]=o*s,t[4]=w-x*c,t[8]=_*c+b,t[1]=c,t[5]=i*s,t[9]=-u*s,t[2]=-a*s,t[6]=b*c+_,t[10]=x-w*c}else"XZY"===n.order&&(x=i*o,b=i*a,_=u*o,w=u*a,t[0]=o*s,t[4]=-c,t[8]=a*s,t[1]=x*c+w,t[5]=i*s,t[9]=b*c-_,t[2]=_*c-b,t[6]=u*s,t[10]=w*c+x);return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:(c=new Gt(0,0,0),h=new Gt(1,1,1),function(n){return this.compose(c,n,h)}),lookAt:(o=new Gt,a=new Gt,s=new Gt,function(n,t,e){var l=this.elements;return s.subVectors(n,t),0===s.lengthSq()&&(s.z=1),s.normalize(),o.crossVectors(e,s),0===o.lengthSq()&&(1===Math.abs(e.z)?s.x+=1e-4:s.z+=1e-4,s.normalize(),o.crossVectors(e,s)),o.normalize(),a.crossVectors(s,o),l[0]=o.x,l[4]=a.x,l[8]=s.x,l[1]=o.y,l[5]=a.y,l[9]=s.y,l[2]=o.z,l[6]=a.z,l[10]=s.z,this}),multiply:function(n,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(n,t)):this.multiplyMatrices(this,n)},premultiply:function(n){return this.multiplyMatrices(n,this)},multiplyMatrices:function(n,t){var e=n.elements,l=t.elements,r=this.elements,i=e[0],u=e[4],o=e[8],a=e[12],s=e[1],c=e[5],h=e[9],p=e[13],d=e[2],f=e[6],m=e[10],v=e[14],g=e[3],y=e[7],x=e[11],b=e[15],_=l[0],w=l[4],M=l[8],E=l[12],S=l[1],T=l[5],A=l[9],L=l[13],P=l[2],C=l[6],R=l[10],O=l[14],D=l[3],I=l[7],z=l[11],N=l[15];return r[0]=i*_+u*S+o*P+a*D,r[4]=i*w+u*T+o*C+a*I,r[8]=i*M+u*A+o*R+a*z,r[12]=i*E+u*L+o*O+a*N,r[1]=s*_+c*S+h*P+p*D,r[5]=s*w+c*T+h*C+p*I,r[9]=s*M+c*A+h*R+p*z,r[13]=s*E+c*L+h*O+p*N,r[2]=d*_+f*S+m*P+v*D,r[6]=d*w+f*T+m*C+v*I,r[10]=d*M+f*A+m*R+v*z,r[14]=d*E+f*L+m*O+v*N,r[3]=g*_+y*S+x*P+b*D,r[7]=g*w+y*T+x*C+b*I,r[11]=g*M+y*A+x*R+b*z,r[15]=g*E+y*L+x*O+b*N,this},multiplyScalar:function(n){var t=this.elements;return t[0]*=n,t[4]*=n,t[8]*=n,t[12]*=n,t[1]*=n,t[5]*=n,t[9]*=n,t[13]*=n,t[2]*=n,t[6]*=n,t[10]*=n,t[14]*=n,t[3]*=n,t[7]*=n,t[11]*=n,t[15]*=n,this},applyToBufferAttribute:function(){var n=new Gt;return function(t){for(var e=0,l=t.count;e<l;e++)n.x=t.getX(e),n.y=t.getY(e),n.z=t.getZ(e),n.applyMatrix4(this),t.setXYZ(e,n.x,n.y,n.z);return t}}(),determinant:function(){var n=this.elements,t=n[0],e=n[4],l=n[8],r=n[12],i=n[1],u=n[5],o=n[9],a=n[13],s=n[2],c=n[6],h=n[10],p=n[14];return n[3]*(+r*o*c-l*a*c-r*u*h+e*a*h+l*u*p-e*o*p)+n[7]*(+t*o*p-t*a*h+r*i*h-l*i*p+l*a*s-r*o*s)+n[11]*(+t*a*c-t*u*p-r*i*c+e*i*p+r*u*s-e*a*s)+n[15]*(-l*u*s-t*o*c+t*u*h+l*i*c-e*i*h+e*o*s)},transpose:function(){var n,t=this.elements;return n=t[1],t[1]=t[4],t[4]=n,n=t[2],t[2]=t[8],t[8]=n,n=t[6],t[6]=t[9],t[9]=n,n=t[3],t[3]=t[12],t[12]=n,n=t[7],t[7]=t[13],t[13]=n,n=t[11],t[11]=t[14],t[14]=n,this},setPosition:function(n){var t=this.elements;return t[12]=n.x,t[13]=n.y,t[14]=n.z,this},getInverse:function(n,t){var e=this.elements,l=n.elements,r=l[0],i=l[1],u=l[2],o=l[3],a=l[4],s=l[5],c=l[6],h=l[7],p=l[8],d=l[9],f=l[10],m=l[11],v=l[12],g=l[13],y=l[14],x=l[15],b=d*y*h-g*f*h+g*c*m-s*y*m-d*c*x+s*f*x,_=v*f*h-p*y*h-v*c*m+a*y*m+p*c*x-a*f*x,w=p*g*h-v*d*h+v*s*m-a*g*m-p*s*x+a*d*x,M=v*d*c-p*g*c-v*s*f+a*g*f+p*s*y-a*d*y,E=r*b+i*_+u*w+o*M;if(0===E){var S="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(S);return console.warn(S),this.identity()}var T=1/E;return e[0]=b*T,e[1]=(g*f*o-d*y*o-g*u*m+i*y*m+d*u*x-i*f*x)*T,e[2]=(s*y*o-g*c*o+g*u*h-i*y*h-s*u*x+i*c*x)*T,e[3]=(d*c*o-s*f*o-d*u*h+i*f*h+s*u*m-i*c*m)*T,e[4]=_*T,e[5]=(p*y*o-v*f*o+v*u*m-r*y*m-p*u*x+r*f*x)*T,e[6]=(v*c*o-a*y*o-v*u*h+r*y*h+a*u*x-r*c*x)*T,e[7]=(a*f*o-p*c*o+p*u*h-r*f*h-a*u*m+r*c*m)*T,e[8]=w*T,e[9]=(v*d*o-p*g*o-v*i*m+r*g*m+p*i*x-r*d*x)*T,e[10]=(a*g*o-v*s*o+v*i*h-r*g*h-a*i*x+r*s*x)*T,e[11]=(p*s*o-a*d*o-p*i*h+r*d*h+a*i*m-r*s*m)*T,e[12]=M*T,e[13]=(p*g*u-v*d*u+v*i*f-r*g*f-p*i*y+r*d*y)*T,e[14]=(v*s*u-a*g*u-v*i*c+r*g*c+a*i*y-r*s*y)*T,e[15]=(a*d*u-p*s*u+p*i*c-r*d*c-a*i*f+r*s*f)*T,this},scale:function(n){var t=this.elements,e=n.x,l=n.y,r=n.z;return t[0]*=e,t[4]*=l,t[8]*=r,t[1]*=e,t[5]*=l,t[9]*=r,t[2]*=e,t[6]*=l,t[10]*=r,t[3]*=e,t[7]*=l,t[11]*=r,this},getMaxScaleOnAxis:function(){var n=this.elements,t=n[0]*n[0]+n[1]*n[1]+n[2]*n[2],e=n[4]*n[4]+n[5]*n[5]+n[6]*n[6],l=n[8]*n[8]+n[9]*n[9]+n[10]*n[10];return Math.sqrt(Math.max(t,e,l))},makeTranslation:function(n,t,e){return this.set(1,0,0,n,0,1,0,t,0,0,1,e,0,0,0,1),this},makeRotationX:function(n){var t=Math.cos(n),e=Math.sin(n);return this.set(1,0,0,0,0,t,-e,0,0,e,t,0,0,0,0,1),this},makeRotationY:function(n){var t=Math.cos(n),e=Math.sin(n);return this.set(t,0,e,0,0,1,0,0,-e,0,t,0,0,0,0,1),this},makeRotationZ:function(n){var t=Math.cos(n),e=Math.sin(n);return this.set(t,-e,0,0,e,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(n,t){var e=Math.cos(t),l=Math.sin(t),r=1-e,i=n.x,u=n.y,o=n.z,a=r*i,s=r*u;return this.set(a*i+e,a*u-l*o,a*o+l*u,0,a*u+l*o,s*u+e,s*o-l*i,0,a*o-l*u,s*o+l*i,r*o*o+e,0,0,0,0,1),this},makeScale:function(n,t,e){return this.set(n,0,0,0,0,t,0,0,0,0,e,0,0,0,0,1),this},makeShear:function(n,t,e){return this.set(1,t,e,0,n,1,e,0,n,t,1,0,0,0,0,1),this},compose:function(n,t,e){var l=this.elements,r=t._x,i=t._y,u=t._z,o=t._w,a=r+r,s=i+i,c=u+u,h=r*a,p=r*s,d=r*c,f=i*s,m=i*c,v=u*c,g=o*a,y=o*s,x=o*c,b=e.x,_=e.y,w=e.z;return l[0]=(1-(f+v))*b,l[1]=(p+x)*b,l[2]=(d-y)*b,l[3]=0,l[4]=(p-x)*_,l[5]=(1-(h+v))*_,l[6]=(m+g)*_,l[7]=0,l[8]=(d+y)*w,l[9]=(m-g)*w,l[10]=(1-(h+f))*w,l[11]=0,l[12]=n.x,l[13]=n.y,l[14]=n.z,l[15]=1,this},decompose:(r=new Gt,u=new Ut,function(n,t,e){var l=this.elements,i=r.set(l[0],l[1],l[2]).length(),o=r.set(l[4],l[5],l[6]).length(),a=r.set(l[8],l[9],l[10]).length();this.determinant()<0&&(i=-i),n.x=l[12],n.y=l[13],n.z=l[14],u.copy(this);var s=1/i,c=1/o,h=1/a;return u.elements[0]*=s,u.elements[1]*=s,u.elements[2]*=s,u.elements[4]*=c,u.elements[5]*=c,u.elements[6]*=c,u.elements[8]*=h,u.elements[9]*=h,u.elements[10]*=h,t.setFromRotationMatrix(u),e.x=i,e.y=o,e.z=a,this}),makePerspective:function(n,t,e,l,r,i){void 0===i&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var u=this.elements,o=2*r/(t-n),a=2*r/(e-l),s=(t+n)/(t-n),c=(e+l)/(e-l),h=-(i+r)/(i-r),p=-2*i*r/(i-r);return u[0]=o,u[4]=0,u[8]=s,u[12]=0,u[1]=0,u[5]=a,u[9]=c,u[13]=0,u[2]=0,u[6]=0,u[10]=h,u[14]=p,u[3]=0,u[7]=0,u[11]=-1,u[15]=0,this},makeOrthographic:function(n,t,e,l,r,i){var u=this.elements,o=1/(t-n),a=1/(e-l),s=1/(i-r),c=(t+n)*o,h=(e+l)*a,p=(i+r)*s;return u[0]=2*o,u[4]=0,u[8]=0,u[12]=-c,u[1]=0,u[5]=2*a,u[9]=0,u[13]=-h,u[2]=0,u[6]=0,u[10]=-2*s,u[14]=-p,u[3]=0,u[7]=0,u[11]=0,u[15]=1,this},equals:function(n){for(var t=this.elements,e=n.elements,l=0;l<16;l++)if(t[l]!==e[l])return!1;return!0},fromArray:function(n,t){void 0===t&&(t=0);for(var e=0;e<16;e++)this.elements[e]=n[e+t];return this},toArray:function(n,t){void 0===n&&(n=[]),void 0===t&&(t=0);var e=this.elements;return n[t]=e[0],n[t+1]=e[1],n[t+2]=e[2],n[t+3]=e[3],n[t+4]=e[4],n[t+5]=e[5],n[t+6]=e[6],n[t+7]=e[7],n[t+8]=e[8],n[t+9]=e[9],n[t+10]=e[10],n[t+11]=e[11],n[t+12]=e[12],n[t+13]=e[13],n[t+14]=e[14],n[t+15]=e[15],n}}),Object.assign(jt,{slerp:function(n,t,e,l){return e.copy(n).slerp(t,l)},slerpFlat:function(n,t,e,l,r,i,u){var o=e[l+0],a=e[l+1],s=e[l+2],c=e[l+3],h=r[i+0],p=r[i+1],d=r[i+2],f=r[i+3];if(c!==f||o!==h||a!==p||s!==d){var m=1-u,v=o*h+a*p+s*d+c*f,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),b=Math.atan2(x,v*g);m=Math.sin(m*b)/x,u=Math.sin(u*b)/x}var _=u*g;if(o=o*m+h*_,a=a*m+p*_,s=s*m+d*_,c=c*m+f*_,m===1-u){var w=1/Math.sqrt(o*o+a*a+s*s+c*c);o*=w,a*=w,s*=w,c*=w}}n[t]=o,n[t+1]=a,n[t+2]=s,n[t+3]=c}}),Object.defineProperties(jt.prototype,{x:{get:function(){return this._x},set:function(n){this._x=n,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(n){this._y=n,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(n){this._z=n,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(n){this._w=n,this.onChangeCallback()}}}),Object.assign(jt.prototype,{isQuaternion:!0,set:function(n,t,e,l){return this._x=n,this._y=t,this._z=e,this._w=l,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(n){return this._x=n.x,this._y=n.y,this._z=n.z,this._w=n.w,this.onChangeCallback(),this},setFromEuler:function(n,t){if(!n||!n.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var e=n._x,l=n._y,r=n._z,i=n.order,u=Math.cos,o=Math.sin,a=u(e/2),s=u(l/2),c=u(r/2),h=o(e/2),p=o(l/2),d=o(r/2);return"XYZ"===i?(this._x=h*s*c+a*p*d,this._y=a*p*c-h*s*d,this._z=a*s*d+h*p*c,this._w=a*s*c-h*p*d):"YXZ"===i?(this._x=h*s*c+a*p*d,this._y=a*p*c-h*s*d,this._z=a*s*d-h*p*c,this._w=a*s*c+h*p*d):"ZXY"===i?(this._x=h*s*c-a*p*d,this._y=a*p*c+h*s*d,this._z=a*s*d+h*p*c,this._w=a*s*c-h*p*d):"ZYX"===i?(this._x=h*s*c-a*p*d,this._y=a*p*c+h*s*d,this._z=a*s*d-h*p*c,this._w=a*s*c+h*p*d):"YZX"===i?(this._x=h*s*c+a*p*d,this._y=a*p*c+h*s*d,this._z=a*s*d-h*p*c,this._w=a*s*c-h*p*d):"XZY"===i&&(this._x=h*s*c-a*p*d,this._y=a*p*c-h*s*d,this._z=a*s*d+h*p*c,this._w=a*s*c+h*p*d),!1!==t&&this.onChangeCallback(),this},setFromAxisAngle:function(n,t){var e=t/2,l=Math.sin(e);return this._x=n.x*l,this._y=n.y*l,this._z=n.z*l,this._w=Math.cos(e),this.onChangeCallback(),this},setFromRotationMatrix:function(n){var t,e=n.elements,l=e[0],r=e[4],i=e[8],u=e[1],o=e[5],a=e[9],s=e[2],c=e[6],h=e[10],p=l+o+h;return p>0?(t=.5/Math.sqrt(p+1),this._w=.25/t,this._x=(c-a)*t,this._y=(i-s)*t,this._z=(u-r)*t):l>o&&l>h?(t=2*Math.sqrt(1+l-o-h),this._w=(c-a)/t,this._x=.25*t,this._y=(r+u)/t,this._z=(i+s)/t):o>h?(t=2*Math.sqrt(1+o-l-h),this._w=(i-s)/t,this._x=(r+u)/t,this._y=.25*t,this._z=(a+c)/t):(t=2*Math.sqrt(1+h-l-o),this._w=(u-r)/t,this._x=(i+s)/t,this._y=(a+c)/t,this._z=.25*t),this.onChangeCallback(),this},setFromUnitVectors:function(){var n,t=new Gt;return function(e,l){return void 0===t&&(t=new Gt),(n=e.dot(l)+1)<1e-6?(n=0,Math.abs(e.x)>Math.abs(e.z)?t.set(-e.y,e.x,0):t.set(0,-e.z,e.y)):t.crossVectors(e,l),this._x=t.x,this._y=t.y,this._z=t.z,this._w=n,this.normalize()}}(),angleTo:function(n){return 2*Math.acos(Math.abs(Ft.clamp(this.dot(n),-1,1)))},rotateTowards:function(n,t){var e=this.angleTo(n);if(0===e)return this;var l=Math.min(1,t/e);return this.slerp(n,l),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(n){return this._x*n._x+this._y*n._y+this._z*n._z+this._w*n._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var n=this.length();return 0===n?(this._x=0,this._y=0,this._z=0,this._w=1):(n=1/n,this._x=this._x*n,this._y=this._y*n,this._z=this._z*n,this._w=this._w*n),this.onChangeCallback(),this},multiply:function(n,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(n,t)):this.multiplyQuaternions(this,n)},premultiply:function(n){return this.multiplyQuaternions(n,this)},multiplyQuaternions:function(n,t){var e=n._x,l=n._y,r=n._z,i=n._w,u=t._x,o=t._y,a=t._z,s=t._w;return this._x=e*s+i*u+l*a-r*o,this._y=l*s+i*o+r*u-e*a,this._z=r*s+i*a+e*o-l*u,this._w=i*s-e*u-l*o-r*a,this.onChangeCallback(),this},slerp:function(n,t){if(0===t)return this;if(1===t)return this.copy(n);var e=this._x,l=this._y,r=this._z,i=this._w,u=i*n._w+e*n._x+l*n._y+r*n._z;if(u<0?(this._w=-n._w,this._x=-n._x,this._y=-n._y,this._z=-n._z,u=-u):this.copy(n),u>=1)return this._w=i,this._x=e,this._y=l,this._z=r,this;var o=1-u*u;if(o<=Number.EPSILON){var a=1-t;return this._w=a*i+t*this._w,this._x=a*e+t*this._x,this._y=a*l+t*this._y,this._z=a*r+t*this._z,this.normalize()}var s=Math.sqrt(o),c=Math.atan2(s,u),h=Math.sin((1-t)*c)/s,p=Math.sin(t*c)/s;return this._w=i*h+this._w*p,this._x=e*h+this._x*p,this._y=l*h+this._y*p,this._z=r*h+this._z*p,this.onChangeCallback(),this},equals:function(n){return n._x===this._x&&n._y===this._y&&n._z===this._z&&n._w===this._w},fromArray:function(n,t){return void 0===t&&(t=0),this._x=n[t],this._y=n[t+1],this._z=n[t+2],this._w=n[t+3],this.onChangeCallback(),this},toArray:function(n,t){return void 0===n&&(n=[]),void 0===t&&(t=0),n[t]=this._x,n[t+1]=this._y,n[t+2]=this._z,n[t+3]=this._w,n},onChange:function(n){return this.onChangeCallback=n,this},onChangeCallback:function(){}}),Object.assign(Gt.prototype,{isVector3:!0,set:function(n,t,e){return this.x=n,this.y=t,this.z=e,this},setScalar:function(n){return this.x=n,this.y=n,this.z=n,this},setX:function(n){return this.x=n,this},setY:function(n){return this.y=n,this},setZ:function(n){return this.z=n,this},setComponent:function(n,t){switch(n){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+n)}return this},getComponent:function(n){switch(n){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+n)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(n){return this.x=n.x,this.y=n.y,this.z=n.z,this},add:function(n,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(n,t)):(this.x+=n.x,this.y+=n.y,this.z+=n.z,this)},addScalar:function(n){return this.x+=n,this.y+=n,this.z+=n,this},addVectors:function(n,t){return this.x=n.x+t.x,this.y=n.y+t.y,this.z=n.z+t.z,this},addScaledVector:function(n,t){return this.x+=n.x*t,this.y+=n.y*t,this.z+=n.z*t,this},sub:function(n,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(n,t)):(this.x-=n.x,this.y-=n.y,this.z-=n.z,this)},subScalar:function(n){return this.x-=n,this.y-=n,this.z-=n,this},subVectors:function(n,t){return this.x=n.x-t.x,this.y=n.y-t.y,this.z=n.z-t.z,this},multiply:function(n,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(n,t)):(this.x*=n.x,this.y*=n.y,this.z*=n.z,this)},multiplyScalar:function(n){return this.x*=n,this.y*=n,this.z*=n,this},multiplyVectors:function(n,t){return this.x=n.x*t.x,this.y=n.y*t.y,this.z=n.z*t.z,this},applyEuler:(d=new jt,function(n){return n&&n.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(d.setFromEuler(n))}),applyAxisAngle:function(){var n=new jt;return function(t,e){return this.applyQuaternion(n.setFromAxisAngle(t,e))}}(),applyMatrix3:function(n){var t=this.x,e=this.y,l=this.z,r=n.elements;return this.x=r[0]*t+r[3]*e+r[6]*l,this.y=r[1]*t+r[4]*e+r[7]*l,this.z=r[2]*t+r[5]*e+r[8]*l,this},applyMatrix4:function(n){var t=this.x,e=this.y,l=this.z,r=n.elements,i=1/(r[3]*t+r[7]*e+r[11]*l+r[15]);return this.x=(r[0]*t+r[4]*e+r[8]*l+r[12])*i,this.y=(r[1]*t+r[5]*e+r[9]*l+r[13])*i,this.z=(r[2]*t+r[6]*e+r[10]*l+r[14])*i,this},applyQuaternion:function(n){var t=this.x,e=this.y,l=this.z,r=n.x,i=n.y,u=n.z,o=n.w,a=o*t+i*l-u*e,s=o*e+u*t-r*l,c=o*l+r*e-i*t,h=-r*t-i*e-u*l;return this.x=a*o+h*-r+s*-u-c*-i,this.y=s*o+h*-i+c*-r-a*-u,this.z=c*o+h*-u+a*-i-s*-r,this},project:function(n){return this.applyMatrix4(n.matrixWorldInverse).applyMatrix4(n.projectionMatrix)},unproject:function(){var n=new Ut;return function(t){return this.applyMatrix4(n.getInverse(t.projectionMatrix)).applyMatrix4(t.matrixWorld)}}(),transformDirection:function(n){var t=this.x,e=this.y,l=this.z,r=n.elements;return this.x=r[0]*t+r[4]*e+r[8]*l,this.y=r[1]*t+r[5]*e+r[9]*l,this.z=r[2]*t+r[6]*e+r[10]*l,this.normalize()},divide:function(n){return this.x/=n.x,this.y/=n.y,this.z/=n.z,this},divideScalar:function(n){return this.multiplyScalar(1/n)},min:function(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this.z=Math.min(this.z,n.z),this},max:function(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this.z=Math.max(this.z,n.z),this},clamp:function(n,t){return this.x=Math.max(n.x,Math.min(t.x,this.x)),this.y=Math.max(n.y,Math.min(t.y,this.y)),this.z=Math.max(n.z,Math.min(t.z,this.z)),this},clampScalar:function(){var n=new Gt,t=new Gt;return function(e,l){return n.set(e,e,e),t.set(l,l,l),this.clamp(n,t)}}(),clampLength:function(n,t){var e=this.length();return this.divideScalar(e||1).multiplyScalar(Math.max(n,Math.min(t,e)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(n){return this.x*n.x+this.y*n.y+this.z*n.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(n){return this.normalize().multiplyScalar(n)},lerp:function(n,t){return this.x+=(n.x-this.x)*t,this.y+=(n.y-this.y)*t,this.z+=(n.z-this.z)*t,this},lerpVectors:function(n,t,e){return this.subVectors(t,n).multiplyScalar(e).add(n)},cross:function(n,t){return void 0!==t?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(n,t)):this.crossVectors(this,n)},crossVectors:function(n,t){var e=n.x,l=n.y,r=n.z,i=t.x,u=t.y,o=t.z;return this.x=l*o-r*u,this.y=r*i-e*o,this.z=e*u-l*i,this},projectOnVector:function(n){var t=n.dot(this)/n.lengthSq();return this.copy(n).multiplyScalar(t)},projectOnPlane:function(){var n=new Gt;return function(t){return n.copy(this).projectOnVector(t),this.sub(n)}}(),reflect:function(){var n=new Gt;return function(t){return this.sub(n.copy(t).multiplyScalar(2*this.dot(t)))}}(),angleTo:function(n){var t=this.dot(n)/Math.sqrt(this.lengthSq()*n.lengthSq());return Math.acos(Ft.clamp(t,-1,1))},distanceTo:function(n){return Math.sqrt(this.distanceToSquared(n))},distanceToSquared:function(n){var t=this.x-n.x,e=this.y-n.y,l=this.z-n.z;return t*t+e*e+l*l},manhattanDistanceTo:function(n){return Math.abs(this.x-n.x)+Math.abs(this.y-n.y)+Math.abs(this.z-n.z)},setFromSpherical:function(n){return this.setFromSphericalCoords(n.radius,n.phi,n.theta)},setFromSphericalCoords:function(n,t,e){var l=Math.sin(t)*n;return this.x=l*Math.sin(e),this.y=Math.cos(t)*n,this.z=l*Math.cos(e),this},setFromCylindrical:function(n){return this.setFromCylindricalCoords(n.radius,n.theta,n.y)},setFromCylindricalCoords:function(n,t,e){return this.x=n*Math.sin(t),this.y=e,this.z=n*Math.cos(t),this},setFromMatrixPosition:function(n){var t=n.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this},setFromMatrixScale:function(n){var t=this.setFromMatrixColumn(n,0).length(),e=this.setFromMatrixColumn(n,1).length(),l=this.setFromMatrixColumn(n,2).length();return this.x=t,this.y=e,this.z=l,this},setFromMatrixColumn:function(n,t){return this.fromArray(n.elements,4*t)},equals:function(n){return n.x===this.x&&n.y===this.y&&n.z===this.z},fromArray:function(n,t){return void 0===t&&(t=0),this.x=n[t],this.y=n[t+1],this.z=n[t+2],this},toArray:function(n,t){return void 0===n&&(n=[]),void 0===t&&(t=0),n[t]=this.x,n[t+1]=this.y,n[t+2]=this.z,n},fromBufferAttribute:function(n,t,e){return void 0!==e&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=n.getX(t),this.y=n.getY(t),this.z=n.getZ(t),this}}),Object.assign(Ht.prototype,{isMatrix3:!0,set:function(n,t,e,l,r,i,u,o,a){var s=this.elements;return s[0]=n,s[1]=l,s[2]=u,s[3]=t,s[4]=r,s[5]=o,s[6]=e,s[7]=i,s[8]=a,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(n){var t=this.elements,e=n.elements;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],this},setFromMatrix4:function(n){var t=n.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},applyToBufferAttribute:function(){var n=new Gt;return function(t){for(var e=0,l=t.count;e<l;e++)n.x=t.getX(e),n.y=t.getY(e),n.z=t.getZ(e),n.applyMatrix3(this),t.setXYZ(e,n.x,n.y,n.z);return t}}(),multiply:function(n){return this.multiplyMatrices(this,n)},premultiply:function(n){return this.multiplyMatrices(n,this)},multiplyMatrices:function(n,t){var e=n.elements,l=t.elements,r=this.elements,i=e[0],u=e[3],o=e[6],a=e[1],s=e[4],c=e[7],h=e[2],p=e[5],d=e[8],f=l[0],m=l[3],v=l[6],g=l[1],y=l[4],x=l[7],b=l[2],_=l[5],w=l[8];return r[0]=i*f+u*g+o*b,r[3]=i*m+u*y+o*_,r[6]=i*v+u*x+o*w,r[1]=a*f+s*g+c*b,r[4]=a*m+s*y+c*_,r[7]=a*v+s*x+c*w,r[2]=h*f+p*g+d*b,r[5]=h*m+p*y+d*_,r[8]=h*v+p*x+d*w,this},multiplyScalar:function(n){var t=this.elements;return t[0]*=n,t[3]*=n,t[6]*=n,t[1]*=n,t[4]*=n,t[7]*=n,t[2]*=n,t[5]*=n,t[8]*=n,this},determinant:function(){var n=this.elements,t=n[0],e=n[1],l=n[2],r=n[3],i=n[4],u=n[5],o=n[6],a=n[7],s=n[8];return t*i*s-t*u*a-e*r*s+e*u*o+l*r*a-l*i*o},getInverse:function(n,t){n&&n.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var e=n.elements,l=this.elements,r=e[0],i=e[1],u=e[2],o=e[3],a=e[4],s=e[5],c=e[6],h=e[7],p=e[8],d=p*a-s*h,f=s*c-p*o,m=h*o-a*c,v=r*d+i*f+u*m;if(0===v){var g="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(g);return console.warn(g),this.identity()}var y=1/v;return l[0]=d*y,l[1]=(u*h-p*i)*y,l[2]=(s*i-u*a)*y,l[3]=f*y,l[4]=(p*r-u*c)*y,l[5]=(u*o-s*r)*y,l[6]=m*y,l[7]=(i*c-h*r)*y,l[8]=(a*r-i*o)*y,this},transpose:function(){var n,t=this.elements;return n=t[1],t[1]=t[3],t[3]=n,n=t[2],t[2]=t[6],t[6]=n,n=t[5],t[5]=t[7],t[7]=n,this},getNormalMatrix:function(n){return this.setFromMatrix4(n).getInverse(this).transpose()},transposeIntoArray:function(n){var t=this.elements;return n[0]=t[0],n[1]=t[3],n[2]=t[6],n[3]=t[1],n[4]=t[4],n[5]=t[7],n[6]=t[2],n[7]=t[5],n[8]=t[8],this},setUvTransform:function(n,t,e,l,r,i,u){var o=Math.cos(r),a=Math.sin(r);this.set(e*o,e*a,-e*(o*i+a*u)+i+n,-l*a,l*o,-l*(-a*i+o*u)+u+t,0,0,1)},scale:function(n,t){var e=this.elements;return e[0]*=n,e[3]*=n,e[6]*=n,e[1]*=t,e[4]*=t,e[7]*=t,this},rotate:function(n){var t=Math.cos(n),e=Math.sin(n),l=this.elements,r=l[0],i=l[3],u=l[6],o=l[1],a=l[4],s=l[7];return l[0]=t*r+e*o,l[3]=t*i+e*a,l[6]=t*u+e*s,l[1]=-e*r+t*o,l[4]=-e*i+t*a,l[7]=-e*u+t*s,this},translate:function(n,t){var e=this.elements;return e[0]+=n*e[2],e[3]+=n*e[5],e[6]+=n*e[8],e[1]+=t*e[2],e[4]+=t*e[5],e[7]+=t*e[8],this},equals:function(n){for(var t=this.elements,e=n.elements,l=0;l<9;l++)if(t[l]!==e[l])return!1;return!0},fromArray:function(n,t){void 0===t&&(t=0);for(var e=0;e<9;e++)this.elements[e]=n[e+t];return this},toArray:function(n,t){void 0===n&&(n=[]),void 0===t&&(t=0);var e=this.elements;return n[t]=e[0],n[t+1]=e[1],n[t+2]=e[2],n[t+3]=e[3],n[t+4]=e[4],n[t+5]=e[5],n[t+6]=e[6],n[t+7]=e[7],n[t+8]=e[8],n}});var Vt,Wt,qt,Xt,Yt,Zt={getDataURL:function(n){var t;if("undefined"==typeof HTMLCanvasElement)return n.src;if(n instanceof HTMLCanvasElement)t=n;else{void 0===f&&(f=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),f.width=n.width,f.height=n.height;var e=f.getContext("2d");n instanceof ImageData?e.putImageData(n,0,0):e.drawImage(n,0,0,n.width,n.height),t=f}return t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}},Jt=0;function Kt(n,t,e,l,r,i,u,o,a,s){Object.defineProperty(this,"id",{value:Jt++}),this.uuid=Ft.generateUUID(),this.name="",this.image=void 0!==n?n:Kt.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:Kt.DEFAULT_MAPPING,this.wrapS=void 0!==e?e:_n,this.wrapT=void 0!==l?l:_n,this.magFilter=void 0!==r?r:Tn,this.minFilter=void 0!==i?i:Ln,this.anisotropy=void 0!==a?a:1,this.format=void 0!==u?u:Hn,this.type=void 0!==o?o:Pn,this.offset=new kt(0,0),this.repeat=new kt(1,1),this.center=new kt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ht,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==s?s:At,this.version=0,this.onUpdate=null}function Qt(n,t,e,l){this.x=n||0,this.y=t||0,this.z=e||0,this.w=void 0!==l?l:1}function $t(n,t,e){this.width=n,this.height=t,this.scissor=new Qt(0,0,n,t),this.scissorTest=!1,this.viewport=new Qt(0,0,n,t),e=e||{},this.texture=new Kt(void 0,void 0,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:Tn,this.depthBuffer=void 0===e.depthBuffer||e.depthBuffer,this.stencilBuffer=void 0===e.stencilBuffer||e.stencilBuffer,this.depthTexture=void 0!==e.depthTexture?e.depthTexture:null}function ne(n,t,e){$t.call(this,n,t,e),this.samples=4}function te(n,t,e){$t.call(this,n,t,e),this.activeCubeFace=0,this.activeMipMapLevel=0}function ee(n,t,e,l,r,i,u,o,a,s,c,h){Kt.call(this,null,i,u,o,a,s,l,r,c,h),this.image={data:n,width:t,height:e},this.magFilter=void 0!==a?a:Mn,this.minFilter=void 0!==s?s:Mn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function le(n,t){this.min=void 0!==n?n:new Gt(1/0,1/0,1/0),this.max=void 0!==t?t:new Gt(-1/0,-1/0,-1/0)}function re(n,t){this.center=void 0!==n?n:new Gt,this.radius=void 0!==t?t:0}function ie(n,t){this.normal=void 0!==n?n:new Gt(1,0,0),this.constant=void 0!==t?t:0}function ue(n,t,e,l,r,i){this.planes=[void 0!==n?n:new ie,void 0!==t?t:new ie,void 0!==e?e:new ie,void 0!==l?l:new ie,void 0!==r?r:new ie,void 0!==i?i:new ie]}Kt.DEFAULT_IMAGE=void 0,Kt.DEFAULT_MAPPING=300,Kt.prototype=Object.assign(Object.create(t.prototype),{constructor:Kt,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.name=n.name,this.image=n.image,this.mipmaps=n.mipmaps.slice(0),this.mapping=n.mapping,this.wrapS=n.wrapS,this.wrapT=n.wrapT,this.magFilter=n.magFilter,this.minFilter=n.minFilter,this.anisotropy=n.anisotropy,this.format=n.format,this.type=n.type,this.offset.copy(n.offset),this.repeat.copy(n.repeat),this.center.copy(n.center),this.rotation=n.rotation,this.matrixAutoUpdate=n.matrixAutoUpdate,this.matrix.copy(n.matrix),this.generateMipmaps=n.generateMipmaps,this.premultiplyAlpha=n.premultiplyAlpha,this.flipY=n.flipY,this.unpackAlignment=n.unpackAlignment,this.encoding=n.encoding,this},toJSON:function(n){var t=void 0===n||"string"==typeof n;if(!t&&void 0!==n.textures[this.uuid])return n.textures[this.uuid];var e={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var l=this.image;if(void 0===l.uuid&&(l.uuid=Ft.generateUUID()),!t&&void 0===n.images[l.uuid]){var r;if(Array.isArray(l)){r=[];for(var i=0,u=l.length;i<u;i++)r.push(Zt.getDataURL(l[i]))}else r=Zt.getDataURL(l);n.images[l.uuid]={uuid:l.uuid,url:r}}e.image=l.uuid}return t||(n.textures[this.uuid]=e),e},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(n){if(300!==this.mapping)return n;if(n.applyMatrix3(this.matrix),n.x<0||n.x>1)switch(this.wrapS){case bn:n.x=n.x-Math.floor(n.x);break;case _n:n.x=n.x<0?0:1;break;case wn:1===Math.abs(Math.floor(n.x)%2)?n.x=Math.ceil(n.x)-n.x:n.x=n.x-Math.floor(n.x)}if(n.y<0||n.y>1)switch(this.wrapT){case bn:n.y=n.y-Math.floor(n.y);break;case _n:n.y=n.y<0?0:1;break;case wn:1===Math.abs(Math.floor(n.y)%2)?n.y=Math.ceil(n.y)-n.y:n.y=n.y-Math.floor(n.y)}return this.flipY&&(n.y=1-n.y),n}}),Object.defineProperty(Kt.prototype,"needsUpdate",{set:function(n){!0===n&&this.version++}}),Object.assign(Qt.prototype,{isVector4:!0,set:function(n,t,e,l){return this.x=n,this.y=t,this.z=e,this.w=l,this},setScalar:function(n){return this.x=n,this.y=n,this.z=n,this.w=n,this},setX:function(n){return this.x=n,this},setY:function(n){return this.y=n,this},setZ:function(n){return this.z=n,this},setW:function(n){return this.w=n,this},setComponent:function(n,t){switch(n){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+n)}return this},getComponent:function(n){switch(n){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+n)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(n){return this.x=n.x,this.y=n.y,this.z=n.z,this.w=void 0!==n.w?n.w:1,this},add:function(n,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(n,t)):(this.x+=n.x,this.y+=n.y,this.z+=n.z,this.w+=n.w,this)},addScalar:function(n){return this.x+=n,this.y+=n,this.z+=n,this.w+=n,this},addVectors:function(n,t){return this.x=n.x+t.x,this.y=n.y+t.y,this.z=n.z+t.z,this.w=n.w+t.w,this},addScaledVector:function(n,t){return this.x+=n.x*t,this.y+=n.y*t,this.z+=n.z*t,this.w+=n.w*t,this},sub:function(n,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(n,t)):(this.x-=n.x,this.y-=n.y,this.z-=n.z,this.w-=n.w,this)},subScalar:function(n){return this.x-=n,this.y-=n,this.z-=n,this.w-=n,this},subVectors:function(n,t){return this.x=n.x-t.x,this.y=n.y-t.y,this.z=n.z-t.z,this.w=n.w-t.w,this},multiplyScalar:function(n){return this.x*=n,this.y*=n,this.z*=n,this.w*=n,this},applyMatrix4:function(n){var t=this.x,e=this.y,l=this.z,r=this.w,i=n.elements;return this.x=i[0]*t+i[4]*e+i[8]*l+i[12]*r,this.y=i[1]*t+i[5]*e+i[9]*l+i[13]*r,this.z=i[2]*t+i[6]*e+i[10]*l+i[14]*r,this.w=i[3]*t+i[7]*e+i[11]*l+i[15]*r,this},divideScalar:function(n){return this.multiplyScalar(1/n)},setAxisAngleFromQuaternion:function(n){this.w=2*Math.acos(n.w);var t=Math.sqrt(1-n.w*n.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=n.x/t,this.y=n.y/t,this.z=n.z/t),this},setAxisAngleFromRotationMatrix:function(n){var t,e,l,r,i=.01,u=.1,o=n.elements,a=o[0],s=o[4],c=o[8],h=o[1],p=o[5],d=o[9],f=o[2],m=o[6],v=o[10];if(Math.abs(s-h)<i&&Math.abs(c-f)<i&&Math.abs(d-m)<i){if(Math.abs(s+h)<u&&Math.abs(c+f)<u&&Math.abs(d+m)<u&&Math.abs(a+p+v-3)<u)return this.set(1,0,0,0),this;t=Math.PI;var g=(a+1)/2,y=(p+1)/2,x=(v+1)/2,b=(s+h)/4,_=(c+f)/4,w=(d+m)/4;return g>y&&g>x?g<i?(e=0,l=.707106781,r=.707106781):(l=b/(e=Math.sqrt(g)),r=_/e):y>x?y<i?(e=.707106781,l=0,r=.707106781):(e=b/(l=Math.sqrt(y)),r=w/l):x<i?(e=.707106781,l=.707106781,r=0):(e=_/(r=Math.sqrt(x)),l=w/r),this.set(e,l,r,t),this}var M=Math.sqrt((m-d)*(m-d)+(c-f)*(c-f)+(h-s)*(h-s));return Math.abs(M)<.001&&(M=1),this.x=(m-d)/M,this.y=(c-f)/M,this.z=(h-s)/M,this.w=Math.acos((a+p+v-1)/2),this},min:function(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this.z=Math.min(this.z,n.z),this.w=Math.min(this.w,n.w),this},max:function(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this.z=Math.max(this.z,n.z),this.w=Math.max(this.w,n.w),this},clamp:function(n,t){return this.x=Math.max(n.x,Math.min(t.x,this.x)),this.y=Math.max(n.y,Math.min(t.y,this.y)),this.z=Math.max(n.z,Math.min(t.z,this.z)),this.w=Math.max(n.w,Math.min(t.w,this.w)),this},clampScalar:function(){var n,t;return function(e,l){return void 0===n&&(n=new Qt,t=new Qt),n.set(e,e,e,e),t.set(l,l,l,l),this.clamp(n,t)}}(),clampLength:function(n,t){var e=this.length();return this.divideScalar(e||1).multiplyScalar(Math.max(n,Math.min(t,e)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(n){return this.x*n.x+this.y*n.y+this.z*n.z+this.w*n.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(n){return this.normalize().multiplyScalar(n)},lerp:function(n,t){return this.x+=(n.x-this.x)*t,this.y+=(n.y-this.y)*t,this.z+=(n.z-this.z)*t,this.w+=(n.w-this.w)*t,this},lerpVectors:function(n,t,e){return this.subVectors(t,n).multiplyScalar(e).add(n)},equals:function(n){return n.x===this.x&&n.y===this.y&&n.z===this.z&&n.w===this.w},fromArray:function(n,t){return void 0===t&&(t=0),this.x=n[t],this.y=n[t+1],this.z=n[t+2],this.w=n[t+3],this},toArray:function(n,t){return void 0===n&&(n=[]),void 0===t&&(t=0),n[t]=this.x,n[t+1]=this.y,n[t+2]=this.z,n[t+3]=this.w,n},fromBufferAttribute:function(n,t,e){return void 0!==e&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=n.getX(t),this.y=n.getY(t),this.z=n.getZ(t),this.w=n.getW(t),this}}),$t.prototype=Object.assign(Object.create(t.prototype),{constructor:$t,isWebGLRenderTarget:!0,setSize:function(n,t){this.width===n&&this.height===t||(this.width=n,this.height=t,this.dispose()),this.viewport.set(0,0,n,t),this.scissor.set(0,0,n,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.width=n.width,this.height=n.height,this.viewport.copy(n.viewport),this.texture=n.texture.clone(),this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.depthTexture=n.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),ne.prototype=Object.assign(Object.create($t.prototype),{constructor:ne,isWebGLMultisampleRenderTarget:!0,copy:function(n){return $t.prototype.copy.call(this,n),this.samples=n.samples,this}}),te.prototype=Object.create($t.prototype),te.prototype.constructor=te,te.prototype.isWebGLRenderTargetCube=!0,ee.prototype=Object.create(Kt.prototype),ee.prototype.constructor=ee,ee.prototype.isDataTexture=!0,Object.assign(le.prototype,{isBox3:!0,set:function(n,t){return this.min.copy(n),this.max.copy(t),this},setFromArray:function(n){for(var t=1/0,e=1/0,l=1/0,r=-1/0,i=-1/0,u=-1/0,o=0,a=n.length;o<a;o+=3){var s=n[o],c=n[o+1],h=n[o+2];s<t&&(t=s),c<e&&(e=c),h<l&&(l=h),s>r&&(r=s),c>i&&(i=c),h>u&&(u=h)}return this.min.set(t,e,l),this.max.set(r,i,u),this},setFromBufferAttribute:function(n){for(var t=1/0,e=1/0,l=1/0,r=-1/0,i=-1/0,u=-1/0,o=0,a=n.count;o<a;o++){var s=n.getX(o),c=n.getY(o),h=n.getZ(o);s<t&&(t=s),c<e&&(e=c),h<l&&(l=h),s>r&&(r=s),c>i&&(i=c),h>u&&(u=h)}return this.min.set(t,e,l),this.max.set(r,i,u),this},setFromPoints:function(n){this.makeEmpty();for(var t=0,e=n.length;t<e;t++)this.expandByPoint(n[t]);return this},setFromCenterAndSize:function(){var n=new Gt;return function(t,e){var l=n.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(l),this.max.copy(t).add(l),this}}(),setFromObject:function(n){return this.makeEmpty(),this.expandByObject(n)},clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.min.copy(n.min),this.max.copy(n.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(n){return void 0===n&&(console.warn("THREE.Box3: .getCenter() target is now required"),n=new Gt),this.isEmpty()?n.set(0,0,0):n.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(n){return void 0===n&&(console.warn("THREE.Box3: .getSize() target is now required"),n=new Gt),this.isEmpty()?n.set(0,0,0):n.subVectors(this.max,this.min)},expandByPoint:function(n){return this.min.min(n),this.max.max(n),this},expandByVector:function(n){return this.min.sub(n),this.max.add(n),this},expandByScalar:function(n){return this.min.addScalar(-n),this.max.addScalar(n),this},expandByObject:function(){var n,t,e,l=new Gt;function r(r){var i=r.geometry;if(void 0!==i)if(i.isGeometry){var u=i.vertices;for(t=0,e=u.length;t<e;t++)l.copy(u[t]),l.applyMatrix4(r.matrixWorld),n.expandByPoint(l)}else if(i.isBufferGeometry){var o=i.attributes.position;if(void 0!==o)for(t=0,e=o.count;t<e;t++)l.fromBufferAttribute(o,t).applyMatrix4(r.matrixWorld),n.expandByPoint(l)}}return function(t){return n=this,t.updateMatrixWorld(!0),t.traverse(r),this}}(),containsPoint:function(n){return!(n.x<this.min.x||n.x>this.max.x||n.y<this.min.y||n.y>this.max.y||n.z<this.min.z||n.z>this.max.z)},containsBox:function(n){return this.min.x<=n.min.x&&n.max.x<=this.max.x&&this.min.y<=n.min.y&&n.max.y<=this.max.y&&this.min.z<=n.min.z&&n.max.z<=this.max.z},getParameter:function(n,t){return void 0===t&&(console.warn("THREE.Box3: .getParameter() target is now required"),t=new Gt),t.set((n.x-this.min.x)/(this.max.x-this.min.x),(n.y-this.min.y)/(this.max.y-this.min.y),(n.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(n){return!(n.max.x<this.min.x||n.min.x>this.max.x||n.max.y<this.min.y||n.min.y>this.max.y||n.max.z<this.min.z||n.min.z>this.max.z)},intersectsSphere:(Wt=new Gt,function(n){return this.clampPoint(n.center,Wt),Wt.distanceToSquared(n.center)<=n.radius*n.radius}),intersectsPlane:function(n){var t,e;return n.normal.x>0?(t=n.normal.x*this.min.x,e=n.normal.x*this.max.x):(t=n.normal.x*this.max.x,e=n.normal.x*this.min.x),n.normal.y>0?(t+=n.normal.y*this.min.y,e+=n.normal.y*this.max.y):(t+=n.normal.y*this.max.y,e+=n.normal.y*this.min.y),n.normal.z>0?(t+=n.normal.z*this.min.z,e+=n.normal.z*this.max.z):(t+=n.normal.z*this.max.z,e+=n.normal.z*this.min.z),t<=-n.constant&&e>=-n.constant},intersectsTriangle:function(){var n=new Gt,t=new Gt,e=new Gt,l=new Gt,r=new Gt,i=new Gt,u=new Gt,o=new Gt,a=new Gt,s=new Gt;function c(l){var r,i;for(r=0,i=l.length-3;r<=i;r+=3){u.fromArray(l,r);var o=a.x*Math.abs(u.x)+a.y*Math.abs(u.y)+a.z*Math.abs(u.z),s=n.dot(u),c=t.dot(u),h=e.dot(u);if(Math.max(-Math.max(s,c,h),Math.min(s,c,h))>o)return!1}return!0}return function(u){if(this.isEmpty())return!1;this.getCenter(o),a.subVectors(this.max,o),n.subVectors(u.a,o),t.subVectors(u.b,o),e.subVectors(u.c,o),l.subVectors(t,n),r.subVectors(e,t),i.subVectors(n,e);var h=[0,-l.z,l.y,0,-r.z,r.y,0,-i.z,i.y,l.z,0,-l.x,r.z,0,-r.x,i.z,0,-i.x,-l.y,l.x,0,-r.y,r.x,0,-i.y,i.x,0];return!!c(h)&&!!c(h=[1,0,0,0,1,0,0,0,1])&&(s.crossVectors(l,r),c(h=[s.x,s.y,s.z]))}}(),clampPoint:function(n,t){return void 0===t&&(console.warn("THREE.Box3: .clampPoint() target is now required"),t=new Gt),t.copy(n).clamp(this.min,this.max)},distanceToPoint:function(){var n=new Gt;return function(t){return n.copy(t).clamp(this.min,this.max).sub(t).length()}}(),getBoundingSphere:function(){var n=new Gt;return function(t){return void 0===t&&(console.warn("THREE.Box3: .getBoundingSphere() target is now required"),t=new re),this.getCenter(t.center),t.radius=.5*this.getSize(n).length(),t}}(),intersect:function(n){return this.min.max(n.min),this.max.min(n.max),this.isEmpty()&&this.makeEmpty(),this},union:function(n){return this.min.min(n.min),this.max.max(n.max),this},applyMatrix4:(Vt=[new Gt,new Gt,new Gt,new Gt,new Gt,new Gt,new Gt,new Gt],function(n){return this.isEmpty()||(Vt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(n),Vt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(n),Vt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(n),Vt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(n),Vt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(n),Vt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(n),Vt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(n),Vt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(n),this.setFromPoints(Vt)),this}),translate:function(n){return this.min.add(n),this.max.add(n),this},equals:function(n){return n.min.equals(this.min)&&n.max.equals(this.max)}}),Object.assign(re.prototype,{set:function(n,t){return this.center.copy(n),this.radius=t,this},setFromPoints:(qt=new le,function(n,t){var e=this.center;void 0!==t?e.copy(t):qt.setFromPoints(n).getCenter(e);for(var l=0,r=0,i=n.length;r<i;r++)l=Math.max(l,e.distanceToSquared(n[r]));return this.radius=Math.sqrt(l),this}),clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.center.copy(n.center),this.radius=n.radius,this},empty:function(){return this.radius<=0},containsPoint:function(n){return n.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(n){return n.distanceTo(this.center)-this.radius},intersectsSphere:function(n){var t=this.radius+n.radius;return n.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(n){return n.intersectsSphere(this)},intersectsPlane:function(n){return Math.abs(n.distanceToPoint(this.center))<=this.radius},clampPoint:function(n,t){var e=this.center.distanceToSquared(n);return void 0===t&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),t=new Gt),t.copy(n),e>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t},getBoundingBox:function(n){return void 0===n&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),n=new le),n.set(this.center,this.center),n.expandByScalar(this.radius),n},applyMatrix4:function(n){return this.center.applyMatrix4(n),this.radius=this.radius*n.getMaxScaleOnAxis(),this},translate:function(n){return this.center.add(n),this},equals:function(n){return n.center.equals(this.center)&&n.radius===this.radius}}),Object.assign(ie.prototype,{set:function(n,t){return this.normal.copy(n),this.constant=t,this},setComponents:function(n,t,e,l){return this.normal.set(n,t,e),this.constant=l,this},setFromNormalAndCoplanarPoint:function(n,t){return this.normal.copy(n),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(){var n=new Gt,t=new Gt;return function(e,l,r){var i=n.subVectors(r,l).cross(t.subVectors(e,l)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.normal.copy(n.normal),this.constant=n.constant,this},normalize:function(){var n=1/this.normal.length();return this.normal.multiplyScalar(n),this.constant*=n,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(n){return this.normal.dot(n)+this.constant},distanceToSphere:function(n){return this.distanceToPoint(n.center)-n.radius},projectPoint:function(n,t){return void 0===t&&(console.warn("THREE.Plane: .projectPoint() target is now required"),t=new Gt),t.copy(this.normal).multiplyScalar(-this.distanceToPoint(n)).add(n)},intersectLine:function(){var n=new Gt;return function(t,e){void 0===e&&(console.warn("THREE.Plane: .intersectLine() target is now required"),e=new Gt);var l=t.delta(n),r=this.normal.dot(l);if(0===r)return 0===this.distanceToPoint(t.start)?e.copy(t.start):void 0;var i=-(t.start.dot(this.normal)+this.constant)/r;return i<0||i>1?void 0:e.copy(l).multiplyScalar(i).add(t.start)}}(),intersectsLine:function(n){var t=this.distanceToPoint(n.start),e=this.distanceToPoint(n.end);return t<0&&e>0||e<0&&t>0},intersectsBox:function(n){return n.intersectsPlane(this)},intersectsSphere:function(n){return n.intersectsPlane(this)},coplanarPoint:function(n){return void 0===n&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),n=new Gt),n.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var n=new Gt,t=new Ht;return function(e,l){var r=l||t.getNormalMatrix(e),i=this.coplanarPoint(n).applyMatrix4(e),u=this.normal.applyMatrix3(r).normalize();return this.constant=-i.dot(u),this}}(),translate:function(n){return this.constant-=n.dot(this.normal),this},equals:function(n){return n.normal.equals(this.normal)&&n.constant===this.constant}}),Object.assign(ue.prototype,{set:function(n,t,e,l,r,i){var u=this.planes;return u[0].copy(n),u[1].copy(t),u[2].copy(e),u[3].copy(l),u[4].copy(r),u[5].copy(i),this},clone:function(){return(new this.constructor).copy(this)},copy:function(n){for(var t=this.planes,e=0;e<6;e++)t[e].copy(n.planes[e]);return this},setFromMatrix:function(n){var t=this.planes,e=n.elements,l=e[0],r=e[1],i=e[2],u=e[3],o=e[4],a=e[5],s=e[6],c=e[7],h=e[8],p=e[9],d=e[10],f=e[11],m=e[12],v=e[13],g=e[14],y=e[15];return t[0].setComponents(u-l,c-o,f-h,y-m).normalize(),t[1].setComponents(u+l,c+o,f+h,y+m).normalize(),t[2].setComponents(u+r,c+a,f+p,y+v).normalize(),t[3].setComponents(u-r,c-a,f-p,y-v).normalize(),t[4].setComponents(u-i,c-s,f-d,y-g).normalize(),t[5].setComponents(u+i,c+s,f+d,y+g).normalize(),this},intersectsObject:(Yt=new re,function(n){var t=n.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),Yt.copy(t.boundingSphere).applyMatrix4(n.matrixWorld),this.intersectsSphere(Yt)}),intersectsSprite:function(){var n=new re;return function(t){return n.center.set(0,0,0),n.radius=.7071067811865476,n.applyMatrix4(t.matrixWorld),this.intersectsSphere(n)}}(),intersectsSphere:function(n){for(var t=this.planes,e=n.center,l=-n.radius,r=0;r<6;r++)if(t[r].distanceToPoint(e)<l)return!1;return!0},intersectsBox:(Xt=new Gt,function(n){for(var t=this.planes,e=0;e<6;e++){var l=t[e];if(Xt.x=l.normal.x>0?n.max.x:n.min.x,Xt.y=l.normal.y>0?n.max.y:n.min.y,Xt.z=l.normal.z>0?n.max.z:n.min.z,l.distanceToPoint(Xt)<0)return!1}return!0}),containsPoint:function(n){for(var t=this.planes,e=0;e<6;e++)if(t[e].distanceToPoint(n)<0)return!1;return!0}});var oe={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick( specularColor, dotNV );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif",lights_pars_begin:"uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#endif\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec3 singleScattering = vec3( 0.0 );\n\t\tvec3 multiScattering = vec3( 0.0 );\n\t\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\t\tvec3 diffuse = material.diffuseColor;\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\n\t\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\n\t\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\t#else\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#endif\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif",normal_fragment_maps:"#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"};function ae(n){var t={};for(var e in n)for(var l in t[e]={},n[e]){var r=n[e][l];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture)?t[e][l]=r.clone():Array.isArray(r)?t[e][l]=r.slice():t[e][l]=r}return t}function se(n){for(var t={},e=0;e<n.length;e++){var l=ae(n[e]);for(var r in l)t[r]=l[r]}return t}var ce,he,pe,de={clone:ae,merge:se},fe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function me(n,t,e){return void 0===t&&void 0===e?this.set(n):this.setRGB(n,t,e)}Object.assign(me.prototype,{isColor:!0,r:1,g:1,b:1,set:function(n){return n&&n.isColor?this.copy(n):"number"==typeof n?this.setHex(n):"string"==typeof n&&this.setStyle(n),this},setScalar:function(n){return this.r=n,this.g=n,this.b=n,this},setHex:function(n){return n=Math.floor(n),this.r=(n>>16&255)/255,this.g=(n>>8&255)/255,this.b=(255&n)/255,this},setRGB:function(n,t,e){return this.r=n,this.g=t,this.b=e,this},setHSL:function(){function n(n,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?n+6*(t-n)*e:e<.5?t:e<2/3?n+6*(t-n)*(2/3-e):n}return function(t,e,l){if(t=Ft.euclideanModulo(t,1),e=Ft.clamp(e,0,1),l=Ft.clamp(l,0,1),0===e)this.r=this.g=this.b=l;else{var r=l<=.5?l*(1+e):l+e-l*e,i=2*l-r;this.r=n(i,r,t+1/3),this.g=n(i,r,t),this.b=n(i,r,t-1/3)}return this}}(),setStyle:function(n){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+n+" will be ignored.")}var e;if(e=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(n)){var l,r=e[1],i=e[2];switch(r){case"rgb":case"rgba":if(l=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(i))return this.r=Math.min(255,parseInt(l[1],10))/255,this.g=Math.min(255,parseInt(l[2],10))/255,this.b=Math.min(255,parseInt(l[3],10))/255,t(l[5]),this;if(l=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(i))return this.r=Math.min(100,parseInt(l[1],10))/100,this.g=Math.min(100,parseInt(l[2],10))/100,this.b=Math.min(100,parseInt(l[3],10))/100,t(l[5]),this;break;case"hsl":case"hsla":if(l=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(i)){var u=parseFloat(l[1])/360,o=parseInt(l[2],10)/100,a=parseInt(l[3],10)/100;return t(l[5]),this.setHSL(u,o,a)}}}else if(e=/^\#([A-Fa-f0-9]+)$/.exec(n)){var s,c=(s=e[1]).length;if(3===c)return this.r=parseInt(s.charAt(0)+s.charAt(0),16)/255,this.g=parseInt(s.charAt(1)+s.charAt(1),16)/255,this.b=parseInt(s.charAt(2)+s.charAt(2),16)/255,this;if(6===c)return this.r=parseInt(s.charAt(0)+s.charAt(1),16)/255,this.g=parseInt(s.charAt(2)+s.charAt(3),16)/255,this.b=parseInt(s.charAt(4)+s.charAt(5),16)/255,this}return n&&n.length>0&&(void 0!==(s=fe[n])?this.setHex(s):console.warn("THREE.Color: Unknown color "+n)),this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(n){return this.r=n.r,this.g=n.g,this.b=n.b,this},copyGammaToLinear:function(n,t){return void 0===t&&(t=2),this.r=Math.pow(n.r,t),this.g=Math.pow(n.g,t),this.b=Math.pow(n.b,t),this},copyLinearToGamma:function(n,t){void 0===t&&(t=2);var e=t>0?1/t:1;return this.r=Math.pow(n.r,e),this.g=Math.pow(n.g,e),this.b=Math.pow(n.b,e),this},convertGammaToLinear:function(n){return this.copyGammaToLinear(this,n),this},convertLinearToGamma:function(n){return this.copyLinearToGamma(this,n),this},copySRGBToLinear:function(){function n(n){return n<.04045?.0773993808*n:Math.pow(.9478672986*n+.0521327014,2.4)}return function(t){return this.r=n(t.r),this.g=n(t.g),this.b=n(t.b),this}}(),copyLinearToSRGB:function(){function n(n){return n<.0031308?12.92*n:1.055*Math.pow(n,.41666)-.055}return function(t){return this.r=n(t.r),this.g=n(t.g),this.b=n(t.b),this}}(),convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(n){void 0===n&&(console.warn("THREE.Color: .getHSL() target is now required"),n={h:0,s:0,l:0});var t,e,l=this.r,r=this.g,i=this.b,u=Math.max(l,r,i),o=Math.min(l,r,i),a=(o+u)/2;if(o===u)t=0,e=0;else{var s=u-o;switch(e=a<=.5?s/(u+o):s/(2-u-o),u){case l:t=(r-i)/s+(r<i?6:0);break;case r:t=(i-l)/s+2;break;case i:t=(l-r)/s+4}t/=6}return n.h=t,n.s=e,n.l=a,n},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:(pe={},function(n,t,e){return this.getHSL(pe),pe.h+=n,pe.s+=t,pe.l+=e,this.setHSL(pe.h,pe.s,pe.l),this}),add:function(n){return this.r+=n.r,this.g+=n.g,this.b+=n.b,this},addColors:function(n,t){return this.r=n.r+t.r,this.g=n.g+t.g,this.b=n.b+t.b,this},addScalar:function(n){return this.r+=n,this.g+=n,this.b+=n,this},sub:function(n){return this.r=Math.max(0,this.r-n.r),this.g=Math.max(0,this.g-n.g),this.b=Math.max(0,this.b-n.b),this},multiply:function(n){return this.r*=n.r,this.g*=n.g,this.b*=n.b,this},multiplyScalar:function(n){return this.r*=n,this.g*=n,this.b*=n,this},lerp:function(n,t){return this.r+=(n.r-this.r)*t,this.g+=(n.g-this.g)*t,this.b+=(n.b-this.b)*t,this},lerpHSL:(ce={h:0,s:0,l:0},he={h:0,s:0,l:0},function(n,t){this.getHSL(ce),n.getHSL(he);var e=Ft.lerp(ce.h,he.h,t),l=Ft.lerp(ce.s,he.s,t),r=Ft.lerp(ce.l,he.l,t);return this.setHSL(e,l,r),this}),equals:function(n){return n.r===this.r&&n.g===this.g&&n.b===this.b},fromArray:function(n,t){return void 0===t&&(t=0),this.r=n[t],this.g=n[t+1],this.b=n[t+2],this},toArray:function(n,t){return void 0===n&&(n=[]),void 0===t&&(t=0),n[t]=this.r,n[t+1]=this.g,n[t+2]=this.b,n},toJSON:function(){return this.getHex()}});var ve,ge={common:{diffuse:{value:new me(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Ht},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new kt(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new me(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new me(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new Ht}},sprite:{diffuse:{value:new me(15658734)},opacity:{value:1},center:{value:new kt(.5,.5)},rotation:{value:0},map:{value:null},uvTransform:{value:new Ht}}},ye={basic:{uniforms:se([ge.common,ge.specularmap,ge.envmap,ge.aomap,ge.lightmap,ge.fog]),vertexShader:oe.meshbasic_vert,fragmentShader:oe.meshbasic_frag},lambert:{uniforms:se([ge.common,ge.specularmap,ge.envmap,ge.aomap,ge.lightmap,ge.emissivemap,ge.fog,ge.lights,{emissive:{value:new me(0)}}]),vertexShader:oe.meshlambert_vert,fragmentShader:oe.meshlambert_frag},phong:{uniforms:se([ge.common,ge.specularmap,ge.envmap,ge.aomap,ge.lightmap,ge.emissivemap,ge.bumpmap,ge.normalmap,ge.displacementmap,ge.gradientmap,ge.fog,ge.lights,{emissive:{value:new me(0)},specular:{value:new me(1118481)},shininess:{value:30}}]),vertexShader:oe.meshphong_vert,fragmentShader:oe.meshphong_frag},standard:{uniforms:se([ge.common,ge.envmap,ge.aomap,ge.lightmap,ge.emissivemap,ge.bumpmap,ge.normalmap,ge.displacementmap,ge.roughnessmap,ge.metalnessmap,ge.fog,ge.lights,{emissive:{value:new me(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:oe.meshphysical_vert,fragmentShader:oe.meshphysical_frag},matcap:{uniforms:se([ge.common,ge.bumpmap,ge.normalmap,ge.displacementmap,ge.fog,{matcap:{value:null}}]),vertexShader:oe.meshmatcap_vert,fragmentShader:oe.meshmatcap_frag},points:{uniforms:se([ge.points,ge.fog]),vertexShader:oe.points_vert,fragmentShader:oe.points_frag},dashed:{uniforms:se([ge.common,ge.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:oe.linedashed_vert,fragmentShader:oe.linedashed_frag},depth:{uniforms:se([ge.common,ge.displacementmap]),vertexShader:oe.depth_vert,fragmentShader:oe.depth_frag},normal:{uniforms:se([ge.common,ge.bumpmap,ge.normalmap,ge.displacementmap,{opacity:{value:1}}]),vertexShader:oe.normal_vert,fragmentShader:oe.normal_frag},sprite:{uniforms:se([ge.sprite,ge.fog]),vertexShader:oe.sprite_vert,fragmentShader:oe.sprite_frag},background:{uniforms:{uvTransform:{value:new Ht},t2D:{value:null}},vertexShader:oe.background_vert,fragmentShader:oe.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:oe.cube_vert,fragmentShader:oe.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:oe.equirect_vert,fragmentShader:oe.equirect_frag},distanceRGBA:{uniforms:se([ge.common,ge.displacementmap,{referencePosition:{value:new Gt},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:oe.distanceRGBA_vert,fragmentShader:oe.distanceRGBA_frag},shadow:{uniforms:se([ge.lights,ge.fog,{color:{value:new me(0)},opacity:{value:1}}]),vertexShader:oe.shadow_vert,fragmentShader:oe.shadow_frag}};function xe(){var n=null,t=!1,e=null;function l(r,i){!1!==t&&(e(r,i),n.requestAnimationFrame(l))}return{start:function(){!0!==t&&null!==e&&(n.requestAnimationFrame(l),t=!0)},stop:function(){t=!1},setAnimationLoop:function(n){e=n},setContext:function(t){n=t}}}function be(n){var t=new WeakMap;return{get:function(n){return n.isInterleavedBufferAttribute&&(n=n.data),t.get(n)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);var l=t.get(e);l&&(n.deleteBuffer(l.buffer),t.delete(e))},update:function(e,l){e.isInterleavedBufferAttribute&&(e=e.data);var r=t.get(e);void 0===r?t.set(e,function(t,e){var l=t.array,r=t.dynamic?35048:35044,i=n.createBuffer();n.bindBuffer(e,i),n.bufferData(e,l,r),t.onUploadCallback();var u=5126;return l instanceof Float32Array?u=5126:l instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):l instanceof Uint16Array?u=5123:l instanceof Int16Array?u=5122:l instanceof Uint32Array?u=5125:l instanceof Int32Array?u=5124:l instanceof Int8Array?u=5120:l instanceof Uint8Array&&(u=5121),{buffer:i,type:u,bytesPerElement:l.BYTES_PER_ELEMENT,version:t.version}}(e,l)):r.version<e.version&&(function(t,e,l){var r=e.array,i=e.updateRange;n.bindBuffer(l,t),!1===e.dynamic?n.bufferData(l,r,35044):-1===i.count?n.bufferSubData(l,0,r):0===i.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(n.bufferSubData(l,i.offset*r.BYTES_PER_ELEMENT,r.subarray(i.offset,i.offset+i.count)),i.count=-1)}(r.buffer,e,l),r.version=e.version)}}}function _e(n,t,e,l,r,i){this.a=n,this.b=t,this.c=e,this.normal=l&&l.isVector3?l:new Gt,this.vertexNormals=Array.isArray(l)?l:[],this.color=r&&r.isColor?r:new me,this.vertexColors=Array.isArray(r)?r:[],this.materialIndex=void 0!==i?i:0}function we(n,t,e,l){this._x=n||0,this._y=t||0,this._z=e||0,this._order=l||we.DefaultOrder}function Me(){this.mask=1}ye.physical={uniforms:se([ye.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:oe.meshphysical_vert,fragmentShader:oe.meshphysical_frag},Object.assign(_e.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(n){this.a=n.a,this.b=n.b,this.c=n.c,this.normal.copy(n.normal),this.color.copy(n.color),this.materialIndex=n.materialIndex;for(var t=0,e=n.vertexNormals.length;t<e;t++)this.vertexNormals[t]=n.vertexNormals[t].clone();for(t=0,e=n.vertexColors.length;t<e;t++)this.vertexColors[t]=n.vertexColors[t].clone();return this}}),we.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],we.DefaultOrder="XYZ",Object.defineProperties(we.prototype,{x:{get:function(){return this._x},set:function(n){this._x=n,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(n){this._y=n,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(n){this._z=n,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(n){this._order=n,this.onChangeCallback()}}}),Object.assign(we.prototype,{isEuler:!0,set:function(n,t,e,l){return this._x=n,this._y=t,this._z=e,this._order=l||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(n){return this._x=n._x,this._y=n._y,this._z=n._z,this._order=n._order,this.onChangeCallback(),this},setFromRotationMatrix:function(n,t,e){var l=Ft.clamp,r=n.elements,i=r[0],u=r[4],o=r[8],a=r[1],s=r[5],c=r[9],h=r[2],p=r[6],d=r[10];return"XYZ"===(t=t||this._order)?(this._y=Math.asin(l(o,-1,1)),Math.abs(o)<.99999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-u,i)):(this._x=Math.atan2(p,s),this._z=0)):"YXZ"===t?(this._x=Math.asin(-l(c,-1,1)),Math.abs(c)<.99999?(this._y=Math.atan2(o,d),this._z=Math.atan2(a,s)):(this._y=Math.atan2(-h,i),this._z=0)):"ZXY"===t?(this._x=Math.asin(l(p,-1,1)),Math.abs(p)<.99999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-u,s)):(this._y=0,this._z=Math.atan2(a,i))):"ZYX"===t?(this._y=Math.asin(-l(h,-1,1)),Math.abs(h)<.99999?(this._x=Math.atan2(p,d),this._z=Math.atan2(a,i)):(this._x=0,this._z=Math.atan2(-u,s))):"YZX"===t?(this._z=Math.asin(l(a,-1,1)),Math.abs(a)<.99999?(this._x=Math.atan2(-c,s),this._y=Math.atan2(-h,i)):(this._x=0,this._y=Math.atan2(o,d))):"XZY"===t?(this._z=Math.asin(-l(u,-1,1)),Math.abs(u)<.99999?(this._x=Math.atan2(p,s),this._y=Math.atan2(o,i)):(this._x=Math.atan2(-c,d),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+t),this._order=t,!1!==e&&this.onChangeCallback(),this},setFromQuaternion:function(){var n=new Ut;return function(t,e,l){return n.makeRotationFromQuaternion(t),this.setFromRotationMatrix(n,e,l)}}(),setFromVector3:function(n,t){return this.set(n.x,n.y,n.z,t||this._order)},reorder:(ve=new jt,function(n){return ve.setFromEuler(this),this.setFromQuaternion(ve,n)}),equals:function(n){return n._x===this._x&&n._y===this._y&&n._z===this._z&&n._order===this._order},fromArray:function(n){return this._x=n[0],this._y=n[1],this._z=n[2],void 0!==n[3]&&(this._order=n[3]),this.onChangeCallback(),this},toArray:function(n,t){return void 0===n&&(n=[]),void 0===t&&(t=0),n[t]=this._x,n[t+1]=this._y,n[t+2]=this._z,n[t+3]=this._order,n},toVector3:function(n){return n?n.set(this._x,this._y,this._z):new Gt(this._x,this._y,this._z)},onChange:function(n){return this.onChangeCallback=n,this},onChangeCallback:function(){}}),Object.assign(Me.prototype,{set:function(n){this.mask=1<<n|0},enable:function(n){this.mask|=1<<n|0},toggle:function(n){this.mask^=1<<n|0},disable:function(n){this.mask&=~(1<<n|0)},test:function(n){return 0!=(this.mask&n.mask)}});var Ee,Se,Te,Ae,Le=0;function Pe(){Object.defineProperty(this,"id",{value:Le++}),this.uuid=Ft.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Pe.DefaultUp.clone();var n=new Gt,t=new we,e=new jt,l=new Gt(1,1,1);t.onChange((function(){e.setFromEuler(t,!1)})),e.onChange((function(){t.setFromQuaternion(e,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:n},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:e},scale:{configurable:!0,enumerable:!0,value:l},modelViewMatrix:{value:new Ut},normalMatrix:{value:new Ht}}),this.matrix=new Ut,this.matrixWorld=new Ut,this.matrixAutoUpdate=Pe.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Me,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}Pe.DefaultUp=new Gt(0,1,0),Pe.DefaultMatrixAutoUpdate=!0,Pe.prototype=Object.assign(Object.create(t.prototype),{constructor:Pe,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(n){this.matrix.multiplyMatrices(n,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(n){return this.quaternion.premultiply(n),this},setRotationFromAxisAngle:function(n,t){this.quaternion.setFromAxisAngle(n,t)},setRotationFromEuler:function(n){this.quaternion.setFromEuler(n,!0)},setRotationFromMatrix:function(n){this.quaternion.setFromRotationMatrix(n)},setRotationFromQuaternion:function(n){this.quaternion.copy(n)},rotateOnAxis:(Ae=new jt,function(n,t){return Ae.setFromAxisAngle(n,t),this.quaternion.multiply(Ae),this}),rotateOnWorldAxis:function(){var n=new jt;return function(t,e){return n.setFromAxisAngle(t,e),this.quaternion.premultiply(n),this}}(),rotateX:function(){var n=new Gt(1,0,0);return function(t){return this.rotateOnAxis(n,t)}}(),rotateY:function(){var n=new Gt(0,1,0);return function(t){return this.rotateOnAxis(n,t)}}(),rotateZ:function(){var n=new Gt(0,0,1);return function(t){return this.rotateOnAxis(n,t)}}(),translateOnAxis:function(){var n=new Gt;return function(t,e){return n.copy(t).applyQuaternion(this.quaternion),this.position.add(n.multiplyScalar(e)),this}}(),translateX:function(){var n=new Gt(1,0,0);return function(t){return this.translateOnAxis(n,t)}}(),translateY:function(){var n=new Gt(0,1,0);return function(t){return this.translateOnAxis(n,t)}}(),translateZ:function(){var n=new Gt(0,0,1);return function(t){return this.translateOnAxis(n,t)}}(),localToWorld:function(n){return n.applyMatrix4(this.matrixWorld)},worldToLocal:(Te=new Ut,function(n){return n.applyMatrix4(Te.getInverse(this.matrixWorld))}),lookAt:function(){var n=new jt,t=new Ut,e=new Gt,l=new Gt;return function(r,i,u){r.isVector3?e.copy(r):e.set(r,i,u);var o=this.parent;this.updateWorldMatrix(!0,!1),l.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?t.lookAt(l,e,this.up):t.lookAt(e,l,this.up),this.quaternion.setFromRotationMatrix(t),o&&(t.extractRotation(o.matrixWorld),n.setFromRotationMatrix(t),this.quaternion.premultiply(n.inverse()))}}(),add:function(n){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return n===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",n),this):(n&&n.isObject3D?(null!==n.parent&&n.parent.remove(n),n.parent=this,n.dispatchEvent({type:"added"}),this.children.push(n)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",n),this)},remove:function(n){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}var e=this.children.indexOf(n);return-1!==e&&(n.parent=null,n.dispatchEvent({type:"removed"}),this.children.splice(e,1)),this},getObjectById:function(n){return this.getObjectByProperty("id",n)},getObjectByName:function(n){return this.getObjectByProperty("name",n)},getObjectByProperty:function(n,t){if(this[n]===t)return this;for(var e=0,l=this.children.length;e<l;e++){var r=this.children[e].getObjectByProperty(n,t);if(void 0!==r)return r}},getWorldPosition:function(n){return void 0===n&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),n=new Gt),this.updateMatrixWorld(!0),n.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:(Ee=new Gt,Se=new Gt,function(n){return void 0===n&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),n=new jt),this.updateMatrixWorld(!0),this.matrixWorld.decompose(Ee,n,Se),n}),getWorldScale:function(){var n=new Gt,t=new jt;return function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),e=new Gt),this.updateMatrixWorld(!0),this.matrixWorld.decompose(n,t,e),e}}(),getWorldDirection:function(n){void 0===n&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),n=new Gt),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return n.set(t[8],t[9],t[10]).normalize()},raycast:function(){},traverse:function(n){n(this);for(var t=this.children,e=0,l=t.length;e<l;e++)t[e].traverse(n)},traverseVisible:function(n){if(!1!==this.visible){n(this);for(var t=this.children,e=0,l=t.length;e<l;e++)t[e].traverseVisible(n)}},traverseAncestors:function(n){var t=this.parent;null!==t&&(n(t),t.traverseAncestors(n))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(n){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||n)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,n=!0);for(var t=this.children,e=0,l=t.length;e<l;e++)t[e].updateMatrixWorld(n)},updateWorldMatrix:function(n,t){var e=this.parent;if(!0===n&&null!==e&&e.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t)for(var l=this.children,r=0,i=l.length;r<i;r++)l[r].updateWorldMatrix(!1,!0)},toJSON:function(n){var t=void 0===n||"string"==typeof n,e={};t&&(n={geometries:{},materials:{},textures:{},images:{},shapes:{}},e.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var l={};function r(t,e){return void 0===t[e.uuid]&&(t[e.uuid]=e.toJSON(n)),e.uuid}if(l.uuid=this.uuid,l.type=this.type,""!==this.name&&(l.name=this.name),!0===this.castShadow&&(l.castShadow=!0),!0===this.receiveShadow&&(l.receiveShadow=!0),!1===this.visible&&(l.visible=!1),!1===this.frustumCulled&&(l.frustumCulled=!1),0!==this.renderOrder&&(l.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(l.userData=this.userData),l.layers=this.layers.mask,l.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(l.matrixAutoUpdate=!1),this.isMesh&&this.drawMode!==Et&&(l.drawMode=this.drawMode),this.isMesh||this.isLine||this.isPoints){l.geometry=r(n.geometries,this.geometry);var i=this.geometry.parameters;if(void 0!==i&&void 0!==i.shapes){var u=i.shapes;if(Array.isArray(u))for(var o=0,a=u.length;o<a;o++){var s=u[o];r(n.shapes,s)}else r(n.shapes,u)}}if(void 0!==this.material)if(Array.isArray(this.material)){var c=[];for(o=0,a=this.material.length;o<a;o++)c.push(r(n.materials,this.material[o]));l.material=c}else l.material=r(n.materials,this.material);if(this.children.length>0)for(l.children=[],o=0;o<this.children.length;o++)l.children.push(this.children[o].toJSON(n).object);if(t){var h=m(n.geometries),p=m(n.materials),d=m(n.textures),f=m(n.images);u=m(n.shapes),h.length>0&&(e.geometries=h),p.length>0&&(e.materials=p),d.length>0&&(e.textures=d),f.length>0&&(e.images=f),u.length>0&&(e.shapes=u)}return e.object=l,e;function m(n){var t=[];for(var e in n){var l=n[e];delete l.metadata,t.push(l)}return t}},clone:function(n){return(new this.constructor).copy(this,n)},copy:function(n,t){if(void 0===t&&(t=!0),this.name=n.name,this.up.copy(n.up),this.position.copy(n.position),this.quaternion.copy(n.quaternion),this.scale.copy(n.scale),this.matrix.copy(n.matrix),this.matrixWorld.copy(n.matrixWorld),this.matrixAutoUpdate=n.matrixAutoUpdate,this.matrixWorldNeedsUpdate=n.matrixWorldNeedsUpdate,this.layers.mask=n.layers.mask,this.visible=n.visible,this.castShadow=n.castShadow,this.receiveShadow=n.receiveShadow,this.frustumCulled=n.frustumCulled,this.renderOrder=n.renderOrder,this.userData=JSON.parse(JSON.stringify(n.userData)),!0===t)for(var e=0;e<n.children.length;e++){var l=n.children[e];this.add(l.clone())}return this}});var Ce,Re,Oe=0;function De(){Object.defineProperty(this,"id",{value:Oe+=2}),this.uuid=Ft.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function Ie(n,t,e){if(Array.isArray(n))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=n,this.itemSize=t,this.count=void 0!==n?n.length/t:0,this.normalized=!0===e,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function ze(n,t,e){Ie.call(this,new Int8Array(n),t,e)}function Ne(n,t,e){Ie.call(this,new Uint8Array(n),t,e)}function Be(n,t,e){Ie.call(this,new Uint8ClampedArray(n),t,e)}function Fe(n,t,e){Ie.call(this,new Int16Array(n),t,e)}function ke(n,t,e){Ie.call(this,new Uint16Array(n),t,e)}function Ue(n,t,e){Ie.call(this,new Int32Array(n),t,e)}function je(n,t,e){Ie.call(this,new Uint32Array(n),t,e)}function Ge(n,t,e){Ie.call(this,new Float32Array(n),t,e)}function He(n,t,e){Ie.call(this,new Float64Array(n),t,e)}function Ve(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function We(n){if(0===n.length)return-1/0;for(var t=n[0],e=1,l=n.length;e<l;++e)n[e]>t&&(t=n[e]);return t}De.prototype=Object.assign(Object.create(t.prototype),{constructor:De,isGeometry:!0,applyMatrix:function(n){for(var t=(new Ht).getNormalMatrix(n),e=0,l=this.vertices.length;e<l;e++)this.vertices[e].applyMatrix4(n);for(e=0,l=this.faces.length;e<l;e++){var r=this.faces[e];r.normal.applyMatrix3(t).normalize();for(var i=0,u=r.vertexNormals.length;i<u;i++)r.vertexNormals[i].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var n=new Ut;return function(t){return n.makeRotationX(t),this.applyMatrix(n),this}}(),rotateY:function(){var n=new Ut;return function(t){return n.makeRotationY(t),this.applyMatrix(n),this}}(),rotateZ:function(){var n=new Ut;return function(t){return n.makeRotationZ(t),this.applyMatrix(n),this}}(),translate:function(){var n=new Ut;return function(t,e,l){return n.makeTranslation(t,e,l),this.applyMatrix(n),this}}(),scale:function(){var n=new Ut;return function(t,e,l){return n.makeScale(t,e,l),this.applyMatrix(n),this}}(),lookAt:(Re=new Pe,function(n){Re.lookAt(n),Re.updateMatrix(),this.applyMatrix(Re.matrix)}),fromBufferGeometry:function(n){var t=this,e=null!==n.index?n.index.array:void 0,l=n.attributes,r=l.position.array,i=void 0!==l.normal?l.normal.array:void 0,u=void 0!==l.color?l.color.array:void 0,o=void 0!==l.uv?l.uv.array:void 0,a=void 0!==l.uv2?l.uv2.array:void 0;void 0!==a&&(this.faceVertexUvs[1]=[]);for(var s=0,c=0;s<r.length;s+=3,c+=2)t.vertices.push((new Gt).fromArray(r,s)),void 0!==u&&t.colors.push((new me).fromArray(u,s));function h(n,e,l,r){var s=void 0===u?[]:[t.colors[n].clone(),t.colors[e].clone(),t.colors[l].clone()],c=new _e(n,e,l,void 0===i?[]:[(new Gt).fromArray(i,3*n),(new Gt).fromArray(i,3*e),(new Gt).fromArray(i,3*l)],s,r);t.faces.push(c),void 0!==o&&t.faceVertexUvs[0].push([(new kt).fromArray(o,2*n),(new kt).fromArray(o,2*e),(new kt).fromArray(o,2*l)]),void 0!==a&&t.faceVertexUvs[1].push([(new kt).fromArray(a,2*n),(new kt).fromArray(a,2*e),(new kt).fromArray(a,2*l)])}var p=n.groups;if(p.length>0)for(s=0;s<p.length;s++)for(var d=p[s],f=d.start,m=(c=f,f+d.count);c<m;c+=3)void 0!==e?h(e[c],e[c+1],e[c+2],d.materialIndex):h(c,c+1,c+2,d.materialIndex);else if(void 0!==e)for(s=0;s<e.length;s+=3)h(e[s],e[s+1],e[s+2]);else for(s=0;s<r.length/3;s+=3)h(s,s+1,s+2);return this.computeFaceNormals(),null!==n.boundingBox&&(this.boundingBox=n.boundingBox.clone()),null!==n.boundingSphere&&(this.boundingSphere=n.boundingSphere.clone()),this},center:(Ce=new Gt,function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ce).negate(),this.translate(Ce.x,Ce.y,Ce.z),this}),normalize:function(){this.computeBoundingSphere();var n=this.boundingSphere.center,t=this.boundingSphere.radius,e=0===t?1:1/t,l=new Ut;return l.set(e,0,0,-e*n.x,0,e,0,-e*n.y,0,0,e,-e*n.z,0,0,0,1),this.applyMatrix(l),this},computeFaceNormals:function(){for(var n=new Gt,t=new Gt,e=0,l=this.faces.length;e<l;e++){var r=this.faces[e],i=this.vertices[r.a],u=this.vertices[r.b],o=this.vertices[r.c];n.subVectors(o,u),t.subVectors(i,u),n.cross(t),n.normalize(),r.normal.copy(n)}},computeVertexNormals:function(n){var t,e,l,r,i,u;for(void 0===n&&(n=!0),u=new Array(this.vertices.length),t=0,e=this.vertices.length;t<e;t++)u[t]=new Gt;if(n){var o,a,s,c=new Gt,h=new Gt;for(l=0,r=this.faces.length;l<r;l++)i=this.faces[l],o=this.vertices[i.a],a=this.vertices[i.b],s=this.vertices[i.c],c.subVectors(s,a),h.subVectors(o,a),c.cross(h),u[i.a].add(c),u[i.b].add(c),u[i.c].add(c)}else for(this.computeFaceNormals(),l=0,r=this.faces.length;l<r;l++)u[(i=this.faces[l]).a].add(i.normal),u[i.b].add(i.normal),u[i.c].add(i.normal);for(t=0,e=this.vertices.length;t<e;t++)u[t].normalize();for(l=0,r=this.faces.length;l<r;l++){var p=(i=this.faces[l]).vertexNormals;3===p.length?(p[0].copy(u[i.a]),p[1].copy(u[i.b]),p[2].copy(u[i.c])):(p[0]=u[i.a].clone(),p[1]=u[i.b].clone(),p[2]=u[i.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var n,t,e;for(this.computeFaceNormals(),n=0,t=this.faces.length;n<t;n++){var l=(e=this.faces[n]).vertexNormals;3===l.length?(l[0].copy(e.normal),l[1].copy(e.normal),l[2].copy(e.normal)):(l[0]=e.normal.clone(),l[1]=e.normal.clone(),l[2]=e.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var n,t,e,l,r;for(e=0,l=this.faces.length;e<l;e++)for((r=this.faces[e]).__originalFaceNormal?r.__originalFaceNormal.copy(r.normal):r.__originalFaceNormal=r.normal.clone(),r.__originalVertexNormals||(r.__originalVertexNormals=[]),n=0,t=r.vertexNormals.length;n<t;n++)r.__originalVertexNormals[n]?r.__originalVertexNormals[n].copy(r.vertexNormals[n]):r.__originalVertexNormals[n]=r.vertexNormals[n].clone();var i=new De;for(i.faces=this.faces,n=0,t=this.morphTargets.length;n<t;n++){if(!this.morphNormals[n]){this.morphNormals[n]={},this.morphNormals[n].faceNormals=[],this.morphNormals[n].vertexNormals=[];var u=this.morphNormals[n].faceNormals,o=this.morphNormals[n].vertexNormals;for(e=0,l=this.faces.length;e<l;e++)a=new Gt,s={a:new Gt,b:new Gt,c:new Gt},u.push(a),o.push(s)}var a,s,c=this.morphNormals[n];for(i.vertices=this.morphTargets[n].vertices,i.computeFaceNormals(),i.computeVertexNormals(),e=0,l=this.faces.length;e<l;e++)r=this.faces[e],a=c.faceNormals[e],s=c.vertexNormals[e],a.copy(r.normal),s.a.copy(r.vertexNormals[0]),s.b.copy(r.vertexNormals[1]),s.c.copy(r.vertexNormals[2])}for(e=0,l=this.faces.length;e<l;e++)(r=this.faces[e]).normal=r.__originalFaceNormal,r.vertexNormals=r.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new le),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new re),this.boundingSphere.setFromPoints(this.vertices)},merge:function(n,t,e){if(n&&n.isGeometry){var l,r=this.vertices.length,i=this.vertices,u=n.vertices,o=this.faces,a=n.faces,s=this.faceVertexUvs[0],c=n.faceVertexUvs[0],h=this.colors,p=n.colors;void 0===e&&(e=0),void 0!==t&&(l=(new Ht).getNormalMatrix(t));for(var d=0,f=u.length;d<f;d++){var m=u[d].clone();void 0!==t&&m.applyMatrix4(t),i.push(m)}for(d=0,f=p.length;d<f;d++)h.push(p[d].clone());for(d=0,f=a.length;d<f;d++){var v,g,y,x=a[d],b=x.vertexNormals,_=x.vertexColors;(v=new _e(x.a+r,x.b+r,x.c+r)).normal.copy(x.normal),void 0!==l&&v.normal.applyMatrix3(l).normalize();for(var w=0,M=b.length;w<M;w++)g=b[w].clone(),void 0!==l&&g.applyMatrix3(l).normalize(),v.vertexNormals.push(g);for(v.color.copy(x.color),w=0,M=_.length;w<M;w++)y=_[w],v.vertexColors.push(y.clone());v.materialIndex=x.materialIndex+e,o.push(v)}for(d=0,f=c.length;d<f;d++){var E=c[d],S=[];if(void 0!==E){for(w=0,M=E.length;w<M;w++)S.push(E[w].clone());s.push(S)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",n)},mergeMesh:function(n){n&&n.isMesh?(n.matrixAutoUpdate&&n.updateMatrix(),this.merge(n.geometry,n.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",n)},mergeVertices:function(){var n,t,e,l,r,i,u,o,a={},s=[],c=[],h=Math.pow(10,4);for(e=0,l=this.vertices.length;e<l;e++)n=this.vertices[e],void 0===a[t=Math.round(n.x*h)+"_"+Math.round(n.y*h)+"_"+Math.round(n.z*h)]?(a[t]=e,s.push(this.vertices[e]),c[e]=s.length-1):c[e]=c[a[t]];var p=[];for(e=0,l=this.faces.length;e<l;e++){(r=this.faces[e]).a=c[r.a],r.b=c[r.b],r.c=c[r.c],i=[r.a,r.b,r.c];for(var d=0;d<3;d++)if(i[d]===i[(d+1)%3]){p.push(e);break}}for(e=p.length-1;e>=0;e--){var f=p[e];for(this.faces.splice(f,1),u=0,o=this.faceVertexUvs.length;u<o;u++)this.faceVertexUvs[u].splice(f,1)}var m=this.vertices.length-s.length;return this.vertices=s,m},setFromPoints:function(n){this.vertices=[];for(var t=0,e=n.length;t<e;t++){var l=n[t];this.vertices.push(new Gt(l.x,l.y,l.z||0))}return this},sortFacesByMaterialIndex:function(){for(var n=this.faces,t=n.length,e=0;e<t;e++)n[e]._id=e;n.sort((function(n,t){return n.materialIndex-t.materialIndex}));var l,r,i=this.faceVertexUvs[0],u=this.faceVertexUvs[1];for(i&&i.length===t&&(l=[]),u&&u.length===t&&(r=[]),e=0;e<t;e++){var o=n[e]._id;l&&l.push(i[o]),r&&r.push(u[o])}l&&(this.faceVertexUvs[0]=l),r&&(this.faceVertexUvs[1]=r)},toJSON:function(){var n={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var e in t)void 0!==t[e]&&(n[e]=t[e]);return n}for(var l=[],r=0;r<this.vertices.length;r++){var i=this.vertices[r];l.push(i.x,i.y,i.z)}var u=[],o=[],a={},s=[],c={},h=[],p={};for(r=0;r<this.faces.length;r++){var d=this.faces[r],f=void 0!==this.faceVertexUvs[0][r],m=d.normal.length()>0,v=d.vertexNormals.length>0,g=1!==d.color.r||1!==d.color.g||1!==d.color.b,y=d.vertexColors.length>0,x=0;if(x=M(x,0,0),x=M(x,1,!0),x=M(x,2,!1),x=M(x,3,f),x=M(x,4,m),x=M(x,5,v),x=M(x,6,g),x=M(x,7,y),u.push(x),u.push(d.a,d.b,d.c),u.push(d.materialIndex),f){var b=this.faceVertexUvs[0][r];u.push(T(b[0]),T(b[1]),T(b[2]))}if(m&&u.push(E(d.normal)),v){var _=d.vertexNormals;u.push(E(_[0]),E(_[1]),E(_[2]))}if(g&&u.push(S(d.color)),y){var w=d.vertexColors;u.push(S(w[0]),S(w[1]),S(w[2]))}}function M(n,t,e){return e?n|1<<t:n&~(1<<t)}function E(n){var t=n.x.toString()+n.y.toString()+n.z.toString();return void 0!==a[t]||(a[t]=o.length/3,o.push(n.x,n.y,n.z)),a[t]}function S(n){var t=n.r.toString()+n.g.toString()+n.b.toString();return void 0!==c[t]||(c[t]=s.length,s.push(n.getHex())),c[t]}function T(n){var t=n.x.toString()+n.y.toString();return void 0!==p[t]||(p[t]=h.length/2,h.push(n.x,n.y)),p[t]}return n.data={},n.data.vertices=l,n.data.normals=o,s.length>0&&(n.data.colors=s),h.length>0&&(n.data.uvs=[h]),n.data.faces=u,n},clone:function(){return(new De).copy(this)},copy:function(n){var t,e,l,r,i,u;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=n.name;var o=n.vertices;for(t=0,e=o.length;t<e;t++)this.vertices.push(o[t].clone());var a=n.colors;for(t=0,e=a.length;t<e;t++)this.colors.push(a[t].clone());var s=n.faces;for(t=0,e=s.length;t<e;t++)this.faces.push(s[t].clone());for(t=0,e=n.faceVertexUvs.length;t<e;t++){var c=n.faceVertexUvs[t];for(void 0===this.faceVertexUvs[t]&&(this.faceVertexUvs[t]=[]),l=0,r=c.length;l<r;l++){var h=c[l],p=[];for(i=0,u=h.length;i<u;i++){var d=h[i];p.push(d.clone())}this.faceVertexUvs[t].push(p)}}var f=n.morphTargets;for(t=0,e=f.length;t<e;t++){var m={};if(m.name=f[t].name,void 0!==f[t].vertices)for(m.vertices=[],l=0,r=f[t].vertices.length;l<r;l++)m.vertices.push(f[t].vertices[l].clone());if(void 0!==f[t].normals)for(m.normals=[],l=0,r=f[t].normals.length;l<r;l++)m.normals.push(f[t].normals[l].clone());this.morphTargets.push(m)}var v=n.morphNormals;for(t=0,e=v.length;t<e;t++){var g={};if(void 0!==v[t].vertexNormals)for(g.vertexNormals=[],l=0,r=v[t].vertexNormals.length;l<r;l++){var y=v[t].vertexNormals[l],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),g.vertexNormals.push(x)}if(void 0!==v[t].faceNormals)for(g.faceNormals=[],l=0,r=v[t].faceNormals.length;l<r;l++)g.faceNormals.push(v[t].faceNormals[l].clone());this.morphNormals.push(g)}var b=n.skinWeights;for(t=0,e=b.length;t<e;t++)this.skinWeights.push(b[t].clone());var _=n.skinIndices;for(t=0,e=_.length;t<e;t++)this.skinIndices.push(_[t].clone());var w=n.lineDistances;for(t=0,e=w.length;t<e;t++)this.lineDistances.push(w[t]);var M=n.boundingBox;null!==M&&(this.boundingBox=M.clone());var E=n.boundingSphere;return null!==E&&(this.boundingSphere=E.clone()),this.elementsNeedUpdate=n.elementsNeedUpdate,this.verticesNeedUpdate=n.verticesNeedUpdate,this.uvsNeedUpdate=n.uvsNeedUpdate,this.normalsNeedUpdate=n.normalsNeedUpdate,this.colorsNeedUpdate=n.colorsNeedUpdate,this.lineDistancesNeedUpdate=n.lineDistancesNeedUpdate,this.groupsNeedUpdate=n.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(Ie.prototype,"needsUpdate",{set:function(n){!0===n&&this.version++}}),Object.assign(Ie.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setArray:function(n){if(Array.isArray(n))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==n?n.length/this.itemSize:0,this.array=n,this},setDynamic:function(n){return this.dynamic=n,this},copy:function(n){return this.name=n.name,this.array=new n.array.constructor(n.array),this.itemSize=n.itemSize,this.count=n.count,this.normalized=n.normalized,this.dynamic=n.dynamic,this},copyAt:function(n,t,e){n*=this.itemSize,e*=t.itemSize;for(var l=0,r=this.itemSize;l<r;l++)this.array[n+l]=t.array[e+l];return this},copyArray:function(n){return this.array.set(n),this},copyColorsArray:function(n){for(var t=this.array,e=0,l=0,r=n.length;l<r;l++){var i=n[l];void 0===i&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",l),i=new me),t[e++]=i.r,t[e++]=i.g,t[e++]=i.b}return this},copyVector2sArray:function(n){for(var t=this.array,e=0,l=0,r=n.length;l<r;l++){var i=n[l];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",l),i=new kt),t[e++]=i.x,t[e++]=i.y}return this},copyVector3sArray:function(n){for(var t=this.array,e=0,l=0,r=n.length;l<r;l++){var i=n[l];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",l),i=new Gt),t[e++]=i.x,t[e++]=i.y,t[e++]=i.z}return this},copyVector4sArray:function(n){for(var t=this.array,e=0,l=0,r=n.length;l<r;l++){var i=n[l];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",l),i=new Qt),t[e++]=i.x,t[e++]=i.y,t[e++]=i.z,t[e++]=i.w}return this},set:function(n,t){return void 0===t&&(t=0),this.array.set(n,t),this},getX:function(n){return this.array[n*this.itemSize]},setX:function(n,t){return this.array[n*this.itemSize]=t,this},getY:function(n){return this.array[n*this.itemSize+1]},setY:function(n,t){return this.array[n*this.itemSize+1]=t,this},getZ:function(n){return this.array[n*this.itemSize+2]},setZ:function(n,t){return this.array[n*this.itemSize+2]=t,this},getW:function(n){return this.array[n*this.itemSize+3]},setW:function(n,t){return this.array[n*this.itemSize+3]=t,this},setXY:function(n,t,e){return n*=this.itemSize,this.array[n+0]=t,this.array[n+1]=e,this},setXYZ:function(n,t,e,l){return n*=this.itemSize,this.array[n+0]=t,this.array[n+1]=e,this.array[n+2]=l,this},setXYZW:function(n,t,e,l,r){return n*=this.itemSize,this.array[n+0]=t,this.array[n+1]=e,this.array[n+2]=l,this.array[n+3]=r,this},onUpload:function(n){return this.onUploadCallback=n,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)}}),ze.prototype=Object.create(Ie.prototype),ze.prototype.constructor=ze,Ne.prototype=Object.create(Ie.prototype),Ne.prototype.constructor=Ne,Be.prototype=Object.create(Ie.prototype),Be.prototype.constructor=Be,Fe.prototype=Object.create(Ie.prototype),Fe.prototype.constructor=Fe,ke.prototype=Object.create(Ie.prototype),ke.prototype.constructor=ke,Ue.prototype=Object.create(Ie.prototype),Ue.prototype.constructor=Ue,je.prototype=Object.create(Ie.prototype),je.prototype.constructor=je,Ge.prototype=Object.create(Ie.prototype),Ge.prototype.constructor=Ge,He.prototype=Object.create(Ie.prototype),He.prototype.constructor=He,Object.assign(Ve.prototype,{computeGroups:function(n){for(var t,e=[],l=void 0,r=n.faces,i=0;i<r.length;i++){var u=r[i];u.materialIndex!==l&&(l=u.materialIndex,void 0!==t&&(t.count=3*i-t.start,e.push(t)),t={start:3*i,materialIndex:l})}void 0!==t&&(t.count=3*i-t.start,e.push(t)),this.groups=e},fromGeometry:function(n){var t,e=n.faces,l=n.vertices,r=n.faceVertexUvs,i=r[0]&&r[0].length>0,u=r[1]&&r[1].length>0,o=n.morphTargets,a=o.length;if(a>0){t=[];for(var s=0;s<a;s++)t[s]={name:o[s].name,data:[]};this.morphTargets.position=t}var c,h=n.morphNormals,p=h.length;if(p>0){for(c=[],s=0;s<p;s++)c[s]={name:h[s].name,data:[]};this.morphTargets.normal=c}var d=n.skinIndices,f=n.skinWeights,m=d.length===l.length,v=f.length===l.length;for(l.length>0&&0===e.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported."),s=0;s<e.length;s++){var g=e[s];this.vertices.push(l[g.a],l[g.b],l[g.c]);var y=g.vertexNormals;if(3===y.length)this.normals.push(y[0],y[1],y[2]);else{var x=g.normal;this.normals.push(x,x,x)}var b,_=g.vertexColors;if(3===_.length)this.colors.push(_[0],_[1],_[2]);else{var w=g.color;this.colors.push(w,w,w)}!0===i&&(void 0!==(b=r[0][s])?this.uvs.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",s),this.uvs.push(new kt,new kt,new kt))),!0===u&&(void 0!==(b=r[1][s])?this.uvs2.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",s),this.uvs2.push(new kt,new kt,new kt)));for(var M=0;M<a;M++){var E=o[M].vertices;t[M].data.push(E[g.a],E[g.b],E[g.c])}for(M=0;M<p;M++){var S=h[M].vertexNormals[s];c[M].data.push(S.a,S.b,S.c)}m&&this.skinIndices.push(d[g.a],d[g.b],d[g.c]),v&&this.skinWeights.push(f[g.a],f[g.b],f[g.c])}return this.computeGroups(n),this.verticesNeedUpdate=n.verticesNeedUpdate,this.normalsNeedUpdate=n.normalsNeedUpdate,this.colorsNeedUpdate=n.colorsNeedUpdate,this.uvsNeedUpdate=n.uvsNeedUpdate,this.groupsNeedUpdate=n.groupsNeedUpdate,this}});var qe=1;function Xe(){Object.defineProperty(this,"id",{value:qe+=2}),this.uuid=Ft.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}function Ye(n,t,e,l,r,i){De.call(this),this.type="BoxGeometry",this.parameters={width:n,height:t,depth:e,widthSegments:l,heightSegments:r,depthSegments:i},this.fromBufferGeometry(new Ze(n,t,e,l,r,i)),this.mergeVertices()}function Ze(n,t,e,l,r,i){Xe.call(this),this.type="BoxBufferGeometry",this.parameters={width:n,height:t,depth:e,widthSegments:l,heightSegments:r,depthSegments:i};var u=this;n=n||1,t=t||1,e=e||1,l=Math.floor(l)||1,r=Math.floor(r)||1,i=Math.floor(i)||1;var o=[],a=[],s=[],c=[],h=0,p=0;function d(n,t,e,l,r,i,d,f,m,v,g){var y,x,b=i/m,_=d/v,w=i/2,M=d/2,E=f/2,S=m+1,T=v+1,A=0,L=0,P=new Gt;for(x=0;x<T;x++){var C=x*_-M;for(y=0;y<S;y++){var R=y*b-w;P[n]=R*l,P[t]=C*r,P[e]=E,a.push(P.x,P.y,P.z),P[n]=0,P[t]=0,P[e]=f>0?1:-1,s.push(P.x,P.y,P.z),c.push(y/m),c.push(1-x/v),A+=1}}for(x=0;x<v;x++)for(y=0;y<m;y++){var O=h+y+S*x,D=h+y+S*(x+1),I=h+(y+1)+S*(x+1),z=h+(y+1)+S*x;o.push(O,D,z),o.push(D,I,z),L+=6}u.addGroup(p,L,g),p+=L,h+=A}d("z","y","x",-1,-1,e,t,n,i,r,0),d("z","y","x",1,-1,e,t,-n,i,r,1),d("x","z","y",1,1,n,e,t,l,i,2),d("x","z","y",1,-1,n,e,-t,l,i,3),d("x","y","z",1,-1,n,t,e,l,r,4),d("x","y","z",-1,-1,n,t,-e,l,r,5),this.setIndex(o),this.addAttribute("position",new Ge(a,3)),this.addAttribute("normal",new Ge(s,3)),this.addAttribute("uv",new Ge(c,2))}function Je(n,t,e,l){De.call(this),this.type="PlaneGeometry",this.parameters={width:n,height:t,widthSegments:e,heightSegments:l},this.fromBufferGeometry(new Ke(n,t,e,l)),this.mergeVertices()}function Ke(n,t,e,l){Xe.call(this),this.type="PlaneBufferGeometry",this.parameters={width:n,height:t,widthSegments:e,heightSegments:l};var r,i,u=(n=n||1)/2,o=(t=t||1)/2,a=Math.floor(e)||1,s=Math.floor(l)||1,c=a+1,h=s+1,p=n/a,d=t/s,f=[],m=[],v=[],g=[];for(i=0;i<h;i++){var y=i*d-o;for(r=0;r<c;r++){var x=r*p-u;m.push(x,-y,0),v.push(0,0,1),g.push(r/a),g.push(1-i/s)}}for(i=0;i<s;i++)for(r=0;r<a;r++){var b=r+c*i,_=r+c*(i+1),w=r+1+c*(i+1),M=r+1+c*i;f.push(b,_,M),f.push(_,w,M)}this.setIndex(f),this.addAttribute("position",new Ge(m,3)),this.addAttribute("normal",new Ge(v,3)),this.addAttribute("uv",new Ge(g,2))}Xe.prototype=Object.assign(Object.create(t.prototype),{constructor:Xe,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(n){Array.isArray(n)?this.index=new(We(n)>65535?je:ke)(n,1):this.index=n},addAttribute:function(n,t){return t&&t.isBufferAttribute||t&&t.isInterleavedBufferAttribute?"index"===n?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):(this.attributes[n]=t,this):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(n,new Ie(arguments[1],arguments[2])))},getAttribute:function(n){return this.attributes[n]},removeAttribute:function(n){return delete this.attributes[n],this},addGroup:function(n,t,e){this.groups.push({start:n,count:t,materialIndex:void 0!==e?e:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(n,t){this.drawRange.start=n,this.drawRange.count=t},applyMatrix:function(n){var t=this.attributes.position;void 0!==t&&(n.applyToBufferAttribute(t),t.needsUpdate=!0);var e=this.attributes.normal;return void 0!==e&&((new Ht).getNormalMatrix(n).applyToBufferAttribute(e),e.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var n=new Ut;return function(t){return n.makeRotationX(t),this.applyMatrix(n),this}}(),rotateY:function(){var n=new Ut;return function(t){return n.makeRotationY(t),this.applyMatrix(n),this}}(),rotateZ:function(){var n=new Ut;return function(t){return n.makeRotationZ(t),this.applyMatrix(n),this}}(),translate:function(){var n=new Ut;return function(t,e,l){return n.makeTranslation(t,e,l),this.applyMatrix(n),this}}(),scale:function(){var n=new Ut;return function(t,e,l){return n.makeScale(t,e,l),this.applyMatrix(n),this}}(),lookAt:function(){var n=new Pe;return function(t){n.lookAt(t),n.updateMatrix(),this.applyMatrix(n.matrix)}}(),center:function(){var n=new Gt;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(n).negate(),this.translate(n.x,n.y,n.z),this}}(),setFromObject:function(n){var t=n.geometry;if(n.isPoints||n.isLine){var e=new Ge(3*t.vertices.length,3),l=new Ge(3*t.colors.length,3);if(this.addAttribute("position",e.copyVector3sArray(t.vertices)),this.addAttribute("color",l.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var r=new Ge(t.lineDistances.length,1);this.addAttribute("lineDistance",r.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else n.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},setFromPoints:function(n){for(var t=[],e=0,l=n.length;e<l;e++){var r=n[e];t.push(r.x,r.y,r.z||0)}return this.addAttribute("position",new Ge(t,3)),this},updateFromObject:function(n){var t,e=n.geometry;if(n.isMesh){var l=e.__directGeometry;if(!0===e.elementsNeedUpdate&&(l=void 0,e.elementsNeedUpdate=!1),void 0===l)return this.fromGeometry(e);l.verticesNeedUpdate=e.verticesNeedUpdate,l.normalsNeedUpdate=e.normalsNeedUpdate,l.colorsNeedUpdate=e.colorsNeedUpdate,l.uvsNeedUpdate=e.uvsNeedUpdate,l.groupsNeedUpdate=e.groupsNeedUpdate,e.verticesNeedUpdate=!1,e.normalsNeedUpdate=!1,e.colorsNeedUpdate=!1,e.uvsNeedUpdate=!1,e.groupsNeedUpdate=!1,e=l}return!0===e.verticesNeedUpdate&&(void 0!==(t=this.attributes.position)&&(t.copyVector3sArray(e.vertices),t.needsUpdate=!0),e.verticesNeedUpdate=!1),!0===e.normalsNeedUpdate&&(void 0!==(t=this.attributes.normal)&&(t.copyVector3sArray(e.normals),t.needsUpdate=!0),e.normalsNeedUpdate=!1),!0===e.colorsNeedUpdate&&(void 0!==(t=this.attributes.color)&&(t.copyColorsArray(e.colors),t.needsUpdate=!0),e.colorsNeedUpdate=!1),e.uvsNeedUpdate&&(void 0!==(t=this.attributes.uv)&&(t.copyVector2sArray(e.uvs),t.needsUpdate=!0),e.uvsNeedUpdate=!1),e.lineDistancesNeedUpdate&&(void 0!==(t=this.attributes.lineDistance)&&(t.copyArray(e.lineDistances),t.needsUpdate=!0),e.lineDistancesNeedUpdate=!1),e.groupsNeedUpdate&&(e.computeGroups(n.geometry),this.groups=e.groups,e.groupsNeedUpdate=!1),this},fromGeometry:function(n){return n.__directGeometry=(new Ve).fromGeometry(n),this.fromDirectGeometry(n.__directGeometry)},fromDirectGeometry:function(n){var t=new Float32Array(3*n.vertices.length);if(this.addAttribute("position",new Ie(t,3).copyVector3sArray(n.vertices)),n.normals.length>0){var e=new Float32Array(3*n.normals.length);this.addAttribute("normal",new Ie(e,3).copyVector3sArray(n.normals))}if(n.colors.length>0){var l=new Float32Array(3*n.colors.length);this.addAttribute("color",new Ie(l,3).copyColorsArray(n.colors))}if(n.uvs.length>0){var r=new Float32Array(2*n.uvs.length);this.addAttribute("uv",new Ie(r,2).copyVector2sArray(n.uvs))}if(n.uvs2.length>0){var i=new Float32Array(2*n.uvs2.length);this.addAttribute("uv2",new Ie(i,2).copyVector2sArray(n.uvs2))}for(var u in this.groups=n.groups,n.morphTargets){for(var o=[],a=n.morphTargets[u],s=0,c=a.length;s<c;s++){var h=a[s],p=new Ge(3*h.data.length,3);p.name=h.name,o.push(p.copyVector3sArray(h.data))}this.morphAttributes[u]=o}if(n.skinIndices.length>0){var d=new Ge(4*n.skinIndices.length,4);this.addAttribute("skinIndex",d.copyVector4sArray(n.skinIndices))}if(n.skinWeights.length>0){var f=new Ge(4*n.skinWeights.length,4);this.addAttribute("skinWeight",f.copyVector4sArray(n.skinWeights))}return null!==n.boundingSphere&&(this.boundingSphere=n.boundingSphere.clone()),null!==n.boundingBox&&(this.boundingBox=n.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new le);var n=this.attributes.position;void 0!==n?this.boundingBox.setFromBufferAttribute(n):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var n=new le,t=new Gt;return function(){null===this.boundingSphere&&(this.boundingSphere=new re);var e=this.attributes.position;if(e){var l=this.boundingSphere.center;n.setFromBufferAttribute(e),n.getCenter(l);for(var r=0,i=0,u=e.count;i<u;i++)t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),r=Math.max(r,l.distanceToSquared(t));this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var n=this.index,t=this.attributes;if(t.position){var e=t.position.array;if(void 0===t.normal)this.addAttribute("normal",new Ie(new Float32Array(e.length),3));else for(var l=t.normal.array,r=0,i=l.length;r<i;r++)l[r]=0;var u,o,a,s=t.normal.array,c=new Gt,h=new Gt,p=new Gt,d=new Gt,f=new Gt;if(n){var m=n.array;for(r=0,i=n.count;r<i;r+=3)u=3*m[r+0],o=3*m[r+1],a=3*m[r+2],c.fromArray(e,u),h.fromArray(e,o),p.fromArray(e,a),d.subVectors(p,h),f.subVectors(c,h),d.cross(f),s[u]+=d.x,s[u+1]+=d.y,s[u+2]+=d.z,s[o]+=d.x,s[o+1]+=d.y,s[o+2]+=d.z,s[a]+=d.x,s[a+1]+=d.y,s[a+2]+=d.z}else for(r=0,i=e.length;r<i;r+=9)c.fromArray(e,r),h.fromArray(e,r+3),p.fromArray(e,r+6),d.subVectors(p,h),f.subVectors(c,h),d.cross(f),s[r]=d.x,s[r+1]=d.y,s[r+2]=d.z,s[r+3]=d.x,s[r+4]=d.y,s[r+5]=d.z,s[r+6]=d.x,s[r+7]=d.y,s[r+8]=d.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(n,t){if(n&&n.isBufferGeometry){void 0===t&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var e=this.attributes;for(var l in e)if(void 0!==n.attributes[l])for(var r=e[l].array,i=n.attributes[l],u=i.array,o=0,a=i.itemSize*t;o<u.length;o++,a++)r[a]=u[o];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",n)},normalizeNormals:function(){var n=new Gt;return function(){for(var t=this.attributes.normal,e=0,l=t.count;e<l;e++)n.x=t.getX(e),n.y=t.getY(e),n.z=t.getZ(e),n.normalize(),t.setXYZ(e,n.x,n.y,n.z)}}(),toNonIndexed:function(){function n(n,t){for(var e=n.array,l=n.itemSize,r=new e.constructor(t.length*l),i=0,u=0,o=0,a=t.length;o<a;o++){i=t[o]*l;for(var s=0;s<l;s++)r[u++]=e[i++]}return new Ie(r,l)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var t=new Xe,e=this.index.array,l=this.attributes;for(var r in l){var i=n(l[r],e);t.addAttribute(r,i)}var u=this.morphAttributes;for(r in u){for(var o=[],a=u[r],s=0,c=a.length;s<c;s++)i=n(a[s],e),o.push(i);t.morphAttributes[r]=o}for(var h=this.groups,p=(s=0,h.length);s<p;s++){var d=h[s];t.addGroup(d.start,d.count,d.materialIndex)}return t},toJSON:function(){var n={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),Object.keys(this.userData).length>0&&(n.userData=this.userData),void 0!==this.parameters){var t=this.parameters;for(var e in t)void 0!==t[e]&&(n[e]=t[e]);return n}n.data={attributes:{}};var l=this.index;if(null!==l){var r=Array.prototype.slice.call(l.array);n.data.index={type:l.array.constructor.name,array:r}}var i=this.attributes;for(var e in i){var u=i[e];r=Array.prototype.slice.call(u.array),n.data.attributes[e]={itemSize:u.itemSize,type:u.array.constructor.name,array:r,normalized:u.normalized}}var o=this.groups;o.length>0&&(n.data.groups=JSON.parse(JSON.stringify(o)));var a=this.boundingSphere;return null!==a&&(n.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),n},clone:function(){return(new Xe).copy(this)},copy:function(n){var t,e,l;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=n.name;var r=n.index;null!==r&&this.setIndex(r.clone());var i=n.attributes;for(t in i){var u=i[t];this.addAttribute(t,u.clone())}var o=n.morphAttributes;for(t in o){var a=[],s=o[t];for(e=0,l=s.length;e<l;e++)a.push(s[e].clone());this.morphAttributes[t]=a}var c=n.groups;for(e=0,l=c.length;e<l;e++){var h=c[e];this.addGroup(h.start,h.count,h.materialIndex)}var p=n.boundingBox;null!==p&&(this.boundingBox=p.clone());var d=n.boundingSphere;return null!==d&&(this.boundingSphere=d.clone()),this.drawRange.start=n.drawRange.start,this.drawRange.count=n.drawRange.count,this.userData=n.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Ye.prototype=Object.create(De.prototype),Ye.prototype.constructor=Ye,Ze.prototype=Object.create(Xe.prototype),Ze.prototype.constructor=Ze,Je.prototype=Object.create(De.prototype),Je.prototype.constructor=Je,Ke.prototype=Object.create(Xe.prototype),Ke.prototype.constructor=Ke;var Qe,$e,nl,tl,el,ll,rl,ul,ol,al,sl,cl,hl=0;function pl(){Object.defineProperty(this,"id",{value:hl++}),this.uuid=Ft.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=L,this.side=w,this.flatShading=!1,this.vertexColors=S,this.opacity=1,this.transparent=!1,this.blendSrc=G,this.blendDst=H,this.blendEquation=D,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=Q,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.userData={},this.needsUpdate=!0}function dl(n){pl.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==n&&(void 0!==n.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(n))}function fl(n,t){this.origin=void 0!==n?n:new Gt,this.direction=void 0!==t?t:new Gt}function ml(n,t,e){this.a=void 0!==n?n:new Gt,this.b=void 0!==t?t:new Gt,this.c=void 0!==e?e:new Gt}function vl(n){pl.call(this),this.type="MeshBasicMaterial",this.color=new me(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ln,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(n)}function gl(n,t){Pe.call(this),this.type="Mesh",this.geometry=void 0!==n?n:new Xe,this.material=void 0!==t?t:new vl({color:16777215*Math.random()}),this.drawMode=Et,this.updateMorphTargets()}function yl(n,t,e,l){var r,i,u=new me(0),o=0,a=null,s=0;function c(n,e){t.buffers.color.setClear(n.r,n.g,n.b,e,l)}return{getClearColor:function(){return u},setClearColor:function(n,t){u.set(n),c(u,o=void 0!==t?t:1)},getClearAlpha:function(){return o},setClearAlpha:function(n){c(u,o=n)},render:function(t,l,h,p){var d=l.background;if(null===d?(c(u,o),a=null,s=0):d&&d.isColor&&(c(d,1),p=!0,a=null,s=0),(n.autoClear||p)&&n.clear(n.autoClearColor,n.autoClearDepth,n.autoClearStencil),d&&(d.isCubeTexture||d.isWebGLRenderTargetCube)){void 0===i&&((i=new gl(new Ze(1,1,1),new dl({type:"BackgroundCubeMaterial",uniforms:ae(ye.cube.uniforms),vertexShader:ye.cube.vertexShader,fragmentShader:ye.cube.fragmentShader,side:M,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),i.geometry.removeAttribute("uv"),i.onBeforeRender=function(n,t,e){this.matrixWorld.copyPosition(e.matrixWorld)},Object.defineProperty(i.material,"map",{get:function(){return this.uniforms.tCube.value}}),e.update(i));var f=d.isWebGLRenderTargetCube?d.texture:d;i.material.uniforms.tCube.value=f,i.material.uniforms.tFlip.value=d.isWebGLRenderTargetCube?1:-1,a===d&&s===f.version||(i.material.needsUpdate=!0,a=d,s=f.version),t.unshift(i,i.geometry,i.material,0,0,null)}else d&&d.isTexture&&(void 0===r&&((r=new gl(new Ke(2,2),new dl({type:"BackgroundMaterial",uniforms:ae(ye.background.uniforms),vertexShader:ye.background.vertexShader,fragmentShader:ye.background.fragmentShader,side:w,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),Object.defineProperty(r.material,"map",{get:function(){return this.uniforms.t2D.value}}),e.update(r)),r.material.uniforms.t2D.value=d,!0===d.matrixAutoUpdate&&d.updateMatrix(),r.material.uniforms.uvTransform.value.copy(d.matrix),a===d&&s===d.version||(r.material.needsUpdate=!0,a=d,s=d.version),t.unshift(r,r.geometry,r.material,0,0,null))}}}function xl(n,t,e,l){var r;this.setMode=function(n){r=n},this.render=function(t,l){n.drawArrays(r,t,l),e.update(l,r)},this.renderInstances=function(i,u,o){var a;if(l.isWebGL2)a=n;else if(null===(a=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");a[l.isWebGL2?"drawArraysInstanced":"drawArraysInstancedANGLE"](r,u,o,i.maxInstancedCount),e.update(o,r,i.maxInstancedCount)}}function bl(n,t,e){var l;function r(t){if("highp"===t){if(n.getShaderPrecisionFormat(35633,36338).precision>0&&n.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";t="mediump"}return"mediump"===t&&n.getShaderPrecisionFormat(35633,36337).precision>0&&n.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var i="undefined"!=typeof WebGL2RenderingContext&&n instanceof WebGL2RenderingContext,u=void 0!==e.precision?e.precision:"highp",o=r(u);o!==u&&(console.warn("THREE.WebGLRenderer:",u,"not supported, using",o,"instead."),u=o);var a=!0===e.logarithmicDepthBuffer,s=n.getParameter(34930),c=n.getParameter(35660),h=n.getParameter(3379),p=n.getParameter(34076),d=n.getParameter(34921),f=n.getParameter(36347),m=n.getParameter(36348),v=n.getParameter(36349),g=c>0,y=i||!!t.get("OES_texture_float");return{isWebGL2:i,getMaxAnisotropy:function(){if(void 0!==l)return l;var e=t.get("EXT_texture_filter_anisotropic");return l=null!==e?n.getParameter(e.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:r,precision:u,logarithmicDepthBuffer:a,maxTextures:s,maxVertexTextures:c,maxTextureSize:h,maxCubemapSize:p,maxAttributes:d,maxVertexUniforms:f,maxVaryings:m,maxFragmentUniforms:v,vertexTextures:g,floatFragmentTextures:y,floatVertexTextures:g&&y,maxSamples:i?n.getParameter(36183):0}}function _l(){var n=this,t=null,e=0,l=!1,r=!1,i=new ie,u=new Ht,o={value:null,needsUpdate:!1};function a(){o.value!==t&&(o.value=t,o.needsUpdate=e>0),n.numPlanes=e,n.numIntersection=0}function s(t,e,l,r){var a=null!==t?t.length:0,s=null;if(0!==a){if(s=o.value,!0!==r||null===s){var c=l+4*a,h=e.matrixWorldInverse;u.getNormalMatrix(h),(null===s||s.length<c)&&(s=new Float32Array(c));for(var p=0,d=l;p!==a;++p,d+=4)i.copy(t[p]).applyMatrix4(h,u),i.normal.toArray(s,d),s[d+3]=i.constant}o.value=s,o.needsUpdate=!0}return n.numPlanes=a,s}this.uniform=o,this.numPlanes=0,this.numIntersection=0,this.init=function(n,r,i){var u=0!==n.length||r||0!==e||l;return l=r,t=s(n,i,0),e=n.length,u},this.beginShadows=function(){r=!0,s(null)},this.endShadows=function(){r=!1,a()},this.setState=function(n,i,u,c,h,p){if(!l||null===n||0===n.length||r&&!u)r?s(null):a();else{var d=r?0:e,f=4*d,m=h.clippingState||null;o.value=m,m=s(n,c,f,p);for(var v=0;v!==f;++v)m[v]=t[v];h.clippingState=m,this.numIntersection=i?this.numPlanes:0,this.numPlanes+=d}}}function wl(n){var t={};return{get:function(e){if(void 0!==t[e])return t[e];var l;switch(e){case"WEBGL_depth_texture":l=n.getExtension("WEBGL_depth_texture")||n.getExtension("MOZ_WEBGL_depth_texture")||n.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":l=n.getExtension("EXT_texture_filter_anisotropic")||n.getExtension("MOZ_EXT_texture_filter_anisotropic")||n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":l=n.getExtension("WEBGL_compressed_texture_s3tc")||n.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":l=n.getExtension("WEBGL_compressed_texture_pvrtc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:l=n.getExtension(e)}return null===l&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t[e]=l,l}}}function Ml(n,t,e){var l={},r={};function i(n){var u=n.target,o=l[u.id];for(var a in null!==o.index&&t.remove(o.index),o.attributes)t.remove(o.attributes[a]);u.removeEventListener("dispose",i),delete l[u.id];var s=r[o.id];s&&(t.remove(s),delete r[o.id]),e.memory.geometries--}return{get:function(n,t){var r=l[t.id];return r||(t.addEventListener("dispose",i),t.isBufferGeometry?r=t:t.isGeometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new Xe).setFromObject(n)),r=t._bufferGeometry),l[t.id]=r,e.memory.geometries++,r)},update:function(n){var e=n.index,l=n.attributes;for(var r in null!==e&&t.update(e,34963),l)t.update(l[r],34962);var i=n.morphAttributes;for(var r in i)for(var u=i[r],o=0,a=u.length;o<a;o++)t.update(u[o],34962)},getWireframeAttribute:function(n){var e=r[n.id];if(e)return e;var l,i=[],u=n.index,o=n.attributes;if(null!==u)for(var a=0,s=(l=u.array).length;a<s;a+=3){var c=l[a+0],h=l[a+1],p=l[a+2];i.push(c,h,h,p,p,c)}else for(a=0,s=(l=o.position.array).length/3-1;a<s;a+=3)c=a+0,h=a+1,p=a+2,i.push(c,h,h,p,p,c);return e=new(We(i)>65535?je:ke)(i,1),t.update(e,34963),r[n.id]=e,e}}}function El(n,t,e,l){var r,i,u;this.setMode=function(n){r=n},this.setIndex=function(n){i=n.type,u=n.bytesPerElement},this.render=function(t,l){n.drawElements(r,l,i,t*u),e.update(l,r)},this.renderInstances=function(o,a,s){var c;if(l.isWebGL2)c=n;else if(null===(c=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");c[l.isWebGL2?"drawElementsInstanced":"drawElementsInstancedANGLE"](r,s,i,a*u,o.maxInstancedCount),e.update(s,r,o.maxInstancedCount)}}function Sl(n){var t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(n,e,l){switch(l=l||1,t.calls++,e){case 4:t.triangles+=l*(n/3);break;case 5:case 6:t.triangles+=l*(n-2);break;case 1:t.lines+=l*(n/2);break;case 3:t.lines+=l*(n-1);break;case 2:t.lines+=l*n;break;case 0:t.points+=l*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",e)}}}}function Tl(n,t){return Math.abs(t[1])-Math.abs(n[1])}function Al(n){var t={},e=new Float32Array(8);return{update:function(l,r,i,u){var o=l.morphTargetInfluences,a=o.length,s=t[r.id];if(void 0===s){s=[];for(var c=0;c<a;c++)s[c]=[c,0];t[r.id]=s}var h=i.morphTargets&&r.morphAttributes.position,p=i.morphNormals&&r.morphAttributes.normal;for(c=0;c<a;c++)0!==(d=s[c])[1]&&(h&&r.removeAttribute("morphTarget"+c),p&&r.removeAttribute("morphNormal"+c));for(c=0;c<a;c++)(d=s[c])[0]=c,d[1]=o[c];for(s.sort(Tl),c=0;c<8;c++){var d;if(d=s[c]){var f=d[0],m=d[1];if(m){h&&r.addAttribute("morphTarget"+c,h[f]),p&&r.addAttribute("morphNormal"+c,p[f]),e[c]=m;continue}}e[c]=0}u.getUniforms().setValue(n,"morphTargetInfluences",e)}}}function Ll(n,t){var e={};return{update:function(l){var r=t.render.frame,i=l.geometry,u=n.get(l,i);return e[u.id]!==r&&(i.isGeometry&&u.updateFromObject(l),n.update(u),e[u.id]=r),u},dispose:function(){e={}}}}function Pl(n,t,e,l,r,i,u,o,a,s){n=void 0!==n?n:[],t=void 0!==t?t:dn,Kt.call(this,n,t,e,l,r,i,u,o,a,s),this.flipY=!1}function Cl(n,t,e,l){Kt.call(this,null),this.image={data:n,width:t,height:e,depth:l},this.magFilter=Mn,this.minFilter=Mn,this.generateMipmaps=!1,this.flipY=!1}pl.prototype=Object.assign(Object.create(t.prototype),{constructor:pl,isMaterial:!0,onBeforeCompile:function(){},setValues:function(n){if(void 0!==n)for(var t in n){var e=n[t];if(void 0!==e)if("shading"!==t){var l=this[t];void 0!==l?l&&l.isColor?l.set(e):l&&l.isVector3&&e&&e.isVector3?l.copy(e):this[t]=e:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===e;else console.warn("THREE.Material: '"+t+"' parameter is undefined.")}},toJSON:function(n){var t=void 0===n||"string"==typeof n;t&&(n={textures:{},images:{}});var e={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function l(n){var t=[];for(var e in n){var l=n[e];delete l.metadata,t.push(l)}return t}if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),this.color&&this.color.isColor&&(e.color=this.color.getHex()),void 0!==this.roughness&&(e.roughness=this.roughness),void 0!==this.metalness&&(e.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(e.emissive=this.emissive.getHex()),1!==this.emissiveIntensity&&(e.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(e.specular=this.specular.getHex()),void 0!==this.shininess&&(e.shininess=this.shininess),void 0!==this.clearCoat&&(e.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(e.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(e.map=this.map.toJSON(n).uuid),this.alphaMap&&this.alphaMap.isTexture&&(e.alphaMap=this.alphaMap.toJSON(n).uuid),this.lightMap&&this.lightMap.isTexture&&(e.lightMap=this.lightMap.toJSON(n).uuid),this.aoMap&&this.aoMap.isTexture&&(e.aoMap=this.aoMap.toJSON(n).uuid,e.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(e.bumpMap=this.bumpMap.toJSON(n).uuid,e.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(e.normalMap=this.normalMap.toJSON(n).uuid,e.normalMapType=this.normalMapType,e.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(e.displacementMap=this.displacementMap.toJSON(n).uuid,e.displacementScale=this.displacementScale,e.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(e.roughnessMap=this.roughnessMap.toJSON(n).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(e.metalnessMap=this.metalnessMap.toJSON(n).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(e.emissiveMap=this.emissiveMap.toJSON(n).uuid),this.specularMap&&this.specularMap.isTexture&&(e.specularMap=this.specularMap.toJSON(n).uuid),this.envMap&&this.envMap.isTexture&&(e.envMap=this.envMap.toJSON(n).uuid,e.reflectivity=this.reflectivity,void 0!==this.combine&&(e.combine=this.combine),void 0!==this.envMapIntensity&&(e.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(e.gradientMap=this.gradientMap.toJSON(n).uuid),void 0!==this.size&&(e.size=this.size),void 0!==this.sizeAttenuation&&(e.sizeAttenuation=this.sizeAttenuation),this.blending!==L&&(e.blending=this.blending),!0===this.flatShading&&(e.flatShading=this.flatShading),this.side!==w&&(e.side=this.side),this.vertexColors!==S&&(e.vertexColors=this.vertexColors),this.opacity<1&&(e.opacity=this.opacity),!0===this.transparent&&(e.transparent=this.transparent),e.depthFunc=this.depthFunc,e.depthTest=this.depthTest,e.depthWrite=this.depthWrite,0!==this.rotation&&(e.rotation=this.rotation),!0===this.polygonOffset&&(e.polygonOffset=!0),0!==this.polygonOffsetFactor&&(e.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(e.polygonOffsetUnits=this.polygonOffsetUnits),1!==this.linewidth&&(e.linewidth=this.linewidth),void 0!==this.dashSize&&(e.dashSize=this.dashSize),void 0!==this.gapSize&&(e.gapSize=this.gapSize),void 0!==this.scale&&(e.scale=this.scale),!0===this.dithering&&(e.dithering=!0),this.alphaTest>0&&(e.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(e.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(e.wireframe=this.wireframe),this.wireframeLinewidth>1&&(e.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(e.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(e.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(e.morphTargets=!0),!0===this.skinning&&(e.skinning=!0),!1===this.visible&&(e.visible=!1),"{}"!==JSON.stringify(this.userData)&&(e.userData=this.userData),t){var r=l(n.textures),i=l(n.images);r.length>0&&(e.textures=r),i.length>0&&(e.images=i)}return e},clone:function(){return(new this.constructor).copy(this)},copy:function(n){this.name=n.name,this.fog=n.fog,this.lights=n.lights,this.blending=n.blending,this.side=n.side,this.flatShading=n.flatShading,this.vertexColors=n.vertexColors,this.opacity=n.opacity,this.transparent=n.transparent,this.blendSrc=n.blendSrc,this.blendDst=n.blendDst,this.blendEquation=n.blendEquation,this.blendSrcAlpha=n.blendSrcAlpha,this.blendDstAlpha=n.blendDstAlpha,this.blendEquationAlpha=n.blendEquationAlpha,this.depthFunc=n.depthFunc,this.depthTest=n.depthTest,this.depthWrite=n.depthWrite,this.colorWrite=n.colorWrite,this.precision=n.precision,this.polygonOffset=n.polygonOffset,this.polygonOffsetFactor=n.polygonOffsetFactor,this.polygonOffsetUnits=n.polygonOffsetUnits,this.dithering=n.dithering,this.alphaTest=n.alphaTest,this.premultipliedAlpha=n.premultipliedAlpha,this.visible=n.visible,this.userData=JSON.parse(JSON.stringify(n.userData)),this.clipShadows=n.clipShadows,this.clipIntersection=n.clipIntersection;var t=n.clippingPlanes,e=null;if(null!==t){var l=t.length;e=new Array(l);for(var r=0;r!==l;++r)e[r]=t[r].clone()}return this.clippingPlanes=e,this.shadowSide=n.shadowSide,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),dl.prototype=Object.create(pl.prototype),dl.prototype.constructor=dl,dl.prototype.isShaderMaterial=!0,dl.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.fragmentShader=n.fragmentShader,this.vertexShader=n.vertexShader,this.uniforms=ae(n.uniforms),this.defines=Object.assign({},n.defines),this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.lights=n.lights,this.clipping=n.clipping,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this.extensions=n.extensions,this},dl.prototype.toJSON=function(n){var t=pl.prototype.toJSON.call(this,n);for(var e in t.uniforms={},this.uniforms){var l=this.uniforms[e].value;l&&l.isTexture?t.uniforms[e]={type:"t",value:l.toJSON(n).uuid}:l&&l.isColor?t.uniforms[e]={type:"c",value:l.getHex()}:l&&l.isVector2?t.uniforms[e]={type:"v2",value:l.toArray()}:l&&l.isVector3?t.uniforms[e]={type:"v3",value:l.toArray()}:l&&l.isVector4?t.uniforms[e]={type:"v4",value:l.toArray()}:l&&l.isMatrix3?t.uniforms[e]={type:"m3",value:l.toArray()}:l&&l.isMatrix4?t.uniforms[e]={type:"m4",value:l.toArray()}:t.uniforms[e]={value:l}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;var r={};for(var i in this.extensions)!0===this.extensions[i]&&(r[i]=!0);return Object.keys(r).length>0&&(t.extensions=r),t},Object.assign(fl.prototype,{set:function(n,t){return this.origin.copy(n),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.origin.copy(n.origin),this.direction.copy(n.direction),this},at:function(n,t){return void 0===t&&(console.warn("THREE.Ray: .at() target is now required"),t=new Gt),t.copy(this.direction).multiplyScalar(n).add(this.origin)},lookAt:function(n){return this.direction.copy(n).sub(this.origin).normalize(),this},recast:function(){var n=new Gt;return function(t){return this.origin.copy(this.at(t,n)),this}}(),closestPointToPoint:function(n,t){void 0===t&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),t=new Gt),t.subVectors(n,this.origin);var e=t.dot(this.direction);return e<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(e).add(this.origin)},distanceToPoint:function(n){return Math.sqrt(this.distanceSqToPoint(n))},distanceSqToPoint:function(){var n=new Gt;return function(t){var e=n.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(n.copy(this.direction).multiplyScalar(e).add(this.origin),n.distanceToSquared(t))}}(),distanceSqToSegment:($e=new Gt,nl=new Gt,tl=new Gt,function(n,t,e,l){$e.copy(n).add(t).multiplyScalar(.5),nl.copy(t).sub(n).normalize(),tl.copy(this.origin).sub($e);var r,i,u,o,a=.5*n.distanceTo(t),s=-this.direction.dot(nl),c=tl.dot(this.direction),h=-tl.dot(nl),p=tl.lengthSq(),d=Math.abs(1-s*s);if(d>0)if(i=s*c-h,o=a*d,(r=s*h-c)>=0)if(i>=-o)if(i<=o){var f=1/d;u=(r*=f)*(r+s*(i*=f)+2*c)+i*(s*r+i+2*h)+p}else i=a,u=-(r=Math.max(0,-(s*i+c)))*r+i*(i+2*h)+p;else i=-a,u=-(r=Math.max(0,-(s*i+c)))*r+i*(i+2*h)+p;else i<=-o?u=-(r=Math.max(0,-(-s*a+c)))*r+(i=r>0?-a:Math.min(Math.max(-a,-h),a))*(i+2*h)+p:i<=o?(r=0,u=(i=Math.min(Math.max(-a,-h),a))*(i+2*h)+p):u=-(r=Math.max(0,-(s*a+c)))*r+(i=r>0?a:Math.min(Math.max(-a,-h),a))*(i+2*h)+p;else i=s>0?-a:a,u=-(r=Math.max(0,-(s*i+c)))*r+i*(i+2*h)+p;return e&&e.copy(this.direction).multiplyScalar(r).add(this.origin),l&&l.copy(nl).multiplyScalar(i).add($e),u}),intersectSphere:function(){var n=new Gt;return function(t,e){n.subVectors(t.center,this.origin);var l=n.dot(this.direction),r=n.dot(n)-l*l,i=t.radius*t.radius;if(r>i)return null;var u=Math.sqrt(i-r),o=l-u,a=l+u;return o<0&&a<0?null:o<0?this.at(a,e):this.at(o,e)}}(),intersectsSphere:function(n){return this.distanceSqToPoint(n.center)<=n.radius*n.radius},distanceToPlane:function(n){var t=n.normal.dot(this.direction);if(0===t)return 0===n.distanceToPoint(this.origin)?0:null;var e=-(this.origin.dot(n.normal)+n.constant)/t;return e>=0?e:null},intersectPlane:function(n,t){var e=this.distanceToPlane(n);return null===e?null:this.at(e,t)},intersectsPlane:function(n){var t=n.distanceToPoint(this.origin);return 0===t||n.normal.dot(this.direction)*t<0},intersectBox:function(n,t){var e,l,r,i,u,o,a=1/this.direction.x,s=1/this.direction.y,c=1/this.direction.z,h=this.origin;return a>=0?(e=(n.min.x-h.x)*a,l=(n.max.x-h.x)*a):(e=(n.max.x-h.x)*a,l=(n.min.x-h.x)*a),s>=0?(r=(n.min.y-h.y)*s,i=(n.max.y-h.y)*s):(r=(n.max.y-h.y)*s,i=(n.min.y-h.y)*s),e>i||r>l?null:((r>e||e!=e)&&(e=r),(i<l||l!=l)&&(l=i),c>=0?(u=(n.min.z-h.z)*c,o=(n.max.z-h.z)*c):(u=(n.max.z-h.z)*c,o=(n.min.z-h.z)*c),e>o||u>l?null:((u>e||e!=e)&&(e=u),(o<l||l!=l)&&(l=o),l<0?null:this.at(e>=0?e:l,t)))},intersectsBox:(Qe=new Gt,function(n){return null!==this.intersectBox(n,Qe)}),intersectTriangle:function(){var n=new Gt,t=new Gt,e=new Gt,l=new Gt;return function(r,i,u,o,a){t.subVectors(i,r),e.subVectors(u,r),l.crossVectors(t,e);var s,c=this.direction.dot(l);if(c>0){if(o)return null;s=1}else{if(!(c<0))return null;s=-1,c=-c}n.subVectors(this.origin,r);var h=s*this.direction.dot(e.crossVectors(n,e));if(h<0)return null;var p=s*this.direction.dot(t.cross(n));if(p<0)return null;if(h+p>c)return null;var d=-s*n.dot(l);return d<0?null:this.at(d/c,a)}}(),applyMatrix4:function(n){return this.origin.applyMatrix4(n),this.direction.transformDirection(n),this},equals:function(n){return n.origin.equals(this.origin)&&n.direction.equals(this.direction)}}),Object.assign(ml,{getNormal:(ll=new Gt,function(n,t,e,l){void 0===l&&(console.warn("THREE.Triangle: .getNormal() target is now required"),l=new Gt),l.subVectors(e,t),ll.subVectors(n,t),l.cross(ll);var r=l.lengthSq();return r>0?l.multiplyScalar(1/Math.sqrt(r)):l.set(0,0,0)}),getBarycoord:function(){var n=new Gt,t=new Gt,e=new Gt;return function(l,r,i,u,o){n.subVectors(u,r),t.subVectors(i,r),e.subVectors(l,r);var a=n.dot(n),s=n.dot(t),c=n.dot(e),h=t.dot(t),p=t.dot(e),d=a*h-s*s;if(void 0===o&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),o=new Gt),0===d)return o.set(-2,-1,-1);var f=1/d,m=(h*c-s*p)*f,v=(a*p-s*c)*f;return o.set(1-m-v,v,m)}}(),containsPoint:function(){var n=new Gt;return function(t,e,l,r){return ml.getBarycoord(t,e,l,r,n),n.x>=0&&n.y>=0&&n.x+n.y<=1}}(),getUV:(el=new Gt,function(n,t,e,l,r,i,u,o){return this.getBarycoord(n,t,e,l,el),o.set(0,0),o.addScaledVector(r,el.x),o.addScaledVector(i,el.y),o.addScaledVector(u,el.z),o})}),Object.assign(ml.prototype,{set:function(n,t,e){return this.a.copy(n),this.b.copy(t),this.c.copy(e),this},setFromPointsAndIndices:function(n,t,e,l){return this.a.copy(n[t]),this.b.copy(n[e]),this.c.copy(n[l]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.a.copy(n.a),this.b.copy(n.b),this.c.copy(n.c),this},getArea:function(){var n=new Gt,t=new Gt;return function(){return n.subVectors(this.c,this.b),t.subVectors(this.a,this.b),.5*n.cross(t).length()}}(),getMidpoint:function(n){return void 0===n&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),n=new Gt),n.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(n){return ml.getNormal(this.a,this.b,this.c,n)},getPlane:function(n){return void 0===n&&(console.warn("THREE.Triangle: .getPlane() target is now required"),n=new Gt),n.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(n,t){return ml.getBarycoord(n,this.a,this.b,this.c,t)},containsPoint:function(n){return ml.containsPoint(n,this.a,this.b,this.c)},getUV:function(n,t,e,l,r){return ml.getUV(n,this.a,this.b,this.c,t,e,l,r)},intersectsBox:function(n){return n.intersectsTriangle(this)},closestPointToPoint:(rl=new Gt,ul=new Gt,ol=new Gt,al=new Gt,sl=new Gt,cl=new Gt,function(n,t){void 0===t&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),t=new Gt);var e,l,r=this.a,i=this.b,u=this.c;rl.subVectors(i,r),ul.subVectors(u,r),al.subVectors(n,r);var o=rl.dot(al),a=ul.dot(al);if(o<=0&&a<=0)return t.copy(r);sl.subVectors(n,i);var s=rl.dot(sl),c=ul.dot(sl);if(s>=0&&c<=s)return t.copy(i);var h=o*c-s*a;if(h<=0&&o>=0&&s<=0)return e=o/(o-s),t.copy(r).addScaledVector(rl,e);cl.subVectors(n,u);var p=rl.dot(cl),d=ul.dot(cl);if(d>=0&&p<=d)return t.copy(u);var f=p*a-o*d;if(f<=0&&a>=0&&d<=0)return l=a/(a-d),t.copy(r).addScaledVector(ul,l);var m=s*d-p*c;if(m<=0&&c-s>=0&&p-d>=0)return ol.subVectors(u,i),l=(c-s)/(c-s+(p-d)),t.copy(i).addScaledVector(ol,l);var v=1/(m+f+h);return e=f*v,l=h*v,t.copy(r).addScaledVector(rl,e).addScaledVector(ul,l)}),equals:function(n){return n.a.equals(this.a)&&n.b.equals(this.b)&&n.c.equals(this.c)}}),vl.prototype=Object.create(pl.prototype),vl.prototype.constructor=vl,vl.prototype.isMeshBasicMaterial=!0,vl.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.color.copy(n.color),this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this},gl.prototype=Object.assign(Object.create(Pe.prototype),{constructor:gl,isMesh:!0,setDrawMode:function(n){this.drawMode=n},copy:function(n){return Pe.prototype.copy.call(this,n),this.drawMode=n.drawMode,void 0!==n.morphTargetInfluences&&(this.morphTargetInfluences=n.morphTargetInfluences.slice()),void 0!==n.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},n.morphTargetDictionary)),this},updateMorphTargets:function(){var n,t,e,l=this.geometry;if(l.isBufferGeometry){var r=l.morphAttributes,i=Object.keys(r);if(i.length>0){var u=r[i[0]];if(void 0!==u)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},n=0,t=u.length;n<t;n++)e=u[n].name||String(n),this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=n}}else{var o=l.morphTargets;void 0!==o&&o.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(){var n=new Ut,t=new fl,e=new re,l=new Gt,r=new Gt,i=new Gt,u=new Gt,o=new Gt,a=new Gt,s=new kt,c=new kt,h=new kt,p=new Gt,d=new Gt;function f(n,t,e,l,r,i,u,o){if(null===(t.side===M?l.intersectTriangle(u,i,r,!0,o):l.intersectTriangle(r,i,u,t.side!==E,o)))return null;d.copy(o),d.applyMatrix4(n.matrixWorld);var a=e.ray.origin.distanceTo(d);return a<e.near||a>e.far?null:{distance:a,point:d.clone(),object:n}}function m(n,t,e,u,o,a,d,m,v){l.fromBufferAttribute(o,d),r.fromBufferAttribute(o,m),i.fromBufferAttribute(o,v);var g=f(n,t,e,u,l,r,i,p);if(g){a&&(s.fromBufferAttribute(a,d),c.fromBufferAttribute(a,m),h.fromBufferAttribute(a,v),g.uv=ml.getUV(p,l,r,i,s,c,h,new kt));var y=new _e(d,m,v);ml.getNormal(l,r,i,y.normal),g.face=y}return g}return function(d,v){var g,y=this.geometry,x=this.material,b=this.matrixWorld;if(void 0!==x&&(null===y.boundingSphere&&y.computeBoundingSphere(),e.copy(y.boundingSphere),e.applyMatrix4(b),!1!==d.ray.intersectsSphere(e)&&(n.getInverse(b),t.copy(d.ray).applyMatrix4(n),null===y.boundingBox||!1!==t.intersectsBox(y.boundingBox))))if(y.isBufferGeometry){var _,w,M,E,S,T,A,L,P,C=y.index,R=y.attributes.position,O=y.attributes.uv,D=y.groups,I=y.drawRange;if(null!==C)if(Array.isArray(x))for(E=0,T=D.length;E<T;E++)for(P=x[(L=D[E]).materialIndex],S=Math.max(L.start,I.start),A=Math.min(L.start+L.count,I.start+I.count);S<A;S+=3)_=C.getX(S),w=C.getX(S+1),M=C.getX(S+2),(g=m(this,P,d,t,R,O,_,w,M))&&(g.faceIndex=Math.floor(S/3),g.face.materialIndex=L.materialIndex,v.push(g));else for(E=Math.max(0,I.start),T=Math.min(C.count,I.start+I.count);E<T;E+=3)_=C.getX(E),w=C.getX(E+1),M=C.getX(E+2),(g=m(this,x,d,t,R,O,_,w,M))&&(g.faceIndex=Math.floor(E/3),v.push(g));else if(void 0!==R)if(Array.isArray(x))for(E=0,T=D.length;E<T;E++)for(P=x[(L=D[E]).materialIndex],S=Math.max(L.start,I.start),A=Math.min(L.start+L.count,I.start+I.count);S<A;S+=3)(g=m(this,P,d,t,R,O,_=S,w=S+1,M=S+2))&&(g.faceIndex=Math.floor(S/3),g.face.materialIndex=L.materialIndex,v.push(g));else for(E=Math.max(0,I.start),T=Math.min(R.count,I.start+I.count);E<T;E+=3)(g=m(this,x,d,t,R,O,_=E,w=E+1,M=E+2))&&(g.faceIndex=Math.floor(E/3),v.push(g))}else if(y.isGeometry){var z,N,B,F,k=Array.isArray(x),U=y.vertices,j=y.faces,G=y.faceVertexUvs[0];G.length>0&&(F=G);for(var H=0,V=j.length;H<V;H++){var W=j[H],q=k?x[W.materialIndex]:x;if(void 0!==q){if(z=U[W.a],N=U[W.b],B=U[W.c],!0===q.morphTargets){var X=y.morphTargets,Y=this.morphTargetInfluences;l.set(0,0,0),r.set(0,0,0),i.set(0,0,0);for(var Z=0,J=X.length;Z<J;Z++){var K=Y[Z];if(0!==K){var Q=X[Z].vertices;l.addScaledVector(u.subVectors(Q[W.a],z),K),r.addScaledVector(o.subVectors(Q[W.b],N),K),i.addScaledVector(a.subVectors(Q[W.c],B),K)}}l.add(z),r.add(N),i.add(B),z=l,N=r,B=i}if(g=f(this,q,d,t,z,N,B,p)){if(F&&F[H]){var $=F[H];s.copy($[0]),c.copy($[1]),h.copy($[2]),g.uv=ml.getUV(p,z,N,B,s,c,h,new kt)}g.face=W,g.faceIndex=H,v.push(g)}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Pl.prototype=Object.create(Kt.prototype),Pl.prototype.constructor=Pl,Pl.prototype.isCubeTexture=!0,Object.defineProperty(Pl.prototype,"images",{get:function(){return this.image},set:function(n){this.image=n}}),Cl.prototype=Object.create(Kt.prototype),Cl.prototype.constructor=Cl,Cl.prototype.isDataTexture3D=!0;var Rl=new Kt,Ol=new Cl,Dl=new Pl;function Il(){this.seq=[],this.map={}}var zl=[],Nl=[],Bl=new Float32Array(16),Fl=new Float32Array(9),kl=new Float32Array(4);function Ul(n,t,e){var l=n[0];if(l<=0||l>0)return n;var r=t*e,i=zl[r];if(void 0===i&&(i=new Float32Array(r),zl[r]=i),0!==t){l.toArray(i,0);for(var u=1,o=0;u!==t;++u)o+=e,n[u].toArray(i,o)}return i}function jl(n,t){if(n.length!==t.length)return!1;for(var e=0,l=n.length;e<l;e++)if(n[e]!==t[e])return!1;return!0}function Gl(n,t){for(var e=0,l=t.length;e<l;e++)n[e]=t[e]}function Hl(n,t){var e=Nl[t];void 0===e&&(e=new Int32Array(t),Nl[t]=e);for(var l=0;l!==t;++l)e[l]=n.allocTextureUnit();return e}function Vl(n,t){var e=this.cache;e[0]!==t&&(n.uniform1f(this.addr,t),e[0]=t)}function Wl(n,t){var e=this.cache;e[0]!==t&&(n.uniform1i(this.addr,t),e[0]=t)}function ql(n,t){var e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y||(n.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(jl(e,t))return;n.uniform2fv(this.addr,t),Gl(e,t)}}function Xl(n,t){var e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y&&e[2]===t.z||(n.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(void 0!==t.r)e[0]===t.r&&e[1]===t.g&&e[2]===t.b||(n.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(jl(e,t))return;n.uniform3fv(this.addr,t),Gl(e,t)}}function Yl(n,t){var e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y&&e[2]===t.z&&e[3]===t.w||(n.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(jl(e,t))return;n.uniform4fv(this.addr,t),Gl(e,t)}}function Zl(n,t){var e=this.cache,l=t.elements;if(void 0===l){if(jl(e,t))return;n.uniformMatrix2fv(this.addr,!1,t),Gl(e,t)}else{if(jl(e,l))return;kl.set(l),n.uniformMatrix2fv(this.addr,!1,kl),Gl(e,l)}}function Jl(n,t){var e=this.cache,l=t.elements;if(void 0===l){if(jl(e,t))return;n.uniformMatrix3fv(this.addr,!1,t),Gl(e,t)}else{if(jl(e,l))return;Fl.set(l),n.uniformMatrix3fv(this.addr,!1,Fl),Gl(e,l)}}function Kl(n,t){var e=this.cache,l=t.elements;if(void 0===l){if(jl(e,t))return;n.uniformMatrix4fv(this.addr,!1,t),Gl(e,t)}else{if(jl(e,l))return;Bl.set(l),n.uniformMatrix4fv(this.addr,!1,Bl),Gl(e,l)}}function Ql(n,t,e){var l=this.cache,r=e.allocTextureUnit();l[0]!==r&&(n.uniform1i(this.addr,r),l[0]=r),e.setTexture2D(t||Rl,r)}function $l(n,t,e){var l=this.cache,r=e.allocTextureUnit();l[0]!==r&&(n.uniform1i(this.addr,r),l[0]=r),e.setTexture3D(t||Ol,r)}function nr(n,t,e){var l=this.cache,r=e.allocTextureUnit();l[0]!==r&&(n.uniform1i(this.addr,r),l[0]=r),e.setTextureCube(t||Dl,r)}function tr(n,t){var e=this.cache;jl(e,t)||(n.uniform2iv(this.addr,t),Gl(e,t))}function er(n,t){var e=this.cache;jl(e,t)||(n.uniform3iv(this.addr,t),Gl(e,t))}function lr(n,t){var e=this.cache;jl(e,t)||(n.uniform4iv(this.addr,t),Gl(e,t))}function rr(n,t){var e=this.cache;jl(e,t)||(n.uniform1fv(this.addr,t),Gl(e,t))}function ir(n,t){var e=this.cache;jl(e,t)||(n.uniform1iv(this.addr,t),Gl(e,t))}function ur(n,t){var e=this.cache,l=Ul(t,this.size,2);jl(e,l)||(n.uniform2fv(this.addr,l),this.updateCache(l))}function or(n,t){var e=this.cache,l=Ul(t,this.size,3);jl(e,l)||(n.uniform3fv(this.addr,l),this.updateCache(l))}function ar(n,t){var e=this.cache,l=Ul(t,this.size,4);jl(e,l)||(n.uniform4fv(this.addr,l),this.updateCache(l))}function sr(n,t){var e=this.cache,l=Ul(t,this.size,4);jl(e,l)||(n.uniformMatrix2fv(this.addr,!1,l),this.updateCache(l))}function cr(n,t){var e=this.cache,l=Ul(t,this.size,9);jl(e,l)||(n.uniformMatrix3fv(this.addr,!1,l),this.updateCache(l))}function hr(n,t){var e=this.cache,l=Ul(t,this.size,16);jl(e,l)||(n.uniformMatrix4fv(this.addr,!1,l),this.updateCache(l))}function pr(n,t,e){var l=this.cache,r=t.length,i=Hl(e,r);!1===jl(l,i)&&(n.uniform1iv(this.addr,i),Gl(l,i));for(var u=0;u!==r;++u)e.setTexture2D(t[u]||Rl,i[u])}function dr(n,t,e){var l=this.cache,r=t.length,i=Hl(e,r);!1===jl(l,i)&&(n.uniform1iv(this.addr,i),Gl(l,i));for(var u=0;u!==r;++u)e.setTextureCube(t[u]||Dl,i[u])}function fr(n,t,e){this.id=n,this.addr=e,this.cache=[],this.setValue=function(n){switch(n){case 5126:return Vl;case 35664:return ql;case 35665:return Xl;case 35666:return Yl;case 35674:return Zl;case 35675:return Jl;case 35676:return Kl;case 35678:case 36198:return Ql;case 35679:return $l;case 35680:return nr;case 5124:case 35670:return Wl;case 35667:case 35671:return tr;case 35668:case 35672:return er;case 35669:case 35673:return lr}}(t.type)}function mr(n,t,e){this.id=n,this.addr=e,this.cache=[],this.size=t.size,this.setValue=function(n){switch(n){case 5126:return rr;case 35664:return ur;case 35665:return or;case 35666:return ar;case 35674:return sr;case 35675:return cr;case 35676:return hr;case 35678:return pr;case 35680:return dr;case 5124:case 35670:return ir;case 35667:case 35671:return tr;case 35668:case 35672:return er;case 35669:case 35673:return lr}}(t.type)}function vr(n){this.id=n,Il.call(this)}mr.prototype.updateCache=function(n){var t=this.cache;n instanceof Float32Array&&t.length!==n.length&&(this.cache=new Float32Array(n.length)),Gl(t,n)},vr.prototype.setValue=function(n,t,e){for(var l=this.seq,r=0,i=l.length;r!==i;++r){var u=l[r];u.setValue(n,t[u.id],e)}};var gr=/([\w\d_]+)(\])?(\[|\.)?/g;function yr(n,t){n.seq.push(t),n.map[t.id]=t}function xr(n,t,e){var l=n.name,r=l.length;for(gr.lastIndex=0;;){var i=gr.exec(l),u=gr.lastIndex,o=i[1],a="]"===i[2],s=i[3];if(a&&(o|=0),void 0===s||"["===s&&u+2===r){yr(e,void 0===s?new fr(o,n,t):new mr(o,n,t));break}var c=e.map[o];void 0===c&&yr(e,c=new vr(o)),e=c}}function br(n,t,e){Il.call(this),this.renderer=e;for(var l=n.getProgramParameter(t,35718),r=0;r<l;++r){var i=n.getActiveUniform(t,r);xr(i,n.getUniformLocation(t,i.name),this)}}function _r(n,t,e){var l=n.createShader(t);return n.shaderSource(l,e),n.compileShader(l),!1===n.getShaderParameter(l,35713)&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==n.getShaderInfoLog(l)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",35633===t?"vertex":"fragment",n.getShaderInfoLog(l),function(n){for(var t=n.split("\n"),e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}(e)),l}br.prototype.setValue=function(n,t,e){var l=this.map[t];void 0!==l&&l.setValue(n,e,this.renderer)},br.prototype.setOptional=function(n,t,e){var l=t[e];void 0!==l&&this.setValue(n,e,l)},br.upload=function(n,t,e,l){for(var r=0,i=t.length;r!==i;++r){var u=t[r],o=e[u.id];!1!==o.needsUpdate&&u.setValue(n,o.value,l)}},br.seqWithValue=function(n,t){for(var e=[],l=0,r=n.length;l!==r;++l){var i=n[l];i.id in t&&e.push(i)}return e};var wr=0;function Mr(n){switch(n){case At:return["Linear","( value )"];case Lt:return["sRGB","( value )"];case Ct:return["RGBE","( value )"];case Rt:return["RGBM","( value, 7.0 )"];case Ot:return["RGBM","( value, 16.0 )"];case Dt:return["RGBD","( value, 256.0 )"];case Pt:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+n)}}function Er(n,t){var e=Mr(t);return"vec4 "+n+"( vec4 value ) { return "+e[0]+"ToLinear"+e[1]+"; }"}function Sr(n,t){var e;switch(t){case an:e="Linear";break;case sn:e="Reinhard";break;case cn:e="Uncharted2";break;case hn:e="OptimizedCineon";break;case pn:e="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+t)}return"vec3 "+n+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}function Tr(n){return""!==n}function Ar(n,t){return n.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights)}function Lr(n,t){return n.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}function Pr(n){return n.replace(/^[ \t]*#include +<([\w\d./]+)>/gm,(function(n,t){var e=oe[t];if(void 0===e)throw new Error("Can not resolve #include <"+t+">");return Pr(e)}))}function Cr(n){return n.replace(/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,(function(n,t,e,l){for(var r="",i=parseInt(t);i<parseInt(e);i++)r+=l.replace(/\[ i \]/g,"[ "+i+" ]");return r}))}function Rr(n,t,e,l,r,i,u){var o=n.context,a=l.defines,s=r.vertexShader,c=r.fragmentShader,h="SHADOWMAP_TYPE_BASIC";i.shadowMapType===b?h="SHADOWMAP_TYPE_PCF":i.shadowMapType===_&&(h="SHADOWMAP_TYPE_PCF_SOFT");var p="ENVMAP_TYPE_CUBE",d="ENVMAP_MODE_REFLECTION",f="ENVMAP_BLENDING_MULTIPLY";if(i.envMap){switch(l.envMap.mapping){case dn:case fn:p="ENVMAP_TYPE_CUBE";break;case yn:case xn:p="ENVMAP_TYPE_CUBE_UV";break;case mn:case vn:p="ENVMAP_TYPE_EQUIREC";break;case gn:p="ENVMAP_TYPE_SPHERE"}switch(l.envMap.mapping){case fn:case vn:d="ENVMAP_MODE_REFRACTION"}switch(l.combine){case ln:f="ENVMAP_BLENDING_MULTIPLY";break;case rn:f="ENVMAP_BLENDING_MIX";break;case un:f="ENVMAP_BLENDING_ADD"}}var m,v,g,y,x=n.gammaFactor>0?n.gammaFactor:1,w=u.isWebGL2?"":function(n,t,e){return[(n=n||{}).derivatives||t.envMapCubeUV||t.bumpMap||t.normalMap&&!t.objectSpaceNormalMap||t.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(n.fragDepth||t.logarithmicDepthBuffer)&&e.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",n.drawBuffers&&e.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(n.shaderTextureLOD||t.envMap)&&e.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Tr).join("\n")}(l.extensions,i,t),M=function(n){var t=[];for(var e in n){var l=n[e];!1!==l&&t.push("#define "+e+" "+l)}return t.join("\n")}(a),E=o.createProgram();if(l.isRawShaderMaterial?((m=[M].filter(Tr).join("\n")).length>0&&(m+="\n"),(v=[w,M].filter(Tr).join("\n")).length>0&&(v+="\n")):(m=["precision "+i.precision+" float;","precision "+i.precision+" int;","#define SHADER_NAME "+r.name,M,i.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+x,"#define MAX_BONES "+i.maxBones,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+d:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMap&&i.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",i.displacementMap&&i.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.vertexColors?"#define USE_COLOR":"",i.flatShading?"#define FLAT_SHADED":"",i.skinning?"#define USE_SKINNING":"",i.useVertexTexture?"#define BONE_TEXTURE":"",i.morphTargets?"#define USE_MORPHTARGETS":"",i.morphNormals&&!1===i.flatShading?"#define USE_MORPHNORMALS":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+h:"",i.sizeAttenuation?"#define USE_SIZEATTENUATION":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&(u.isWebGL2||t.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Tr).join("\n"),v=[w,"precision "+i.precision+" float;","precision "+i.precision+" int;","#define SHADER_NAME "+r.name,M,i.alphaTest?"#define ALPHATEST "+i.alphaTest+(i.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+x,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.matcap?"#define USE_MATCAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+p:"",i.envMap?"#define "+d:"",i.envMap?"#define "+f:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMap&&i.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.vertexColors?"#define USE_COLOR":"",i.gradientMap?"#define USE_GRADIENTMAP":"",i.flatShading?"#define FLAT_SHADED":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+h:"",i.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",i.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&(u.isWebGL2||t.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"",i.envMap&&(u.isWebGL2||t.get("EXT_shader_texture_lod"))?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",i.toneMapping!==on?"#define TONE_MAPPING":"",i.toneMapping!==on?oe.tonemapping_pars_fragment:"",i.toneMapping!==on?Sr("toneMapping",i.toneMapping):"",i.dithering?"#define DITHERING":"",i.outputEncoding||i.mapEncoding||i.matcapEncoding||i.envMapEncoding||i.emissiveMapEncoding?oe.encodings_pars_fragment:"",i.mapEncoding?Er("mapTexelToLinear",i.mapEncoding):"",i.matcapEncoding?Er("matcapTexelToLinear",i.matcapEncoding):"",i.envMapEncoding?Er("envMapTexelToLinear",i.envMapEncoding):"",i.emissiveMapEncoding?Er("emissiveMapTexelToLinear",i.emissiveMapEncoding):"",i.outputEncoding?("linearToOutputTexel",g=i.outputEncoding,y=Mr(g),"vec4 linearToOutputTexel( vec4 value ) { return LinearTo"+y[0]+y[1]+"; }"):"",i.depthPacking?"#define DEPTH_PACKING "+l.depthPacking:"","\n"].filter(Tr).join("\n")),s=Lr(s=Ar(s=Pr(s),i),i),c=Lr(c=Ar(c=Pr(c),i),i),s=Cr(s),c=Cr(c),u.isWebGL2&&!l.isRawShaderMaterial){var S=!1,T=/^\s*#version\s+300\s+es\s*\n/;l.isShaderMaterial&&null!==s.match(T)&&null!==c.match(T)&&(S=!0,s=s.replace(T,""),c=c.replace(T,"")),m=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+m,v=["#version 300 es\n","#define varying in",S?"":"out highp vec4 pc_fragColor;",S?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+v}var A=v+c,L=_r(o,35633,m+s),P=_r(o,35632,A);o.attachShader(E,L),o.attachShader(E,P),void 0!==l.index0AttributeName?o.bindAttribLocation(E,0,l.index0AttributeName):!0===i.morphTargets&&o.bindAttribLocation(E,0,"position"),o.linkProgram(E);var C,R,O=o.getProgramInfoLog(E).trim(),D=o.getShaderInfoLog(L).trim(),I=o.getShaderInfoLog(P).trim(),z=!0,N=!0;return!1===o.getProgramParameter(E,35714)?(z=!1,console.error("THREE.WebGLProgram: shader error: ",o.getError(),"35715",o.getProgramParameter(E,35715),"gl.getProgramInfoLog",O,D,I)):""!==O?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",O):""!==D&&""!==I||(N=!1),N&&(this.diagnostics={runnable:z,material:l,programLog:O,vertexShader:{log:D,prefix:m},fragmentShader:{log:I,prefix:v}}),o.deleteShader(L),o.deleteShader(P),this.getUniforms=function(){return void 0===C&&(C=new br(o,E,n)),C},this.getAttributes=function(){return void 0===R&&(R=function(n,t){for(var e={},l=n.getProgramParameter(t,35721),r=0;r<l;r++){var i=n.getActiveAttrib(t,r).name;e[i]=n.getAttribLocation(t,i)}return e}(o,E)),R},this.destroy=function(){o.deleteProgram(E),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.name=r.name,this.id=wr++,this.code=e,this.usedTimes=1,this.program=E,this.vertexShader=L,this.fragmentShader=P,this}function Or(n,t,e){var l=[],r={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},i=["precision","supportsVertexTextures","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering"];function u(n,t){var e;return n?n.isTexture?e=n.encoding:n.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),e=n.texture.encoding):e=At,e===At&&t&&(e=Pt),e}this.getParameters=function(t,l,i,o,a,s,c){var h=r[t.type],p=c.isSkinnedMesh?function(n){var t=n.skeleton.bones;if(e.floatVertexTextures)return 1024;var l=e.maxVertexUniforms,r=Math.floor((l-20)/4),i=Math.min(r,t.length);return i<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+i+"."),0):i}(c):0,d=e.precision;null!==t.precision&&(d=e.getMaxPrecision(t.precision))!==t.precision&&console.warn("THREE.WebGLProgram.getParameters:",t.precision,"not supported, using",d,"instead.");var f=n.getRenderTarget();return{shaderID:h,precision:d,supportsVertexTextures:e.vertexTextures,outputEncoding:u(f?f.texture:null,n.gammaOutput),map:!!t.map,mapEncoding:u(t.map,n.gammaInput),matcap:!!t.matcap,matcapEncoding:u(t.matcap,n.gammaInput),envMap:!!t.envMap,envMapMode:t.envMap&&t.envMap.mapping,envMapEncoding:u(t.envMap,n.gammaInput),envMapCubeUV:!!t.envMap&&(t.envMap.mapping===yn||t.envMap.mapping===xn),lightMap:!!t.lightMap,aoMap:!!t.aoMap,emissiveMap:!!t.emissiveMap,emissiveMapEncoding:u(t.emissiveMap,n.gammaInput),bumpMap:!!t.bumpMap,normalMap:!!t.normalMap,objectSpaceNormalMap:t.normalMapType===Bt,displacementMap:!!t.displacementMap,roughnessMap:!!t.roughnessMap,metalnessMap:!!t.metalnessMap,specularMap:!!t.specularMap,alphaMap:!!t.alphaMap,gradientMap:!!t.gradientMap,combine:t.combine,vertexColors:t.vertexColors,fog:!!o,useFog:t.fog,fogExp:o&&o.isFogExp2,flatShading:t.flatShading,sizeAttenuation:t.sizeAttenuation,logarithmicDepthBuffer:e.logarithmicDepthBuffer,skinning:t.skinning&&p>0,maxBones:p,useVertexTexture:e.floatVertexTextures,morphTargets:t.morphTargets,morphNormals:t.morphNormals,maxMorphTargets:n.maxMorphTargets,maxMorphNormals:n.maxMorphNormals,numDirLights:l.directional.length,numPointLights:l.point.length,numSpotLights:l.spot.length,numRectAreaLights:l.rectArea.length,numHemiLights:l.hemi.length,numClippingPlanes:a,numClipIntersection:s,dithering:t.dithering,shadowMapEnabled:n.shadowMap.enabled&&c.receiveShadow&&i.length>0,shadowMapType:n.shadowMap.type,toneMapping:n.toneMapping,physicallyCorrectLights:n.physicallyCorrectLights,premultipliedAlpha:t.premultipliedAlpha,alphaTest:t.alphaTest,doubleSided:t.side===E,flipSided:t.side===M,depthPacking:void 0!==t.depthPacking&&t.depthPacking}},this.getProgramCode=function(t,e){var l=[];if(e.shaderID?l.push(e.shaderID):(l.push(t.fragmentShader),l.push(t.vertexShader)),void 0!==t.defines)for(var r in t.defines)l.push(r),l.push(t.defines[r]);for(var u=0;u<i.length;u++)l.push(e[i[u]]);return l.push(t.onBeforeCompile.toString()),l.push(n.gammaOutput),l.push(n.gammaFactor),l.join()},this.acquireProgram=function(r,i,u,o){for(var a,s=0,c=l.length;s<c;s++){var h=l[s];if(h.code===o){++(a=h).usedTimes;break}}return void 0===a&&(a=new Rr(n,t,o,r,i,u,e),l.push(a)),a},this.releaseProgram=function(n){if(0==--n.usedTimes){var t=l.indexOf(n);l[t]=l[l.length-1],l.pop(),n.destroy()}},this.programs=l}function Dr(){var n=new WeakMap;return{get:function(t){var e=n.get(t);return void 0===e&&(e={},n.set(t,e)),e},remove:function(t){n.delete(t)},update:function(t,e,l){n.get(t)[e]=l},dispose:function(){n=new WeakMap}}}function Ir(n,t){return n.groupOrder!==t.groupOrder?n.groupOrder-t.groupOrder:n.renderOrder!==t.renderOrder?n.renderOrder-t.renderOrder:n.program&&t.program&&n.program!==t.program?n.program.id-t.program.id:n.material.id!==t.material.id?n.material.id-t.material.id:n.z!==t.z?n.z-t.z:n.id-t.id}function zr(n,t){return n.groupOrder!==t.groupOrder?n.groupOrder-t.groupOrder:n.renderOrder!==t.renderOrder?n.renderOrder-t.renderOrder:n.z!==t.z?t.z-n.z:n.id-t.id}function Nr(){var n=[],t=0,e=[],l=[];function r(e,l,r,i,u,o){var a=n[t];return void 0===a?(a={id:e.id,object:e,geometry:l,material:r,program:r.program,groupOrder:i,renderOrder:e.renderOrder,z:u,group:o},n[t]=a):(a.id=e.id,a.object=e,a.geometry=l,a.material=r,a.program=r.program,a.groupOrder=i,a.renderOrder=e.renderOrder,a.z=u,a.group=o),t++,a}return{opaque:e,transparent:l,init:function(){t=0,e.length=0,l.length=0},push:function(n,t,i,u,o,a){var s=r(n,t,i,u,o,a);(!0===i.transparent?l:e).push(s)},unshift:function(n,t,i,u,o,a){var s=r(n,t,i,u,o,a);(!0===i.transparent?l:e).unshift(s)},sort:function(){e.length>1&&e.sort(Ir),l.length>1&&l.sort(zr)}}}function Br(){var n={};function t(e){var l=e.target;l.removeEventListener("dispose",t),delete n[l.id]}return{get:function(e,l){var r,i=n[e.id];return void 0===i?(r=new Nr,n[e.id]={},n[e.id][l.id]=r,e.addEventListener("dispose",t)):void 0===(r=i[l.id])&&(r=new Nr,i[l.id]=r),r},dispose:function(){n={}}}}function Fr(){var n={};return{get:function(t){if(void 0!==n[t.id])return n[t.id];var e;switch(t.type){case"DirectionalLight":e={direction:new Gt,color:new me,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new kt};break;case"SpotLight":e={position:new Gt,direction:new Gt,color:new me,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new kt};break;case"PointLight":e={position:new Gt,color:new me,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new kt,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":e={direction:new Gt,skyColor:new me,groundColor:new me};break;case"RectAreaLight":e={color:new me,position:new Gt,halfWidth:new Gt,halfHeight:new Gt}}return n[t.id]=e,e}}}var kr=0;function Ur(){var n=new Fr,t={id:kr++,hash:{stateID:-1,directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,shadowsLength:-1},ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},e=new Gt,l=new Ut,r=new Ut;return{setup:function(i,u,o){for(var a=0,s=0,c=0,h=0,p=0,d=0,f=0,m=0,v=o.matrixWorldInverse,g=0,y=i.length;g<y;g++){var x=i[g],b=x.color,_=x.intensity,w=x.distance,M=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)a+=b.r*_,s+=b.g*_,c+=b.b*_;else if(x.isDirectionalLight){if((S=n.get(x)).color.copy(x.color).multiplyScalar(x.intensity),S.direction.setFromMatrixPosition(x.matrixWorld),e.setFromMatrixPosition(x.target.matrixWorld),S.direction.sub(e),S.direction.transformDirection(v),S.shadow=x.castShadow,x.castShadow){var E=x.shadow;S.shadowBias=E.bias,S.shadowRadius=E.radius,S.shadowMapSize=E.mapSize}t.directionalShadowMap[h]=M,t.directionalShadowMatrix[h]=x.shadow.matrix,t.directional[h]=S,h++}else if(x.isSpotLight)(S=n.get(x)).position.setFromMatrixPosition(x.matrixWorld),S.position.applyMatrix4(v),S.color.copy(b).multiplyScalar(_),S.distance=w,S.direction.setFromMatrixPosition(x.matrixWorld),e.setFromMatrixPosition(x.target.matrixWorld),S.direction.sub(e),S.direction.transformDirection(v),S.coneCos=Math.cos(x.angle),S.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),S.decay=x.decay,S.shadow=x.castShadow,x.castShadow&&(E=x.shadow,S.shadowBias=E.bias,S.shadowRadius=E.radius,S.shadowMapSize=E.mapSize),t.spotShadowMap[d]=M,t.spotShadowMatrix[d]=x.shadow.matrix,t.spot[d]=S,d++;else if(x.isRectAreaLight)(S=n.get(x)).color.copy(b).multiplyScalar(_),S.position.setFromMatrixPosition(x.matrixWorld),S.position.applyMatrix4(v),r.identity(),l.copy(x.matrixWorld),l.premultiply(v),r.extractRotation(l),S.halfWidth.set(.5*x.width,0,0),S.halfHeight.set(0,.5*x.height,0),S.halfWidth.applyMatrix4(r),S.halfHeight.applyMatrix4(r),t.rectArea[f]=S,f++;else if(x.isPointLight)(S=n.get(x)).position.setFromMatrixPosition(x.matrixWorld),S.position.applyMatrix4(v),S.color.copy(x.color).multiplyScalar(x.intensity),S.distance=x.distance,S.decay=x.decay,S.shadow=x.castShadow,x.castShadow&&(E=x.shadow,S.shadowBias=E.bias,S.shadowRadius=E.radius,S.shadowMapSize=E.mapSize,S.shadowCameraNear=E.camera.near,S.shadowCameraFar=E.camera.far),t.pointShadowMap[p]=M,t.pointShadowMatrix[p]=x.shadow.matrix,t.point[p]=S,p++;else if(x.isHemisphereLight){var S;(S=n.get(x)).direction.setFromMatrixPosition(x.matrixWorld),S.direction.transformDirection(v),S.direction.normalize(),S.skyColor.copy(x.color).multiplyScalar(_),S.groundColor.copy(x.groundColor).multiplyScalar(_),t.hemi[m]=S,m++}}t.ambient[0]=a,t.ambient[1]=s,t.ambient[2]=c,t.directional.length=h,t.spot.length=d,t.rectArea.length=f,t.point.length=p,t.hemi.length=m,t.hash.stateID=t.id,t.hash.directionalLength=h,t.hash.pointLength=p,t.hash.spotLength=d,t.hash.rectAreaLength=f,t.hash.hemiLength=m,t.hash.shadowsLength=u.length},state:t}}function jr(){var n=new Ur,t=[],e=[];return{init:function(){t.length=0,e.length=0},state:{lightsArray:t,shadowsArray:e,lights:n},setupLights:function(l){n.setup(t,e,l)},pushLight:function(n){t.push(n)},pushShadow:function(n){e.push(n)}}}function Gr(){var n={};function t(e){var l=e.target;l.removeEventListener("dispose",t),delete n[l.id]}return{get:function(e,l){var r;return void 0===n[e.id]?(r=new jr,n[e.id]={},n[e.id][l.id]=r,e.addEventListener("dispose",t)):void 0===n[e.id][l.id]?(r=new jr,n[e.id][l.id]=r):r=n[e.id][l.id],r},dispose:function(){n={}}}}function Hr(n){pl.call(this),this.type="MeshDepthMaterial",this.depthPacking=It,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(n)}function Vr(n){pl.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new Gt,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(n)}function Wr(n,t,e){for(var l=new ue,r=new Ut,i=new kt,u=new kt(e,e),o=new Gt,a=new Gt,s=1,c=2,h=1+(s|c),p=new Array(h),d=new Array(h),f={},m={0:M,1:w,2:E},v=[new Gt(1,0,0),new Gt(-1,0,0),new Gt(0,0,1),new Gt(0,0,-1),new Gt(0,1,0),new Gt(0,-1,0)],g=[new Gt(0,1,0),new Gt(0,1,0),new Gt(0,1,0),new Gt(0,1,0),new Gt(0,0,1),new Gt(0,0,-1)],y=[new Qt,new Qt,new Qt,new Qt,new Qt,new Qt],x=0;x!==h;++x){var _=0!=(x&s),S=0!=(x&c),T=new Hr({depthPacking:zt,morphTargets:_,skinning:S});p[x]=T;var L=new Vr({morphTargets:_,skinning:S});d[x]=L}var P=this;function C(t,e,l,r,i,u){var o=t.geometry,a=null,h=p,v=t.customDepthMaterial;if(l&&(h=d,v=t.customDistanceMaterial),v)a=v;else{var g=!1;e.morphTargets&&(o&&o.isBufferGeometry?g=o.morphAttributes&&o.morphAttributes.position&&o.morphAttributes.position.length>0:o&&o.isGeometry&&(g=o.morphTargets&&o.morphTargets.length>0)),t.isSkinnedMesh&&!1===e.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",t);var y=t.isSkinnedMesh&&e.skinning,x=0;g&&(x|=s),y&&(x|=c),a=h[x]}if(n.localClippingEnabled&&!0===e.clipShadows&&0!==e.clippingPlanes.length){var b=a.uuid,_=e.uuid,w=f[b];void 0===w&&(w={},f[b]=w);var M=w[_];void 0===M&&(M=a.clone(),w[_]=M),a=M}return a.visible=e.visible,a.wireframe=e.wireframe,a.side=null!=e.shadowSide?e.shadowSide:m[e.side],a.clipShadows=e.clipShadows,a.clippingPlanes=e.clippingPlanes,a.clipIntersection=e.clipIntersection,a.wireframeLinewidth=e.wireframeLinewidth,a.linewidth=e.linewidth,l&&a.isMeshDistanceMaterial&&(a.referencePosition.copy(r),a.nearDistance=i,a.farDistance=u),a}function R(e,r,i,u){if(!1!==e.visible){if(e.layers.test(r.layers)&&(e.isMesh||e.isLine||e.isPoints)&&e.castShadow&&(!e.frustumCulled||l.intersectsObject(e))){e.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,e.matrixWorld);var o=t.update(e),s=e.material;if(Array.isArray(s))for(var c=o.groups,h=0,p=c.length;h<p;h++){var d=c[h],f=s[d.materialIndex];if(f&&f.visible){var m=C(e,f,u,a,i.near,i.far);n.renderBufferDirect(i,null,o,m,e,d)}}else s.visible&&(m=C(e,s,u,a,i.near,i.far),n.renderBufferDirect(i,null,o,m,e,null))}for(var v=e.children,g=0,y=v.length;g<y;g++)R(v[g],r,i,u)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=b,this.render=function(t,e,s){if(!1!==P.enabled&&(!1!==P.autoUpdate||!1!==P.needsUpdate)&&0!==t.length){var c,h=n.state;h.setBlending(A),h.buffers.color.setClear(1,1,1,1),h.buffers.depth.setTest(!0),h.setScissorTest(!1);for(var p=0,d=t.length;p<d;p++){var f=t[p],m=f.shadow,x=f&&f.isPointLight;if(void 0!==m){var b=m.camera;if(i.copy(m.mapSize),i.min(u),x){var _=i.x,w=i.y;y[0].set(2*_,w,_,w),y[1].set(0,w,_,w),y[2].set(3*_,w,_,w),y[3].set(_,w,_,w),y[4].set(3*_,0,_,w),y[5].set(_,0,_,w),i.x*=4,i.y*=2}if(null===m.map){var M={minFilter:Mn,magFilter:Mn,format:Hn};m.map=new $t(i.x,i.y,M),m.map.texture.name=f.name+".shadowMap",b.updateProjectionMatrix()}m.isSpotLightShadow&&m.update(f);var E=m.map,S=m.matrix;a.setFromMatrixPosition(f.matrixWorld),b.position.copy(a),x?(c=6,S.makeTranslation(-a.x,-a.y,-a.z)):(c=1,o.setFromMatrixPosition(f.target.matrixWorld),b.lookAt(o),b.updateMatrixWorld(),S.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),S.multiply(b.projectionMatrix),S.multiply(b.matrixWorldInverse)),n.setRenderTarget(E),n.clear();for(var T=0;T<c;T++){if(x){o.copy(b.position),o.add(v[T]),b.up.copy(g[T]),b.lookAt(o),b.updateMatrixWorld();var L=y[T];h.viewport(L)}r.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse),l.setFromMatrix(r),R(e,s,b,x)}}else console.warn("THREE.WebGLShadowMap:",f,"has no shadow.")}P.needsUpdate=!1}}}function qr(n,t,e,l){var r=new function(){var t=!1,e=new Qt,l=null,r=new Qt(0,0,0,0);return{setMask:function(e){l===e||t||(n.colorMask(e,e,e,e),l=e)},setLocked:function(n){t=n},setClear:function(t,l,i,u,o){!0===o&&(t*=u,l*=u,i*=u),e.set(t,l,i,u),!1===r.equals(e)&&(n.clearColor(t,l,i,u),r.copy(e))},reset:function(){t=!1,l=null,r.set(-1,0,0,0)}}},i=new function(){var t=!1,e=null,l=null,r=null;return{setTest:function(n){n?un(2929):on(2929)},setMask:function(l){e===l||t||(n.depthMask(l),e=l)},setFunc:function(t){if(l!==t){if(t)switch(t){case Z:n.depthFunc(512);break;case J:n.depthFunc(519);break;case K:n.depthFunc(513);break;case Q:n.depthFunc(515);break;case $:n.depthFunc(514);break;case nn:n.depthFunc(518);break;case tn:n.depthFunc(516);break;case en:n.depthFunc(517);break;default:n.depthFunc(515)}else n.depthFunc(515);l=t}},setLocked:function(n){t=n},setClear:function(t){r!==t&&(n.clearDepth(t),r=t)},reset:function(){t=!1,e=null,l=null,r=null}}},u=new function(){var t=!1,e=null,l=null,r=null,i=null,u=null,o=null,a=null,s=null;return{setTest:function(n){n?un(2960):on(2960)},setMask:function(l){e===l||t||(n.stencilMask(l),e=l)},setFunc:function(t,e,u){l===t&&r===e&&i===u||(n.stencilFunc(t,e,u),l=t,r=e,i=u)},setOp:function(t,e,l){u===t&&o===e&&a===l||(n.stencilOp(t,e,l),u=t,o=e,a=l)},setLocked:function(n){t=n},setClear:function(t){s!==t&&(n.clearStencil(t),s=t)},reset:function(){t=!1,e=null,l=null,r=null,i=null,u=null,o=null,a=null,s=null}}},o=n.getParameter(34921),a=new Uint8Array(o),s=new Uint8Array(o),c=new Uint8Array(o),h={},p=null,d=null,f=null,m=null,v=null,b=null,_=null,w=null,S=null,T=null,I=!1,z=null,N=null,B=null,F=null,k=null,U=n.getParameter(35661),j=!1,G=0,H=n.getParameter(7938);-1!==H.indexOf("WebGL")?(G=parseFloat(/^WebGL\ ([0-9])/.exec(H)[1]),j=G>=1):-1!==H.indexOf("OpenGL ES")&&(G=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(H)[1]),j=G>=2);var V=null,W={},q=new Qt,X=new Qt;function Y(t,e,l){var r=new Uint8Array(4),i=n.createTexture();n.bindTexture(t,i),n.texParameteri(t,10241,9728),n.texParameteri(t,10240,9728);for(var u=0;u<l;u++)n.texImage2D(e+u,0,6408,1,1,0,6408,5121,r);return i}var ln={};function rn(e,r){a[e]=1,0===s[e]&&(n.enableVertexAttribArray(e),s[e]=1),c[e]!==r&&((l.isWebGL2?n:t.get("ANGLE_instanced_arrays"))[l.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](e,r),c[e]=r)}function un(t){!0!==h[t]&&(n.enable(t),h[t]=!0)}function on(t){!1!==h[t]&&(n.disable(t),h[t]=!1)}function an(t,l,r,i,u,o,a,s){if(t!==A){if(f||(un(3042),f=!0),t===O)u=u||l,o=o||r,a=a||i,l===v&&u===w||(n.blendEquationSeparate(e.convert(l),e.convert(u)),v=l,w=u),r===b&&i===_&&o===S&&a===T||(n.blendFuncSeparate(e.convert(r),e.convert(i),e.convert(o),e.convert(a)),b=r,_=i,S=o,T=a),m=t,I=null;else if(t!==m||s!==I){if(v===D&&w===D||(n.blendEquation(32774),v=D,w=D),s)switch(t){case L:n.blendFuncSeparate(1,771,1,771);break;case P:n.blendFunc(1,1);break;case C:n.blendFuncSeparate(0,0,769,771);break;case R:n.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case L:n.blendFuncSeparate(770,771,1,771);break;case P:n.blendFunc(770,1);break;case C:n.blendFunc(0,769);break;case R:n.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}b=null,_=null,S=null,T=null,m=t,I=s}}else f&&(on(3042),f=!1)}function sn(t){z!==t&&(t?n.frontFace(2304):n.frontFace(2305),z=t)}function cn(t){t!==g?(un(2884),t!==N&&(t===y?n.cullFace(1029):t===x?n.cullFace(1028):n.cullFace(1032))):on(2884),N=t}function hn(t,e,l){t?(un(32823),F===e&&k===l||(n.polygonOffset(e,l),F=e,k=l)):on(32823)}function pn(t){void 0===t&&(t=33984+U-1),V!==t&&(n.activeTexture(t),V=t)}return ln[3553]=Y(3553,3553,1),ln[34067]=Y(34067,34069,6),r.setClear(0,0,0,1),i.setClear(1),u.setClear(0),un(2929),i.setFunc(Q),sn(!1),cn(y),un(2884),an(A),{buffers:{color:r,depth:i,stencil:u},initAttributes:function(){for(var n=0,t=a.length;n<t;n++)a[n]=0},enableAttribute:function(n){rn(n,0)},enableAttributeAndDivisor:rn,disableUnusedAttributes:function(){for(var t=0,e=s.length;t!==e;++t)s[t]!==a[t]&&(n.disableVertexAttribArray(t),s[t]=0)},enable:un,disable:on,getCompressedTextureFormats:function(){if(null===p&&(p=[],t.get("WEBGL_compressed_texture_pvrtc")||t.get("WEBGL_compressed_texture_s3tc")||t.get("WEBGL_compressed_texture_etc1")||t.get("WEBGL_compressed_texture_astc")))for(var e=n.getParameter(34467),l=0;l<e.length;l++)p.push(e[l]);return p},useProgram:function(t){return d!==t&&(n.useProgram(t),d=t,!0)},setBlending:an,setMaterial:function(n,t){n.side===E?on(2884):un(2884);var e=n.side===M;t&&(e=!e),sn(e),n.blending===L&&!1===n.transparent?an(A):an(n.blending,n.blendEquation,n.blendSrc,n.blendDst,n.blendEquationAlpha,n.blendSrcAlpha,n.blendDstAlpha,n.premultipliedAlpha),i.setFunc(n.depthFunc),i.setTest(n.depthTest),i.setMask(n.depthWrite),r.setMask(n.colorWrite),hn(n.polygonOffset,n.polygonOffsetFactor,n.polygonOffsetUnits)},setFlipSided:sn,setCullFace:cn,setLineWidth:function(t){t!==B&&(j&&n.lineWidth(t),B=t)},setPolygonOffset:hn,setScissorTest:function(n){n?un(3089):on(3089)},activeTexture:pn,bindTexture:function(t,e){null===V&&pn();var l=W[V];void 0===l&&(l={type:void 0,texture:void 0},W[V]=l),l.type===t&&l.texture===e||(n.bindTexture(t,e||ln[t]),l.type=t,l.texture=e)},compressedTexImage2D:function(){try{n.compressedTexImage2D.apply(n,arguments)}catch(n){console.error("THREE.WebGLState:",n)}},texImage2D:function(){try{n.texImage2D.apply(n,arguments)}catch(n){console.error("THREE.WebGLState:",n)}},texImage3D:function(){try{n.texImage3D.apply(n,arguments)}catch(n){console.error("THREE.WebGLState:",n)}},scissor:function(t){!1===q.equals(t)&&(n.scissor(t.x,t.y,t.z,t.w),q.copy(t))},viewport:function(t){!1===X.equals(t)&&(n.viewport(t.x,t.y,t.z,t.w),X.copy(t))},reset:function(){for(var t=0;t<s.length;t++)1===s[t]&&(n.disableVertexAttribArray(t),s[t]=0);h={},p=null,V=null,W={},d=null,m=null,z=null,N=null,r.reset(),i.reset(),u.reset()}}}function Xr(n,t,e,l,r,i,u){var o,a={};function s(n,t,e,l){var r=1;if((n.width>l||n.height>l)&&(r=l/Math.max(n.width,n.height)),r<1||!0===t){if(n instanceof HTMLImageElement||n instanceof HTMLCanvasElement||n instanceof ImageBitmap){void 0===o&&(o=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"));var i=e?document.createElementNS("http://www.w3.org/1999/xhtml","canvas"):o,u=t?Ft.floorPowerOfTwo:Math.floor;return i.width=u(r*n.width),i.height=u(r*n.height),i.getContext("2d").drawImage(n,0,0,i.width,i.height),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+n.width+"x"+n.height+") to ("+i.width+"x"+i.height+")."),i}return"data"in n&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+n.width+"x"+n.height+")."),n}return n}function c(n){return Ft.isPowerOfTwo(n.width)&&Ft.isPowerOfTwo(n.height)}function h(n,t){return n.generateMipmaps&&t&&n.minFilter!==Mn&&n.minFilter!==Tn}function p(t,e,r,i){n.generateMipmap(t),l.get(e).__maxMipLevel=Math.log(Math.max(r,i))*Math.LOG2E}function d(n,e){if(!r.isWebGL2)return n;var l=n;return 6403===n&&(5126===e&&(l=33326),5131===e&&(l=33325),5121===e&&(l=33321)),6407===n&&(5126===e&&(l=34837),5131===e&&(l=34843),5121===e&&(l=32849)),6408===n&&(5126===e&&(l=34836),5131===e&&(l=34842),5121===e&&(l=32856)),33325===l||33326===l||34842===l||34836===l?t.get("EXT_color_buffer_float"):34843!==l&&34837!==l||console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead."),l}function f(n){return n===Mn||n===En||n===Sn?9728:9729}function m(t){var e=t.target;e.removeEventListener("dispose",m),function(t){var e=l.get(t);if(t.image&&e.__image__webglTextureCube)n.deleteTexture(e.__image__webglTextureCube);else{if(void 0===e.__webglInit)return;n.deleteTexture(e.__webglTexture)}l.remove(t)}(e),e.isVideoTexture&&delete a[e.id],u.memory.textures--}function v(t){var e=t.target;e.removeEventListener("dispose",v),function(t){var e=l.get(t),r=l.get(t.texture);if(t){if(void 0!==r.__webglTexture&&n.deleteTexture(r.__webglTexture),t.depthTexture&&t.depthTexture.dispose(),t.isWebGLRenderTargetCube)for(var i=0;i<6;i++)n.deleteFramebuffer(e.__webglFramebuffer[i]),e.__webglDepthbuffer&&n.deleteRenderbuffer(e.__webglDepthbuffer[i]);else n.deleteFramebuffer(e.__webglFramebuffer),e.__webglDepthbuffer&&n.deleteRenderbuffer(e.__webglDepthbuffer);l.remove(t.texture),l.remove(t)}}(e),u.memory.textures--}function g(n,t){var r=l.get(n);if(n.isVideoTexture&&function(n){var t=n.id,e=u.render.frame;a[t]!==e&&(a[t]=e,n.update())}(n),n.version>0&&r.__version!==n.version){var i=n.image;if(void 0===i)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==i.complete)return void x(r,n,t);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}e.activeTexture(33984+t),e.bindTexture(3553,r.__webglTexture)}function y(e,u,o){var a;if(o?(n.texParameteri(e,10242,i.convert(u.wrapS)),n.texParameteri(e,10243,i.convert(u.wrapT)),n.texParameteri(e,10240,i.convert(u.magFilter)),n.texParameteri(e,10241,i.convert(u.minFilter))):(n.texParameteri(e,10242,33071),n.texParameteri(e,10243,33071),u.wrapS===_n&&u.wrapT===_n||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),n.texParameteri(e,10240,f(u.magFilter)),n.texParameteri(e,10241,f(u.minFilter)),u.minFilter!==Mn&&u.minFilter!==Tn&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),a=t.get("EXT_texture_filter_anisotropic")){if(u.type===zn&&null===t.get("OES_texture_float_linear"))return;if(u.type===Nn&&null===(r.isWebGL2||t.get("OES_texture_half_float_linear")))return;(u.anisotropy>1||l.get(u).__currentAnisotropy)&&(n.texParameterf(e,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(u.anisotropy,r.getMaxAnisotropy())),l.get(u).__currentAnisotropy=u.anisotropy)}}function x(t,l,o){var a;a=l.isDataTexture3D?32879:3553,void 0===t.__webglInit&&(t.__webglInit=!0,l.addEventListener("dispose",m),t.__webglTexture=n.createTexture(),u.memory.textures++),e.activeTexture(33984+o),e.bindTexture(a,t.__webglTexture),n.pixelStorei(37440,l.flipY),n.pixelStorei(37441,l.premultiplyAlpha),n.pixelStorei(3317,l.unpackAlignment);var f=function(n){return!r.isWebGL2&&(n.wrapS!==_n||n.wrapT!==_n||n.minFilter!==Mn&&n.minFilter!==Tn)}(l)&&!1===c(l.image),v=s(l.image,f,!1,r.maxTextureSize),g=c(v)||r.isWebGL2,x=i.convert(l.format),b=i.convert(l.type),_=d(x,b);y(a,l,g);var w,M=l.mipmaps;if(l.isDepthTexture){if(_=6402,l.type===zn){if(!r.isWebGL2)throw new Error("Float Depth Texture only supported in WebGL2.0");_=36012}else r.isWebGL2&&(_=33189);l.format===qn&&6402===_&&l.type!==On&&l.type!==In&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),l.type=On,b=i.convert(l.type)),l.format===Xn&&(_=34041,l.type!==Un&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),l.type=Un,b=i.convert(l.type))),e.texImage2D(3553,0,_,v.width,v.height,0,x,b,null)}else if(l.isDataTexture)if(M.length>0&&g){for(var E=0,S=M.length;E<S;E++)w=M[E],e.texImage2D(3553,E,_,w.width,w.height,0,x,b,w.data);l.generateMipmaps=!1,t.__maxMipLevel=M.length-1}else e.texImage2D(3553,0,_,v.width,v.height,0,x,b,v.data),t.__maxMipLevel=0;else if(l.isCompressedTexture){for(E=0,S=M.length;E<S;E++)w=M[E],l.format!==Hn&&l.format!==Gn?e.getCompressedTextureFormats().indexOf(x)>-1?e.compressedTexImage2D(3553,E,_,w.width,w.height,0,w.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):e.texImage2D(3553,E,_,w.width,w.height,0,x,b,w.data);t.__maxMipLevel=M.length-1}else if(l.isDataTexture3D)e.texImage3D(32879,0,_,v.width,v.height,v.depth,0,x,b,v.data),t.__maxMipLevel=0;else if(M.length>0&&g){for(E=0,S=M.length;E<S;E++)w=M[E],e.texImage2D(3553,E,_,x,b,w);l.generateMipmaps=!1,t.__maxMipLevel=M.length-1}else e.texImage2D(3553,0,_,x,b,v),t.__maxMipLevel=0;h(l,g)&&p(3553,l,v.width,v.height),t.__version=l.version,l.onUpdate&&l.onUpdate(l)}function b(t,r,u,o){var a=i.convert(r.texture.format),s=i.convert(r.texture.type),c=d(a,s);e.texImage2D(o,0,c,r.width,r.height,0,a,s,null),n.bindFramebuffer(36160,t),n.framebufferTexture2D(36160,u,o,l.get(r.texture).__webglTexture,0),n.bindFramebuffer(36160,null)}function _(t,e,l){if(n.bindRenderbuffer(36161,t),e.depthBuffer&&!e.stencilBuffer){if(l){var r=w(e);n.renderbufferStorageMultisample(36161,r,33189,e.width,e.height)}else n.renderbufferStorage(36161,33189,e.width,e.height);n.framebufferRenderbuffer(36160,36096,36161,t)}else if(e.depthBuffer&&e.stencilBuffer)l?(r=w(e),n.renderbufferStorageMultisample(36161,r,34041,e.width,e.height)):n.renderbufferStorage(36161,34041,e.width,e.height),n.framebufferRenderbuffer(36160,33306,36161,t);else{var u=d(i.convert(e.texture.format),i.convert(e.texture.type));l?(r=w(e),n.renderbufferStorageMultisample(36161,r,u,e.width,e.height)):n.renderbufferStorage(36161,u,e.width,e.height)}n.bindRenderbuffer(36161,null)}function w(n){return r.isWebGL2&&n.isWebGLMultisampleRenderTarget?Math.min(r.maxSamples,n.samples):0}this.setTexture2D=g,this.setTexture3D=function(n,t){var r=l.get(n);n.version>0&&r.__version!==n.version?x(r,n,t):(e.activeTexture(33984+t),e.bindTexture(32879,r.__webglTexture))},this.setTextureCube=function(t,o){var a=l.get(t);if(6===t.image.length)if(t.version>0&&a.__version!==t.version){a.__image__webglTextureCube||(t.addEventListener("dispose",m),a.__image__webglTextureCube=n.createTexture(),u.memory.textures++),e.activeTexture(33984+o),e.bindTexture(34067,a.__image__webglTextureCube),n.pixelStorei(37440,t.flipY);for(var f=t&&t.isCompressedTexture,v=t.image[0]&&t.image[0].isDataTexture,g=[],x=0;x<6;x++)g[x]=f||v?v?t.image[x].image:t.image[x]:s(t.image[x],!1,!0,r.maxCubemapSize);var b=g[0],_=c(b)||r.isWebGL2,w=i.convert(t.format),M=i.convert(t.type),E=d(w,M);for(y(34067,t,_),x=0;x<6;x++)if(f)for(var S,T=g[x].mipmaps,A=0,L=T.length;A<L;A++)S=T[A],t.format!==Hn&&t.format!==Gn?e.getCompressedTextureFormats().indexOf(w)>-1?e.compressedTexImage2D(34069+x,A,E,S.width,S.height,0,S.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):e.texImage2D(34069+x,A,E,S.width,S.height,0,w,M,S.data);else v?e.texImage2D(34069+x,0,E,g[x].width,g[x].height,0,w,M,g[x].data):e.texImage2D(34069+x,0,E,w,M,g[x]);a.__maxMipLevel=f?T.length-1:0,h(t,_)&&p(34067,t,b.width,b.height),a.__version=t.version,t.onUpdate&&t.onUpdate(t)}else e.activeTexture(33984+o),e.bindTexture(34067,a.__image__webglTextureCube)},this.setTextureCubeDynamic=function(n,t){e.activeTexture(33984+t),e.bindTexture(34067,l.get(n).__webglTexture)},this.setupRenderTarget=function(t){var o=l.get(t),a=l.get(t.texture);t.addEventListener("dispose",v),a.__webglTexture=n.createTexture(),u.memory.textures++;var s=!0===t.isWebGLRenderTargetCube,f=!0===t.isWebGLMultisampleRenderTarget,m=c(t)||r.isWebGL2;if(s){o.__webglFramebuffer=[];for(var x=0;x<6;x++)o.__webglFramebuffer[x]=n.createFramebuffer()}else if(o.__webglFramebuffer=n.createFramebuffer(),f)if(r.isWebGL2){o.__webglMultisampledFramebuffer=n.createFramebuffer(),o.__webglColorRenderbuffer=n.createRenderbuffer(),n.bindRenderbuffer(36161,o.__webglColorRenderbuffer);var M=d(i.convert(t.texture.format),i.convert(t.texture.type)),E=w(t);n.renderbufferStorageMultisample(36161,E,M,t.width,t.height),n.bindFramebuffer(36160,o.__webglMultisampledFramebuffer),n.framebufferRenderbuffer(36160,36064,36161,o.__webglColorRenderbuffer),n.bindRenderbuffer(36161,null),t.depthBuffer&&(o.__webglDepthRenderbuffer=n.createRenderbuffer(),_(o.__webglDepthRenderbuffer,t,!0)),n.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(s){for(e.bindTexture(34067,a.__webglTexture),y(34067,t.texture,m),x=0;x<6;x++)b(o.__webglFramebuffer[x],t,36064,34069+x);h(t.texture,m)&&p(34067,t.texture,t.width,t.height),e.bindTexture(34067,null)}else e.bindTexture(3553,a.__webglTexture),y(3553,t.texture,m),b(o.__webglFramebuffer,t,36064,3553),h(t.texture,m)&&p(3553,t.texture,t.width,t.height),e.bindTexture(3553,null);t.depthBuffer&&function(t){var e=l.get(t),r=!0===t.isWebGLRenderTargetCube;if(t.depthTexture){if(r)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,e){if(e&&e.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(36160,t),!e.depthTexture||!e.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");l.get(e.depthTexture).__webglTexture&&e.depthTexture.image.width===e.width&&e.depthTexture.image.height===e.height||(e.depthTexture.image.width=e.width,e.depthTexture.image.height=e.height,e.depthTexture.needsUpdate=!0),g(e.depthTexture,0);var r=l.get(e.depthTexture).__webglTexture;if(e.depthTexture.format===qn)n.framebufferTexture2D(36160,36096,3553,r,0);else{if(e.depthTexture.format!==Xn)throw new Error("Unknown depthTexture format");n.framebufferTexture2D(36160,33306,3553,r,0)}}(e.__webglFramebuffer,t)}else if(r){e.__webglDepthbuffer=[];for(var i=0;i<6;i++)n.bindFramebuffer(36160,e.__webglFramebuffer[i]),e.__webglDepthbuffer[i]=n.createRenderbuffer(),_(e.__webglDepthbuffer[i],t)}else n.bindFramebuffer(36160,e.__webglFramebuffer),e.__webglDepthbuffer=n.createRenderbuffer(),_(e.__webglDepthbuffer,t);n.bindFramebuffer(36160,null)}(t)},this.updateRenderTargetMipmap=function(n){var t=n.texture;if(h(t,c(n)||r.isWebGL2)){var i=n.isWebGLRenderTargetCube?34067:3553,u=l.get(t).__webglTexture;e.bindTexture(i,u),p(i,t,n.width,n.height),e.bindTexture(i,null)}},this.updateMultisampleRenderTarget=function(t){if(t.isWebGLMultisampleRenderTarget)if(r.isWebGL2){var e=l.get(t);n.bindFramebuffer(36008,e.__webglMultisampledFramebuffer),n.bindFramebuffer(36009,e.__webglFramebuffer);var i=t.width,u=t.height,o=16384;t.depthBuffer&&(o|=256),t.stencilBuffer&&(o|=1024),n.blitFramebuffer(0,0,i,u,0,0,i,u,o,9728)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}}function Yr(n,t,e){return{convert:function(n){var l;if(n===bn)return 10497;if(n===_n)return 33071;if(n===wn)return 33648;if(n===Mn)return 9728;if(n===En)return 9984;if(n===Sn)return 9986;if(n===Tn)return 9729;if(n===An)return 9985;if(n===Ln)return 9987;if(n===Pn)return 5121;if(n===Bn)return 32819;if(n===Fn)return 32820;if(n===kn)return 33635;if(n===Cn)return 5120;if(n===Rn)return 5122;if(n===On)return 5123;if(n===Dn)return 5124;if(n===In)return 5125;if(n===zn)return 5126;if(n===Nn){if(e.isWebGL2)return 5131;if(null!==(l=t.get("OES_texture_half_float")))return l.HALF_FLOAT_OES}if(n===jn)return 6406;if(n===Gn)return 6407;if(n===Hn)return 6408;if(n===Vn)return 6409;if(n===Wn)return 6410;if(n===qn)return 6402;if(n===Xn)return 34041;if(n===Yn)return 6403;if(n===D)return 32774;if(n===I)return 32778;if(n===z)return 32779;if(n===F)return 0;if(n===k)return 1;if(n===U)return 768;if(n===j)return 769;if(n===G)return 770;if(n===H)return 771;if(n===V)return 772;if(n===W)return 773;if(n===q)return 774;if(n===X)return 775;if(n===Y)return 776;if((n===Zn||n===Jn||n===Kn||n===Qn)&&null!==(l=t.get("WEBGL_compressed_texture_s3tc"))){if(n===Zn)return l.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Jn)return l.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===Kn)return l.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Qn)return l.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((n===$n||n===nt||n===tt||n===et)&&null!==(l=t.get("WEBGL_compressed_texture_pvrtc"))){if(n===$n)return l.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===nt)return l.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===tt)return l.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===et)return l.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===lt&&null!==(l=t.get("WEBGL_compressed_texture_etc1")))return l.COMPRESSED_RGB_ETC1_WEBGL;if((n===rt||n===it||n===ut||n===ot||n===at||n===st||n===ct||n===ht||n===pt||n===dt||n===ft||n===mt||n===vt||n===gt)&&null!==(l=t.get("WEBGL_compressed_texture_astc")))return n;if(n===N||n===B){if(e.isWebGL2){if(n===N)return 32775;if(n===B)return 32776}if(null!==(l=t.get("EXT_blend_minmax"))){if(n===N)return l.MIN_EXT;if(n===B)return l.MAX_EXT}}if(n===Un){if(e.isWebGL2)return 34042;if(null!==(l=t.get("WEBGL_depth_texture")))return l.UNSIGNED_INT_24_8_WEBGL}return 0}}}function Zr(){Pe.call(this),this.type="Group"}function Jr(){Pe.call(this),this.type="Camera",this.matrixWorldInverse=new Ut,this.projectionMatrix=new Ut,this.projectionMatrixInverse=new Ut}function Kr(n,t,e,l){Jr.call(this),this.type="PerspectiveCamera",this.fov=void 0!==n?n:50,this.zoom=1,this.near=void 0!==e?e:.1,this.far=void 0!==l?l:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}function Qr(n){Kr.call(this),this.cameras=n||[]}Hr.prototype=Object.create(pl.prototype),Hr.prototype.constructor=Hr,Hr.prototype.isMeshDepthMaterial=!0,Hr.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.depthPacking=n.depthPacking,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.map=n.map,this.alphaMap=n.alphaMap,this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this},Vr.prototype=Object.create(pl.prototype),Vr.prototype.constructor=Vr,Vr.prototype.isMeshDistanceMaterial=!0,Vr.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.referencePosition.copy(n.referencePosition),this.nearDistance=n.nearDistance,this.farDistance=n.farDistance,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.map=n.map,this.alphaMap=n.alphaMap,this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this},Zr.prototype=Object.assign(Object.create(Pe.prototype),{constructor:Zr,isGroup:!0}),Jr.prototype=Object.assign(Object.create(Pe.prototype),{constructor:Jr,isCamera:!0,copy:function(n,t){return Pe.prototype.copy.call(this,n,t),this.matrixWorldInverse.copy(n.matrixWorldInverse),this.projectionMatrix.copy(n.projectionMatrix),this.projectionMatrixInverse.copy(n.projectionMatrixInverse),this},getWorldDirection:function(n){void 0===n&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),n=new Gt),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return n.set(-t[8],-t[9],-t[10]).normalize()},updateMatrixWorld:function(n){Pe.prototype.updateMatrixWorld.call(this,n),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),Kr.prototype=Object.assign(Object.create(Jr.prototype),{constructor:Kr,isPerspectiveCamera:!0,copy:function(n,t){return Jr.prototype.copy.call(this,n,t),this.fov=n.fov,this.zoom=n.zoom,this.near=n.near,this.far=n.far,this.focus=n.focus,this.aspect=n.aspect,this.view=null===n.view?null:Object.assign({},n.view),this.filmGauge=n.filmGauge,this.filmOffset=n.filmOffset,this},setFocalLength:function(n){var t=.5*this.getFilmHeight()/n;this.fov=2*Ft.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var n=Math.tan(.5*Ft.DEG2RAD*this.fov);return.5*this.getFilmHeight()/n},getEffectiveFOV:function(){return 2*Ft.RAD2DEG*Math.atan(Math.tan(.5*Ft.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(n,t,e,l,r,i){this.aspect=n/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=n,this.view.fullHeight=t,this.view.offsetX=e,this.view.offsetY=l,this.view.width=r,this.view.height=i,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var n=this.near,t=n*Math.tan(.5*Ft.DEG2RAD*this.fov)/this.zoom,e=2*t,l=this.aspect*e,r=-.5*l,i=this.view;if(null!==this.view&&this.view.enabled){var u=i.fullWidth,o=i.fullHeight;r+=i.offsetX*l/u,t-=i.offsetY*e/o,l*=i.width/u,e*=i.height/o}var a=this.filmOffset;0!==a&&(r+=n*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+l,t,t-e,n,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(n){var t=Pe.prototype.toJSON.call(this,n);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}),Qr.prototype=Object.assign(Object.create(Kr.prototype),{constructor:Qr,isArrayCamera:!0});var $r,ni,ti,ei,li,ri,ii=new Gt,ui=new Gt;function oi(n,t,e){ii.setFromMatrixPosition(t.matrixWorld),ui.setFromMatrixPosition(e.matrixWorld);var l=ii.distanceTo(ui),r=t.projectionMatrix.elements,i=e.projectionMatrix.elements,u=r[14]/(r[10]-1),o=r[14]/(r[10]+1),a=(r[9]+1)/r[5],s=(r[9]-1)/r[5],c=(r[8]-1)/r[0],h=(i[8]+1)/i[0],p=u*c,d=u*h,f=l/(-c+h),m=f*-c;t.matrixWorld.decompose(n.position,n.quaternion,n.scale),n.translateX(m),n.translateZ(f),n.matrixWorld.compose(n.position,n.quaternion,n.scale),n.matrixWorldInverse.getInverse(n.matrixWorld);var v=u+f,g=o+f,y=p-m,x=d+(l-m),b=a*o/g*v,_=s*o/g*v;n.projectionMatrix.makePerspective(y,x,b,_,v,g)}function ai(n){var t=this,e=null,l=null,r=null,i=[],u=new Ut,o=new Ut,a=1,s="stage";"undefined"!=typeof window&&"VRFrameData"in window&&(l=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",x,!1));var c=new Ut,h=new jt,p=new Gt,d=new Kr;d.bounds=new Qt(0,0,.5,1),d.layers.enable(1);var f=new Kr;f.bounds=new Qt(.5,0,.5,1),f.layers.enable(2);var m,v,g=new Qr([d,f]);function y(){return null!==e&&!0===e.isPresenting}function x(){if(y()){var l=e.getEyeParameters("left"),r=l.renderWidth*a,i=l.renderHeight*a;v=n.getPixelRatio(),m=n.getSize(),n.setDrawingBufferSize(2*r,i,1),w.start()}else t.enabled&&n.setDrawingBufferSize(m.width,m.height,v),w.stop()}g.layers.enable(1),g.layers.enable(2);var b=[];function _(n){for(var t=navigator.getGamepads&&navigator.getGamepads(),e=0,l=0,r=t.length;e<r;e++){var i=t[e];if(i&&("Daydream Controller"===i.id||"Gear VR Controller"===i.id||"Oculus Go Controller"===i.id||"OpenVR Gamepad"===i.id||i.id.startsWith("Oculus Touch")||i.id.startsWith("Spatial Controller"))){if(l===n)return i;l++}}}this.enabled=!1,this.getController=function(n){var t=i[n];return void 0===t&&((t=new Zr).matrixAutoUpdate=!1,t.visible=!1,i[n]=t),t},this.getDevice=function(){return e},this.setDevice=function(n){void 0!==n&&(e=n),w.setContext(n)},this.setFramebufferScaleFactor=function(n){a=n},this.setFrameOfReferenceType=function(n){s=n},this.setPoseTarget=function(n){void 0!==n&&(r=n)},this.getCamera=function(n){var t="stage"===s?1.6:0;if(null===e)return n.position.set(0,t,0),n;if(e.depthNear=n.near,e.depthFar=n.far,e.getFrameData(l),"stage"===s){var a=e.stageParameters;a?u.fromArray(a.sittingToStandingTransform):u.makeTranslation(0,t,0)}var m=l.pose,v=null!==r?r:n;if(v.matrix.copy(u),v.matrix.decompose(v.position,v.quaternion,v.scale),null!==m.orientation&&(h.fromArray(m.orientation),v.quaternion.multiply(h)),null!==m.position&&(h.setFromRotationMatrix(u),p.fromArray(m.position),p.applyQuaternion(h),v.position.add(p)),v.updateMatrixWorld(),!1===e.isPresenting)return n;d.near=n.near,f.near=n.near,d.far=n.far,f.far=n.far,d.matrixWorldInverse.fromArray(l.leftViewMatrix),f.matrixWorldInverse.fromArray(l.rightViewMatrix),o.getInverse(u),"stage"===s&&(d.matrixWorldInverse.multiply(o),f.matrixWorldInverse.multiply(o));var y=v.parent;null!==y&&(c.getInverse(y.matrixWorld),d.matrixWorldInverse.multiply(c),f.matrixWorldInverse.multiply(c)),d.matrixWorld.getInverse(d.matrixWorldInverse),f.matrixWorld.getInverse(f.matrixWorldInverse),d.projectionMatrix.fromArray(l.leftProjectionMatrix),f.projectionMatrix.fromArray(l.rightProjectionMatrix),oi(g,d,f);var x=e.getLayers();if(x.length){var w=x[0];null!==w.leftBounds&&4===w.leftBounds.length&&d.bounds.fromArray(w.leftBounds),null!==w.rightBounds&&4===w.rightBounds.length&&f.bounds.fromArray(w.rightBounds)}return function(){for(var n=0;n<i.length;n++){var t=i[n],e=_(n);if(void 0!==e&&void 0!==e.pose){if(null===e.pose)return;var l=e.pose;!1===l.hasPosition&&t.position.set(.2,-.6,-.05),null!==l.position&&t.position.fromArray(l.position),null!==l.orientation&&t.quaternion.fromArray(l.orientation),t.matrix.compose(t.position,t.quaternion,t.scale),t.matrix.premultiply(u),t.matrix.decompose(t.position,t.quaternion,t.scale),t.matrixWorldNeedsUpdate=!0,t.visible=!0;var r="Daydream Controller"===e.id?0:1;b[n]!==e.buttons[r].pressed&&(b[n]=e.buttons[r].pressed,!0===b[n]?t.dispatchEvent({type:"selectstart"}):(t.dispatchEvent({type:"selectend"}),t.dispatchEvent({type:"select"})))}else t.visible=!1}}(),g},this.getStandingMatrix=function(){return u},this.isPresenting=y;var w=new xe;this.setAnimationLoop=function(n){w.setAnimationLoop(n)},this.submitFrame=function(){y()&&e.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",x)}}function si(n){var t=n.context,e=null,l=null,r=1,i=null,u="stage",o=null,a=[],s=[];function c(){return null!==l&&null!==i}var h=new Kr;h.layers.enable(1),h.viewport=new Qt;var p=new Kr;p.layers.enable(2),p.viewport=new Qt;var d=new Qr([h,p]);function f(n){var t=a[s.indexOf(n.inputSource)];t&&t.dispatchEvent({type:n.type})}function m(){n.setFramebuffer(null),y.stop()}function v(n,t){null===t?n.matrixWorld.copy(n.matrix):n.matrixWorld.multiplyMatrices(t.matrixWorld,n.matrix),n.matrixWorldInverse.getInverse(n.matrixWorld)}d.layers.enable(1),d.layers.enable(2),this.enabled=!1,this.getController=function(n){var t=a[n];return void 0===t&&((t=new Zr).matrixAutoUpdate=!1,t.visible=!1,a[n]=t),t},this.getDevice=function(){return e},this.setDevice=function(n){void 0!==n&&(e=n),n instanceof XRDevice&&t.setCompatibleXRDevice(n)},this.setFramebufferScaleFactor=function(n){r=n},this.setFrameOfReferenceType=function(n){u=n},this.setSession=function(e){null!==(l=e)&&(l.addEventListener("select",f),l.addEventListener("selectstart",f),l.addEventListener("selectend",f),l.addEventListener("end",m),l.baseLayer=new XRWebGLLayer(l,t,{framebufferScaleFactor:r}),l.requestFrameOfReference(u).then((function(t){i=t,n.setFramebuffer(l.baseLayer.framebuffer),y.setContext(l),y.start()})),s=l.getInputSources(),l.addEventListener("inputsourceschange",(function(){s=l.getInputSources(),console.log(s);for(var n=0;n<a.length;n++)a[n].userData.inputSource=s[n]})))},this.getCamera=function(n){if(c()){var t=n.parent,e=d.cameras;v(d,t);for(var l=0;l<e.length;l++)v(e[l],t);n.matrixWorld.copy(d.matrixWorld);for(var r=n.children,i=(l=0,r.length);l<i;l++)r[l].updateMatrixWorld(!0);return oi(d,h,p),d}return n},this.isPresenting=c;var g=null,y=new xe;y.setAnimationLoop((function(n,t){if(null!==(o=t.getDevicePose(i)))for(var e=l.baseLayer,r=t.views,u=0;u<r.length;u++){var c=r[u],h=e.getViewport(c),p=o.getViewMatrix(c),f=d.cameras[u];f.matrix.fromArray(p).getInverse(f.matrix),f.projectionMatrix.fromArray(c.projectionMatrix),f.viewport.set(h.x,h.y,h.width,h.height),0===u&&d.matrix.copy(f.matrix)}for(u=0;u<a.length;u++){var m=a[u],v=s[u];if(v){var y=t.getInputPose(v,i);if(null!==y){"targetRay"in y?m.matrix.elements=y.targetRay.transformMatrix:"pointerMatrix"in y&&(m.matrix.elements=y.pointerMatrix),m.matrix.decompose(m.position,m.rotation,m.scale),m.visible=!0;continue}}m.visible=!1}g&&g(n)})),this.setAnimationLoop=function(n){g=n},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),new THREE.Matrix4},this.submitFrame=function(){}}function ci(n){console.log("THREE.WebGLRenderer",m);var t=void 0!==(n=n||{}).canvas?n.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),e=void 0!==n.context?n.context:null,l=void 0!==n.alpha&&n.alpha,r=void 0===n.depth||n.depth,i=void 0===n.stencil||n.stencil,u=void 0!==n.antialias&&n.antialias,o=void 0===n.premultipliedAlpha||n.premultipliedAlpha,a=void 0!==n.preserveDrawingBuffer&&n.preserveDrawingBuffer,s=void 0!==n.powerPreference?n.powerPreference:"default",c=null,h=null;this.domElement=t,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=an,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var p,d,f,v,g,y,x,b,_,w,E,S,T,A,L,P,C,R,O=this,D=!1,I=null,z=null,N=null,B=-1,F={geometry:null,program:null,wireframe:!1},k=null,U=null,j=new Qt,G=new Qt,H=null,V=0,W=t.width,q=t.height,X=1,Y=new Qt(0,0,W,q),Z=new Qt(0,0,W,q),J=!1,K=new ue,Q=new _l,$=!1,nn=!1,tn=new Ut,en=new Gt;function ln(){return null===z?X:1}try{var rn={alpha:l,depth:r,stencil:i,antialias:u,premultipliedAlpha:o,preserveDrawingBuffer:a,powerPreference:s};if(t.addEventListener("webglcontextlost",cn,!1),t.addEventListener("webglcontextrestored",hn,!1),null===(p=e||t.getContext("webgl",rn)||t.getContext("experimental-webgl",rn)))throw null!==t.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===p.getShaderPrecisionFormat&&(p.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(n){console.error("THREE.WebGLRenderer: "+n.message)}function un(){d=new wl(p),(f=new bl(p,d,n)).isWebGL2||(d.get("WEBGL_depth_texture"),d.get("OES_texture_float"),d.get("OES_texture_half_float"),d.get("OES_texture_half_float_linear"),d.get("OES_standard_derivatives"),d.get("OES_element_index_uint"),d.get("ANGLE_instanced_arrays")),d.get("OES_texture_float_linear"),R=new Yr(p,d,f),(v=new qr(p,d,R,f)).scissor(G.copy(Z).multiplyScalar(X)),v.viewport(j.copy(Y).multiplyScalar(X)),g=new Sl(p),y=new Dr,x=new Xr(p,d,v,y,f,R,g),b=new be(p),_=new Ml(p,b,g),w=new Ll(_,g),L=new Al(p),E=new Or(O,d,f),S=new Br,T=new Gr,A=new yl(O,v,w,o),P=new xl(p,d,g,f),C=new El(p,d,g,f),g.programs=E.programs,O.context=p,O.capabilities=f,O.extensions=d,O.properties=y,O.renderLists=S,O.state=v,O.info=g}un();var on=null;"undefined"!=typeof navigator&&(on="xr"in navigator?new si(O):new ai(O)),this.vr=on;var sn=new Wr(O,w,f.maxTextureSize);function cn(n){n.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),D=!0}function hn(){console.log("THREE.WebGLRenderer: Context Restored."),D=!1,un()}function pn(n){var t=n.target;t.removeEventListener("dispose",pn),function(n){dn(n),y.remove(n)}(t)}function dn(n){var t=y.get(n).program;n.program=void 0,void 0!==t&&E.releaseProgram(t)}this.shadowMap=sn,this.getContext=function(){return p},this.getContextAttributes=function(){return p.getContextAttributes()},this.forceContextLoss=function(){var n=d.get("WEBGL_lose_context");n&&n.loseContext()},this.forceContextRestore=function(){var n=d.get("WEBGL_lose_context");n&&n.restoreContext()},this.getPixelRatio=function(){return X},this.setPixelRatio=function(n){void 0!==n&&(X=n,this.setSize(W,q,!1))},this.getSize=function(){return{width:W,height:q}},this.setSize=function(n,e,l){on.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(W=n,q=e,t.width=n*X,t.height=e*X,!1!==l&&(t.style.width=n+"px",t.style.height=e+"px"),this.setViewport(0,0,n,e))},this.getDrawingBufferSize=function(){return{width:W*X,height:q*X}},this.setDrawingBufferSize=function(n,e,l){W=n,q=e,X=l,t.width=n*l,t.height=e*l,this.setViewport(0,0,n,e)},this.getCurrentViewport=function(){return j},this.setViewport=function(n,t,e,l){Y.set(n,q-t-l,e,l),v.viewport(j.copy(Y).multiplyScalar(X))},this.setScissor=function(n,t,e,l){Z.set(n,q-t-l,e,l),v.scissor(G.copy(Z).multiplyScalar(X))},this.setScissorTest=function(n){v.setScissorTest(J=n)},this.getClearColor=function(){return A.getClearColor()},this.setClearColor=function(){A.setClearColor.apply(A,arguments)},this.getClearAlpha=function(){return A.getClearAlpha()},this.setClearAlpha=function(){A.setClearAlpha.apply(A,arguments)},this.clear=function(n,t,e){var l=0;(void 0===n||n)&&(l|=16384),(void 0===t||t)&&(l|=256),(void 0===e||e)&&(l|=1024),p.clear(l)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",cn,!1),t.removeEventListener("webglcontextrestored",hn,!1),S.dispose(),T.dispose(),y.dispose(),w.dispose(),on.dispose(),vn.stop()},this.renderBufferImmediate=function(n,t){v.initAttributes();var e=y.get(n);n.hasPositions&&!e.position&&(e.position=p.createBuffer()),n.hasNormals&&!e.normal&&(e.normal=p.createBuffer()),n.hasUvs&&!e.uv&&(e.uv=p.createBuffer()),n.hasColors&&!e.color&&(e.color=p.createBuffer());var l=t.getAttributes();n.hasPositions&&(p.bindBuffer(34962,e.position),p.bufferData(34962,n.positionArray,35048),v.enableAttribute(l.position),p.vertexAttribPointer(l.position,3,5126,!1,0,0)),n.hasNormals&&(p.bindBuffer(34962,e.normal),p.bufferData(34962,n.normalArray,35048),v.enableAttribute(l.normal),p.vertexAttribPointer(l.normal,3,5126,!1,0,0)),n.hasUvs&&(p.bindBuffer(34962,e.uv),p.bufferData(34962,n.uvArray,35048),v.enableAttribute(l.uv),p.vertexAttribPointer(l.uv,2,5126,!1,0,0)),n.hasColors&&(p.bindBuffer(34962,e.color),p.bufferData(34962,n.colorArray,35048),v.enableAttribute(l.color),p.vertexAttribPointer(l.color,3,5126,!1,0,0)),v.disableUnusedAttributes(),p.drawArrays(4,0,n.count),n.count=0},this.renderBufferDirect=function(n,t,e,l,r,i){var u=r.isMesh&&r.normalMatrix.determinant()<0;v.setMaterial(l,u);var o=_n(n,t,l,r),a=!1;F.geometry===e.id&&F.program===o.id&&F.wireframe===(!0===l.wireframe)||(F.geometry=e.id,F.program=o.id,F.wireframe=!0===l.wireframe,a=!0),r.morphTargetInfluences&&(L.update(r,e,l,o),a=!0);var s,c=e.index,h=e.attributes.position,m=1;!0===l.wireframe&&(c=_.getWireframeAttribute(e),m=2);var g=P;null!==c&&(s=b.get(c),(g=C).setIndex(s)),a&&(function(n,t,e){if(e&&e.isInstancedBufferGeometry&!f.isWebGL2&&null===d.get("ANGLE_instanced_arrays"))console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");else{v.initAttributes();var l=e.attributes,r=t.getAttributes(),i=n.defaultAttributeValues;for(var u in r){var o=r[u];if(o>=0){var a=l[u];if(void 0!==a){var s=a.normalized,c=a.itemSize,h=b.get(a);if(void 0===h)continue;var m=h.buffer,g=h.type,y=h.bytesPerElement;if(a.isInterleavedBufferAttribute){var x=a.data,_=x.stride,w=a.offset;x&&x.isInstancedInterleavedBuffer?(v.enableAttributeAndDivisor(o,x.meshPerAttribute),void 0===e.maxInstancedCount&&(e.maxInstancedCount=x.meshPerAttribute*x.count)):v.enableAttribute(o),p.bindBuffer(34962,m),p.vertexAttribPointer(o,c,g,s,_*y,w*y)}else a.isInstancedBufferAttribute?(v.enableAttributeAndDivisor(o,a.meshPerAttribute),void 0===e.maxInstancedCount&&(e.maxInstancedCount=a.meshPerAttribute*a.count)):v.enableAttribute(o),p.bindBuffer(34962,m),p.vertexAttribPointer(o,c,g,s,0,0)}else if(void 0!==i){var M=i[u];if(void 0!==M)switch(M.length){case 2:p.vertexAttrib2fv(o,M);break;case 3:p.vertexAttrib3fv(o,M);break;case 4:p.vertexAttrib4fv(o,M);break;default:p.vertexAttrib1fv(o,M)}}}}v.disableUnusedAttributes()}}(l,o,e),null!==c&&p.bindBuffer(34963,s.buffer));var y=1/0;null!==c?y=c.count:void 0!==h&&(y=h.count);var x=e.drawRange.start*m,w=e.drawRange.count*m,M=null!==i?i.start*m:0,E=null!==i?i.count*m:1/0,S=Math.max(x,M),T=Math.min(y,x+w,M+E)-1,A=Math.max(0,T-S+1);if(0!==A){if(r.isMesh)if(!0===l.wireframe)v.setLineWidth(l.wireframeLinewidth*ln()),g.setMode(1);else switch(r.drawMode){case Et:g.setMode(4);break;case St:g.setMode(5);break;case Tt:g.setMode(6)}else if(r.isLine){var R=l.linewidth;void 0===R&&(R=1),v.setLineWidth(R*ln()),r.isLineSegments?g.setMode(1):r.isLineLoop?g.setMode(2):g.setMode(3)}else r.isPoints?g.setMode(0):r.isSprite&&g.setMode(4);e&&e.isInstancedBufferGeometry?e.maxInstancedCount>0&&g.renderInstances(e,S,A):g.render(S,A)}},this.compile=function(n,t){(h=T.get(n,t)).init(),n.traverse((function(n){n.isLight&&(h.pushLight(n),n.castShadow&&h.pushShadow(n))})),h.setupLights(t),n.traverse((function(t){if(t.material)if(Array.isArray(t.material))for(var e=0;e<t.material.length;e++)bn(t.material[e],n.fog,t);else bn(t.material,n.fog,t)}))};var fn,mn=null,vn=new xe;function gn(n,t,e,l){if(!1!==n.visible){if(n.layers.test(t.layers))if(n.isGroup)e=n.renderOrder;else if(n.isLight)h.pushLight(n),n.castShadow&&h.pushShadow(n);else if(n.isSprite){if(!n.frustumCulled||K.intersectsSprite(n)){l&&en.setFromMatrixPosition(n.matrixWorld).applyMatrix4(tn);var r=w.update(n),i=n.material;c.push(n,r,i,e,en.z,null)}}else if(n.isImmediateRenderObject)l&&en.setFromMatrixPosition(n.matrixWorld).applyMatrix4(tn),c.push(n,null,n.material,e,en.z,null);else if((n.isMesh||n.isLine||n.isPoints)&&(n.isSkinnedMesh&&n.skeleton.update(),!n.frustumCulled||K.intersectsObject(n)))if(l&&en.setFromMatrixPosition(n.matrixWorld).applyMatrix4(tn),r=w.update(n),i=n.material,Array.isArray(i))for(var u=r.groups,o=0,a=u.length;o<a;o++){var s=u[o],p=i[s.materialIndex];p&&p.visible&&c.push(n,r,p,e,en.z,s)}else i.visible&&c.push(n,r,i,e,en.z,null);var d=n.children;for(o=0,a=d.length;o<a;o++)gn(d[o],t,e,l)}}function yn(n,t,e,l){for(var r=0,i=n.length;r<i;r++){var u=n[r],o=u.object,a=u.geometry,s=void 0===l?u.material:l,c=u.group;if(e.isArrayCamera){U=e;for(var p=e.cameras,d=0,f=p.length;d<f;d++){var m=p[d];if(o.layers.test(m.layers)){if("viewport"in m)v.viewport(j.copy(m.viewport));else{var g=m.bounds,y=g.x*W,x=g.y*q,b=g.z*W,_=g.w*q;v.viewport(j.set(y,x,b,_).multiplyScalar(X))}h.setupLights(m),xn(o,t,m,a,s,c)}}}else U=null,xn(o,t,e,a,s,c)}}function xn(n,t,e,l,r,i){if(n.onBeforeRender(O,t,e,l,r,i),h=T.get(t,U||e),n.modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,n.matrixWorld),n.normalMatrix.getNormalMatrix(n.modelViewMatrix),n.isImmediateRenderObject){v.setMaterial(r);var u=_n(e,t.fog,r,n);F.geometry=null,F.program=null,F.wireframe=!1,function(n,t){n.render((function(n){O.renderBufferImmediate(n,t)}))}(n,u)}else O.renderBufferDirect(e,t.fog,l,r,n,i);n.onAfterRender(O,t,e,l,r,i),h=T.get(t,U||e)}function bn(n,t,e){var l=y.get(n),r=h.state.lights,i=h.state.shadowsArray,u=l.lightsHash,o=r.state.hash,a=E.getParameters(n,r.state,i,t,Q.numPlanes,Q.numIntersection,e),s=E.getProgramCode(n,a),c=l.program,p=!0;if(void 0===c)n.addEventListener("dispose",pn);else if(c.code!==s)dn(n);else if(u.stateID!==o.stateID||u.directionalLength!==o.directionalLength||u.pointLength!==o.pointLength||u.spotLength!==o.spotLength||u.rectAreaLength!==o.rectAreaLength||u.hemiLength!==o.hemiLength||u.shadowsLength!==o.shadowsLength)u.stateID=o.stateID,u.directionalLength=o.directionalLength,u.pointLength=o.pointLength,u.spotLength=o.spotLength,u.rectAreaLength=o.rectAreaLength,u.hemiLength=o.hemiLength,u.shadowsLength=o.shadowsLength,p=!1;else{if(void 0!==a.shaderID)return;p=!1}if(p){if(a.shaderID){var d=ye[a.shaderID];l.shader={name:n.type,uniforms:ae(d.uniforms),vertexShader:d.vertexShader,fragmentShader:d.fragmentShader}}else l.shader={name:n.type,uniforms:n.uniforms,vertexShader:n.vertexShader,fragmentShader:n.fragmentShader};n.onBeforeCompile(l.shader,O),s=E.getProgramCode(n,a),c=E.acquireProgram(n,l.shader,a,s),l.program=c,n.program=c}var f=c.getAttributes();if(n.morphTargets){n.numSupportedMorphTargets=0;for(var m=0;m<O.maxMorphTargets;m++)f["morphTarget"+m]>=0&&n.numSupportedMorphTargets++}if(n.morphNormals)for(n.numSupportedMorphNormals=0,m=0;m<O.maxMorphNormals;m++)f["morphNormal"+m]>=0&&n.numSupportedMorphNormals++;var v=l.shader.uniforms;(n.isShaderMaterial||n.isRawShaderMaterial)&&!0!==n.clipping||(l.numClippingPlanes=Q.numPlanes,l.numIntersection=Q.numIntersection,v.clippingPlanes=Q.uniform),l.fog=t,void 0===u&&(l.lightsHash=u={}),u.stateID=o.stateID,u.directionalLength=o.directionalLength,u.pointLength=o.pointLength,u.spotLength=o.spotLength,u.rectAreaLength=o.rectAreaLength,u.hemiLength=o.hemiLength,u.shadowsLength=o.shadowsLength,n.lights&&(v.ambientLightColor.value=r.state.ambient,v.directionalLights.value=r.state.directional,v.spotLights.value=r.state.spot,v.rectAreaLights.value=r.state.rectArea,v.pointLights.value=r.state.point,v.hemisphereLights.value=r.state.hemi,v.directionalShadowMap.value=r.state.directionalShadowMap,v.directionalShadowMatrix.value=r.state.directionalShadowMatrix,v.spotShadowMap.value=r.state.spotShadowMap,v.spotShadowMatrix.value=r.state.spotShadowMatrix,v.pointShadowMap.value=r.state.pointShadowMap,v.pointShadowMatrix.value=r.state.pointShadowMatrix);var g=l.program.getUniforms(),x=br.seqWithValue(g.seq,v);l.uniformsList=x}function _n(n,t,e,l){V=0;var r=y.get(e),i=h.state.lights,u=r.lightsHash,o=i.state.hash;if($&&(nn||n!==k)){var a=n===k&&e.id===B;Q.setState(e.clippingPlanes,e.clipIntersection,e.clipShadows,n,r,a)}!1===e.needsUpdate&&(void 0===r.program||e.fog&&r.fog!==t?e.needsUpdate=!0:(!e.lights||u.stateID===o.stateID&&u.directionalLength===o.directionalLength&&u.pointLength===o.pointLength&&u.spotLength===o.spotLength&&u.rectAreaLength===o.rectAreaLength&&u.hemiLength===o.hemiLength&&u.shadowsLength===o.shadowsLength)&&(void 0===r.numClippingPlanes||r.numClippingPlanes===Q.numPlanes&&r.numIntersection===Q.numIntersection)||(e.needsUpdate=!0)),e.needsUpdate&&(bn(e,t,l),e.needsUpdate=!1);var s,c,d=!1,m=!1,g=!1,x=r.program,b=x.getUniforms(),_=r.shader.uniforms;if(v.useProgram(x.program)&&(d=!0,m=!0,g=!0),e.id!==B&&(B=e.id,m=!0),d||k!==n){if(b.setValue(p,"projectionMatrix",n.projectionMatrix),f.logarithmicDepthBuffer&&b.setValue(p,"logDepthBufFC",2/(Math.log(n.far+1)/Math.LN2)),k!==n&&(k=n,m=!0,g=!0),e.isShaderMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.envMap){var w=b.map.cameraPosition;void 0!==w&&w.setValue(p,en.setFromMatrixPosition(n.matrixWorld))}(e.isMeshPhongMaterial||e.isMeshLambertMaterial||e.isMeshBasicMaterial||e.isMeshStandardMaterial||e.isShaderMaterial||e.skinning)&&b.setValue(p,"viewMatrix",n.matrixWorldInverse)}if(e.skinning){b.setOptional(p,l,"bindMatrix"),b.setOptional(p,l,"bindMatrixInverse");var E=l.skeleton;if(E){var S=E.bones;if(f.floatVertexTextures){if(void 0===E.boneTexture){var T=Math.sqrt(4*S.length);T=Ft.ceilPowerOfTwo(T),T=Math.max(T,4);var A=new Float32Array(T*T*4);A.set(E.boneMatrices);var L=new ee(A,T,T,Hn,zn);L.needsUpdate=!0,E.boneMatrices=A,E.boneTexture=L,E.boneTextureSize=T}b.setValue(p,"boneTexture",E.boneTexture),b.setValue(p,"boneTextureSize",E.boneTextureSize)}else b.setOptional(p,E,"boneMatrices")}}return m&&(b.setValue(p,"toneMappingExposure",O.toneMappingExposure),b.setValue(p,"toneMappingWhitePoint",O.toneMappingWhitePoint),e.lights&&(c=g,(s=_).ambientLightColor.needsUpdate=c,s.directionalLights.needsUpdate=c,s.pointLights.needsUpdate=c,s.spotLights.needsUpdate=c,s.rectAreaLights.needsUpdate=c,s.hemisphereLights.needsUpdate=c),t&&e.fog&&function(n,t){n.fogColor.value=t.color,t.isFog?(n.fogNear.value=t.near,n.fogFar.value=t.far):t.isFogExp2&&(n.fogDensity.value=t.density)}(_,t),e.isMeshBasicMaterial?wn(_,e):e.isMeshLambertMaterial?(wn(_,e),function(n,t){t.emissiveMap&&(n.emissiveMap.value=t.emissiveMap)}(_,e)):e.isMeshPhongMaterial?(wn(_,e),e.isMeshToonMaterial?function(n,t){Mn(n,t),t.gradientMap&&(n.gradientMap.value=t.gradientMap)}(_,e):Mn(_,e)):e.isMeshStandardMaterial?(wn(_,e),e.isMeshPhysicalMaterial?function(n,t){En(n,t),n.reflectivity.value=t.reflectivity,n.clearCoat.value=t.clearCoat,n.clearCoatRoughness.value=t.clearCoatRoughness}(_,e):En(_,e)):e.isMeshMatcapMaterial?(wn(_,e),function(n,t){t.matcap&&(n.matcap.value=t.matcap),t.bumpMap&&(n.bumpMap.value=t.bumpMap,n.bumpScale.value=t.bumpScale,t.side===M&&(n.bumpScale.value*=-1)),t.normalMap&&(n.normalMap.value=t.normalMap,n.normalScale.value.copy(t.normalScale),t.side===M&&n.normalScale.value.negate()),t.displacementMap&&(n.displacementMap.value=t.displacementMap,n.displacementScale.value=t.displacementScale,n.displacementBias.value=t.displacementBias)}(_,e)):e.isMeshDepthMaterial?(wn(_,e),function(n,t){t.displacementMap&&(n.displacementMap.value=t.displacementMap,n.displacementScale.value=t.displacementScale,n.displacementBias.value=t.displacementBias)}(_,e)):e.isMeshDistanceMaterial?(wn(_,e),function(n,t){t.displacementMap&&(n.displacementMap.value=t.displacementMap,n.displacementScale.value=t.displacementScale,n.displacementBias.value=t.displacementBias),n.referencePosition.value.copy(t.referencePosition),n.nearDistance.value=t.nearDistance,n.farDistance.value=t.farDistance}(_,e)):e.isMeshNormalMaterial?(wn(_,e),function(n,t){t.bumpMap&&(n.bumpMap.value=t.bumpMap,n.bumpScale.value=t.bumpScale,t.side===M&&(n.bumpScale.value*=-1)),t.normalMap&&(n.normalMap.value=t.normalMap,n.normalScale.value.copy(t.normalScale),t.side===M&&n.normalScale.value.negate()),t.displacementMap&&(n.displacementMap.value=t.displacementMap,n.displacementScale.value=t.displacementScale,n.displacementBias.value=t.displacementBias)}(_,e)):e.isLineBasicMaterial?(function(n,t){n.diffuse.value=t.color,n.opacity.value=t.opacity}(_,e),e.isLineDashedMaterial&&function(n,t){n.dashSize.value=t.dashSize,n.totalSize.value=t.dashSize+t.gapSize,n.scale.value=t.scale}(_,e)):e.isPointsMaterial?function(n,t){n.diffuse.value=t.color,n.opacity.value=t.opacity,n.size.value=t.size*X,n.scale.value=.5*q,n.map.value=t.map,null!==t.map&&(!0===t.map.matrixAutoUpdate&&t.map.updateMatrix(),n.uvTransform.value.copy(t.map.matrix))}(_,e):e.isSpriteMaterial?function(n,t){n.diffuse.value=t.color,n.opacity.value=t.opacity,n.rotation.value=t.rotation,n.map.value=t.map,null!==t.map&&(!0===t.map.matrixAutoUpdate&&t.map.updateMatrix(),n.uvTransform.value.copy(t.map.matrix))}(_,e):e.isShadowMaterial&&(_.color.value=e.color,_.opacity.value=e.opacity),void 0!==_.ltc_1&&(_.ltc_1.value=ge.LTC_1),void 0!==_.ltc_2&&(_.ltc_2.value=ge.LTC_2),br.upload(p,r.uniformsList,_,O)),e.isShaderMaterial&&!0===e.uniformsNeedUpdate&&(br.upload(p,r.uniformsList,_,O),e.uniformsNeedUpdate=!1),e.isSpriteMaterial&&b.setValue(p,"center",l.center),b.setValue(p,"modelViewMatrix",l.modelViewMatrix),b.setValue(p,"normalMatrix",l.normalMatrix),b.setValue(p,"modelMatrix",l.matrixWorld),x}function wn(n,t){var e;n.opacity.value=t.opacity,t.color&&(n.diffuse.value=t.color),t.emissive&&n.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),t.map&&(n.map.value=t.map),t.alphaMap&&(n.alphaMap.value=t.alphaMap),t.specularMap&&(n.specularMap.value=t.specularMap),t.envMap&&(n.envMap.value=t.envMap,n.flipEnvMap.value=t.envMap.isCubeTexture?-1:1,n.reflectivity.value=t.reflectivity,n.refractionRatio.value=t.refractionRatio,n.maxMipLevel.value=y.get(t.envMap).__maxMipLevel),t.lightMap&&(n.lightMap.value=t.lightMap,n.lightMapIntensity.value=t.lightMapIntensity),t.aoMap&&(n.aoMap.value=t.aoMap,n.aoMapIntensity.value=t.aoMapIntensity),t.map?e=t.map:t.specularMap?e=t.specularMap:t.displacementMap?e=t.displacementMap:t.normalMap?e=t.normalMap:t.bumpMap?e=t.bumpMap:t.roughnessMap?e=t.roughnessMap:t.metalnessMap?e=t.metalnessMap:t.alphaMap?e=t.alphaMap:t.emissiveMap&&(e=t.emissiveMap),void 0!==e&&(e.isWebGLRenderTarget&&(e=e.texture),!0===e.matrixAutoUpdate&&e.updateMatrix(),n.uvTransform.value.copy(e.matrix))}function Mn(n,t){n.specular.value=t.specular,n.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(n.emissiveMap.value=t.emissiveMap),t.bumpMap&&(n.bumpMap.value=t.bumpMap,n.bumpScale.value=t.bumpScale,t.side===M&&(n.bumpScale.value*=-1)),t.normalMap&&(n.normalMap.value=t.normalMap,n.normalScale.value.copy(t.normalScale),t.side===M&&n.normalScale.value.negate()),t.displacementMap&&(n.displacementMap.value=t.displacementMap,n.displacementScale.value=t.displacementScale,n.displacementBias.value=t.displacementBias)}function En(n,t){n.roughness.value=t.roughness,n.metalness.value=t.metalness,t.roughnessMap&&(n.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(n.metalnessMap.value=t.metalnessMap),t.emissiveMap&&(n.emissiveMap.value=t.emissiveMap),t.bumpMap&&(n.bumpMap.value=t.bumpMap,n.bumpScale.value=t.bumpScale,t.side===M&&(n.bumpScale.value*=-1)),t.normalMap&&(n.normalMap.value=t.normalMap,n.normalScale.value.copy(t.normalScale),t.side===M&&n.normalScale.value.negate()),t.displacementMap&&(n.displacementMap.value=t.displacementMap,n.displacementScale.value=t.displacementScale,n.displacementBias.value=t.displacementBias),t.envMap&&(n.envMapIntensity.value=t.envMapIntensity)}vn.setAnimationLoop((function(n){on.isPresenting()||mn&&mn(n)})),"undefined"!=typeof window&&vn.setContext(window),this.setAnimationLoop=function(n){mn=n,on.setAnimationLoop(n),vn.start()},this.render=function(n,t,e,l){if(t&&t.isCamera){if(!D){F.geometry=null,F.program=null,F.wireframe=!1,B=-1,k=null,!0===n.autoUpdate&&n.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),on.enabled&&(t=on.getCamera(t)),(h=T.get(n,t)).init(),n.onBeforeRender(O,n,t,e),tn.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),K.setFromMatrix(tn),nn=this.localClippingEnabled,$=Q.init(this.clippingPlanes,nn,t),(c=S.get(n,t)).init(),gn(n,t,0,O.sortObjects),!0===O.sortObjects&&c.sort(),$&&Q.beginShadows();var r=h.state.shadowsArray;sn.render(r,n,t),h.setupLights(t),$&&Q.endShadows(),this.info.autoReset&&this.info.reset(),void 0===e&&(e=null),this.setRenderTarget(e),A.render(c,n,t,l);var i=c.opaque,u=c.transparent;if(n.overrideMaterial){var o=n.overrideMaterial;i.length&&yn(i,n,t,o),u.length&&yn(u,n,t,o)}else i.length&&yn(i,n,t),u.length&&yn(u,n,t);e&&(x.updateRenderTargetMipmap(e),x.updateMultisampleRenderTarget(e)),v.buffers.depth.setTest(!0),v.buffers.depth.setMask(!0),v.buffers.color.setMask(!0),v.setPolygonOffset(!1),n.onAfterRender(O,n,t),on.enabled&&on.submitFrame(),c=null,h=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.allocTextureUnit=function(){var n=V;return n>=f.maxTextures&&console.warn("THREE.WebGLRenderer: Trying to use "+n+" texture units while this GPU supports only "+f.maxTextures),V+=1,n},this.setTexture2D=(fn=!1,function(n,t){n&&n.isWebGLRenderTarget&&(fn||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),fn=!0),n=n.texture),x.setTexture2D(n,t)}),this.setTexture3D=function(n,t){x.setTexture3D(n,t)},this.setTexture=function(){var n=!1;return function(t,e){n||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),n=!0),x.setTexture2D(t,e)}}(),this.setTextureCube=function(){var n=!1;return function(t,e){t&&t.isWebGLRenderTargetCube&&(n||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),n=!0),t=t.texture),t&&t.isCubeTexture||Array.isArray(t.image)&&6===t.image.length?x.setTextureCube(t,e):x.setTextureCubeDynamic(t,e)}}(),this.setFramebuffer=function(n){I=n},this.getRenderTarget=function(){return z},this.setRenderTarget=function(n){z=n,n&&void 0===y.get(n).__webglFramebuffer&&x.setupRenderTarget(n);var t=I,e=!1;if(n){var l=y.get(n).__webglFramebuffer;n.isWebGLRenderTargetCube?(t=l[n.activeCubeFace],e=!0):t=n.isWebGLMultisampleRenderTarget?y.get(n).__webglMultisampledFramebuffer:l,j.copy(n.viewport),G.copy(n.scissor),H=n.scissorTest}else j.copy(Y).multiplyScalar(X),G.copy(Z).multiplyScalar(X),H=J;if(N!==t&&(p.bindFramebuffer(36160,t),N=t),v.viewport(j),v.scissor(G),v.setScissorTest(H),e){var r=y.get(n.texture);p.framebufferTexture2D(36160,36064,34069+n.activeCubeFace,r.__webglTexture,n.activeMipMapLevel)}},this.readRenderTargetPixels=function(n,t,e,l,r,i){if(n&&n.isWebGLRenderTarget){var u=y.get(n).__webglFramebuffer;if(u){var o=!1;u!==N&&(p.bindFramebuffer(36160,u),o=!0);try{var a=n.texture,s=a.format,c=a.type;if(s!==Hn&&R.convert(s)!==p.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(c===Pn||R.convert(c)===p.getParameter(35738)||c===zn&&(f.isWebGL2||d.get("OES_texture_float")||d.get("WEBGL_color_buffer_float"))||c===Nn&&(f.isWebGL2?d.get("EXT_color_buffer_float"):d.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===p.checkFramebufferStatus(36160)?t>=0&&t<=n.width-l&&e>=0&&e<=n.height-r&&p.readPixels(t,e,l,r,R.convert(s),R.convert(c),i):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{o&&p.bindFramebuffer(36160,N)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(n,t,e){var l=t.image.width,r=t.image.height,i=R.convert(t.format);this.setTexture2D(t,0),p.copyTexImage2D(3553,e||0,i,n.x,n.y,l,r,0)},this.copyTextureToTexture=function(n,t,e,l){var r=t.image.width,i=t.image.height,u=R.convert(e.format),o=R.convert(e.type);this.setTexture2D(e,0),t.isDataTexture?p.texSubImage2D(3553,l||0,n.x,n.y,r,i,u,o,t.image.data):p.texSubImage2D(3553,l||0,n.x,n.y,u,o,t.image)}}function hi(n,t){this.name="",this.color=new me(n),this.density=void 0!==t?t:25e-5}function pi(n,t,e){this.name="",this.color=new me(n),this.near=void 0!==t?t:1,this.far=void 0!==e?e:1e3}function di(){Pe.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}function fi(n,t){this.array=n,this.stride=t,this.count=void 0!==n?n.length/t:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function mi(n,t,e,l){this.data=n,this.itemSize=t,this.offset=e,this.normalized=!0===l}function vi(n){pl.call(this),this.type="SpriteMaterial",this.color=new me(16777215),this.map=null,this.rotation=0,this.sizeAttenuation=!0,this.lights=!1,this.transparent=!0,this.setValues(n)}function gi(n){if(Pe.call(this),this.type="Sprite",void 0===$r){$r=new Xe;var t=new fi(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);$r.setIndex([0,1,2,0,2,3]),$r.addAttribute("position",new mi(t,3,0,!1)),$r.addAttribute("uv",new mi(t,2,3,!1))}this.geometry=$r,this.material=void 0!==n?n:new vi,this.center=new kt(.5,.5)}function yi(){Pe.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function xi(n,t){n&&n.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),gl.call(this,n,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Ut,this.bindMatrixInverse=new Ut}function bi(n,t){if(n=n||[],this.bones=n.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var e=0,l=this.bones.length;e<l;e++)this.boneInverses.push(new Ut)}}function _i(){Pe.call(this),this.type="Bone"}function wi(n){pl.call(this),this.type="LineBasicMaterial",this.color=new me(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(n)}function Mi(n,t,e){1===e&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),Pe.call(this),this.type="Line",this.geometry=void 0!==n?n:new Xe,this.material=void 0!==t?t:new wi({color:16777215*Math.random()})}function Ei(n,t){Mi.call(this,n,t),this.type="LineSegments"}function Si(n,t){Mi.call(this,n,t),this.type="LineLoop"}function Ti(n){pl.call(this),this.type="PointsMaterial",this.color=new me(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.lights=!1,this.setValues(n)}function Ai(n,t){Pe.call(this),this.type="Points",this.geometry=void 0!==n?n:new Xe,this.material=void 0!==t?t:new Ti({color:16777215*Math.random()})}function Li(n,t,e,l,r,i,u,o,a){Kt.call(this,n,t,e,l,r,i,u,o,a),this.format=void 0!==u?u:Gn,this.minFilter=void 0!==i?i:Tn,this.magFilter=void 0!==r?r:Tn,this.generateMipmaps=!1}function Pi(n,t,e,l,r,i,u,o,a,s,c,h){Kt.call(this,null,i,u,o,a,s,l,r,c,h),this.image={width:t,height:e},this.mipmaps=n,this.flipY=!1,this.generateMipmaps=!1}function Ci(n,t,e,l,r,i,u,o,a){Kt.call(this,n,t,e,l,r,i,u,o,a),this.needsUpdate=!0}function Ri(n,t,e,l,r,i,u,o,a,s){if((s=void 0!==s?s:qn)!==qn&&s!==Xn)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===e&&s===qn&&(e=On),void 0===e&&s===Xn&&(e=Un),Kt.call(this,null,l,r,i,u,o,s,e,a),this.image={width:n,height:t},this.magFilter=void 0!==u?u:Mn,this.minFilter=void 0!==o?o:Mn,this.flipY=!1,this.generateMipmaps=!1}function Oi(n){Xe.call(this),this.type="WireframeGeometry";var t,e,l,r,i,u,o,a,s,c,h=[],p=[0,0],d={},f=["a","b","c"];if(n&&n.isGeometry){var m=n.faces;for(t=0,l=m.length;t<l;t++){var v=m[t];for(e=0;e<3;e++)o=v[f[e]],a=v[f[(e+1)%3]],p[0]=Math.min(o,a),p[1]=Math.max(o,a),void 0===d[s=p[0]+","+p[1]]&&(d[s]={index1:p[0],index2:p[1]})}for(s in d)u=d[s],c=n.vertices[u.index1],h.push(c.x,c.y,c.z),c=n.vertices[u.index2],h.push(c.x,c.y,c.z)}else if(n&&n.isBufferGeometry){var g,y,x,b,_,w,M;if(c=new Gt,null!==n.index){for(g=n.attributes.position,y=n.index,0===(x=n.groups).length&&(x=[{start:0,count:y.count,materialIndex:0}]),r=0,i=x.length;r<i;++r)for(t=_=(b=x[r]).start,l=_+b.count;t<l;t+=3)for(e=0;e<3;e++)o=y.getX(t+e),a=y.getX(t+(e+1)%3),p[0]=Math.min(o,a),p[1]=Math.max(o,a),void 0===d[s=p[0]+","+p[1]]&&(d[s]={index1:p[0],index2:p[1]});for(s in d)u=d[s],c.fromBufferAttribute(g,u.index1),h.push(c.x,c.y,c.z),c.fromBufferAttribute(g,u.index2),h.push(c.x,c.y,c.z)}else for(t=0,l=(g=n.attributes.position).count/3;t<l;t++)for(e=0;e<3;e++)w=3*t+e,c.fromBufferAttribute(g,w),h.push(c.x,c.y,c.z),M=3*t+(e+1)%3,c.fromBufferAttribute(g,M),h.push(c.x,c.y,c.z)}this.addAttribute("position",new Ge(h,3))}function Di(n,t,e){De.call(this),this.type="ParametricGeometry",this.parameters={func:n,slices:t,stacks:e},this.fromBufferGeometry(new Ii(n,t,e)),this.mergeVertices()}function Ii(n,t,e){Xe.call(this),this.type="ParametricBufferGeometry",this.parameters={func:n,slices:t,stacks:e};var l,r,i=[],u=[],o=[],a=[],s=1e-5,c=new Gt,h=new Gt,p=new Gt,d=new Gt,f=new Gt;n.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var m=t+1;for(l=0;l<=e;l++){var v=l/e;for(r=0;r<=t;r++){var g=r/t;n(g,v,h),u.push(h.x,h.y,h.z),g-s>=0?(n(g-s,v,p),d.subVectors(h,p)):(n(g+s,v,p),d.subVectors(p,h)),v-s>=0?(n(g,v-s,p),f.subVectors(h,p)):(n(g,v+s,p),f.subVectors(p,h)),c.crossVectors(d,f).normalize(),o.push(c.x,c.y,c.z),a.push(g,v)}}for(l=0;l<e;l++)for(r=0;r<t;r++){var y=l*m+r,x=l*m+r+1,b=(l+1)*m+r+1,_=(l+1)*m+r;i.push(y,x,_),i.push(x,b,_)}this.setIndex(i),this.addAttribute("position",new Ge(u,3)),this.addAttribute("normal",new Ge(o,3)),this.addAttribute("uv",new Ge(a,2))}function zi(n,t,e,l){De.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:n,indices:t,radius:e,detail:l},this.fromBufferGeometry(new Ni(n,t,e,l)),this.mergeVertices()}function Ni(n,t,e,l){Xe.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:n,indices:t,radius:e,detail:l},e=e||1;var r=[],i=[];function u(n,t,e,l){var r,i,u=Math.pow(2,l),a=[];for(r=0;r<=u;r++){a[r]=[];var s=n.clone().lerp(e,r/u),c=t.clone().lerp(e,r/u),h=u-r;for(i=0;i<=h;i++)a[r][i]=0===i&&r===u?s:s.clone().lerp(c,i/h)}for(r=0;r<u;r++)for(i=0;i<2*(u-r)-1;i++){var p=Math.floor(i/2);i%2==0?(o(a[r][p+1]),o(a[r+1][p]),o(a[r][p])):(o(a[r][p+1]),o(a[r+1][p+1]),o(a[r+1][p]))}}function o(n){r.push(n.x,n.y,n.z)}function a(t,e){var l=3*t;e.x=n[l+0],e.y=n[l+1],e.z=n[l+2]}function s(n,t,e,l){l<0&&1===n.x&&(i[t]=n.x-1),0===e.x&&0===e.z&&(i[t]=l/2/Math.PI+.5)}function c(n){return Math.atan2(n.z,-n.x)}function h(n){return Math.atan2(-n.y,Math.sqrt(n.x*n.x+n.z*n.z))}!function(n){for(var e=new Gt,l=new Gt,r=new Gt,i=0;i<t.length;i+=3)a(t[i+0],e),a(t[i+1],l),a(t[i+2],r),u(e,l,r,n)}(l=l||0),function(n){for(var t=new Gt,e=0;e<r.length;e+=3)t.x=r[e+0],t.y=r[e+1],t.z=r[e+2],t.normalize().multiplyScalar(n),r[e+0]=t.x,r[e+1]=t.y,r[e+2]=t.z}(e),function(){for(var n=new Gt,t=0;t<r.length;t+=3){n.x=r[t+0],n.y=r[t+1],n.z=r[t+2];var e=c(n)/2/Math.PI+.5,l=h(n)/Math.PI+.5;i.push(e,1-l)}(function(){for(var n=new Gt,t=new Gt,e=new Gt,l=new Gt,u=new kt,o=new kt,a=new kt,h=0,p=0;h<r.length;h+=9,p+=6){n.set(r[h+0],r[h+1],r[h+2]),t.set(r[h+3],r[h+4],r[h+5]),e.set(r[h+6],r[h+7],r[h+8]),u.set(i[p+0],i[p+1]),o.set(i[p+2],i[p+3]),a.set(i[p+4],i[p+5]),l.copy(n).add(t).add(e).divideScalar(3);var d=c(l);s(u,p+0,n,d),s(o,p+2,t,d),s(a,p+4,e,d)}})(),function(){for(var n=0;n<i.length;n+=6){var t=i[n+0],e=i[n+2],l=i[n+4],r=Math.max(t,e,l),u=Math.min(t,e,l);r>.9&&u<.1&&(t<.2&&(i[n+0]+=1),e<.2&&(i[n+2]+=1),l<.2&&(i[n+4]+=1))}}()}(),this.addAttribute("position",new Ge(r,3)),this.addAttribute("normal",new Ge(r.slice(),3)),this.addAttribute("uv",new Ge(i,2)),0===l?this.computeVertexNormals():this.normalizeNormals()}function Bi(n,t){De.call(this),this.type="TetrahedronGeometry",this.parameters={radius:n,detail:t},this.fromBufferGeometry(new Fi(n,t)),this.mergeVertices()}function Fi(n,t){Ni.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],n,t),this.type="TetrahedronBufferGeometry",this.parameters={radius:n,detail:t}}function ki(n,t){De.call(this),this.type="OctahedronGeometry",this.parameters={radius:n,detail:t},this.fromBufferGeometry(new Ui(n,t)),this.mergeVertices()}function Ui(n,t){Ni.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],n,t),this.type="OctahedronBufferGeometry",this.parameters={radius:n,detail:t}}function ji(n,t){De.call(this),this.type="IcosahedronGeometry",this.parameters={radius:n,detail:t},this.fromBufferGeometry(new Gi(n,t)),this.mergeVertices()}function Gi(n,t){var e=(1+Math.sqrt(5))/2,l=[-1,e,0,1,e,0,-1,-e,0,1,-e,0,0,-1,e,0,1,e,0,-1,-e,0,1,-e,e,0,-1,e,0,1,-e,0,-1,-e,0,1];Ni.call(this,l,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],n,t),this.type="IcosahedronBufferGeometry",this.parameters={radius:n,detail:t}}function Hi(n,t){De.call(this),this.type="DodecahedronGeometry",this.parameters={radius:n,detail:t},this.fromBufferGeometry(new Vi(n,t)),this.mergeVertices()}function Vi(n,t){var e=(1+Math.sqrt(5))/2,l=1/e,r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-l,-e,0,-l,e,0,l,-e,0,l,e,-l,-e,0,-l,e,0,l,-e,0,l,e,0,-e,0,-l,e,0,-l,-e,0,l,e,0,l];Ni.call(this,r,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],n,t),this.type="DodecahedronBufferGeometry",this.parameters={radius:n,detail:t}}function Wi(n,t,e,l,r,i){De.call(this),this.type="TubeGeometry",this.parameters={path:n,tubularSegments:t,radius:e,radialSegments:l,closed:r},void 0!==i&&console.warn("THREE.TubeGeometry: taper has been removed.");var u=new qi(n,t,e,l,r);this.tangents=u.tangents,this.normals=u.normals,this.binormals=u.binormals,this.fromBufferGeometry(u),this.mergeVertices()}function qi(n,t,e,l,r){Xe.call(this),this.type="TubeBufferGeometry",this.parameters={path:n,tubularSegments:t,radius:e,radialSegments:l,closed:r},t=t||64,e=e||1,l=l||8,r=r||!1;var i=n.computeFrenetFrames(t,r);this.tangents=i.tangents,this.normals=i.normals,this.binormals=i.binormals;var u,o,a=new Gt,s=new Gt,c=new kt,h=new Gt,p=[],d=[],f=[],m=[];function v(r){h=n.getPointAt(r/t,h);var u=i.normals[r],c=i.binormals[r];for(o=0;o<=l;o++){var f=o/l*Math.PI*2,m=Math.sin(f),v=-Math.cos(f);s.x=v*u.x+m*c.x,s.y=v*u.y+m*c.y,s.z=v*u.z+m*c.z,s.normalize(),d.push(s.x,s.y,s.z),a.x=h.x+e*s.x,a.y=h.y+e*s.y,a.z=h.z+e*s.z,p.push(a.x,a.y,a.z)}}!function(){for(u=0;u<t;u++)v(u);v(!1===r?t:0),function(){for(u=0;u<=t;u++)for(o=0;o<=l;o++)c.x=u/t,c.y=o/l,f.push(c.x,c.y)}(),function(){for(o=1;o<=t;o++)for(u=1;u<=l;u++){var n=(l+1)*(o-1)+(u-1),e=(l+1)*o+(u-1),r=(l+1)*o+u,i=(l+1)*(o-1)+u;m.push(n,e,i),m.push(e,r,i)}}()}(),this.setIndex(m),this.addAttribute("position",new Ge(p,3)),this.addAttribute("normal",new Ge(d,3)),this.addAttribute("uv",new Ge(f,2))}function Xi(n,t,e,l,r,i,u){De.call(this),this.type="TorusKnotGeometry",this.parameters={radius:n,tube:t,tubularSegments:e,radialSegments:l,p:r,q:i},void 0!==u&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new Yi(n,t,e,l,r,i)),this.mergeVertices()}function Yi(n,t,e,l,r,i){Xe.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:n,tube:t,tubularSegments:e,radialSegments:l,p:r,q:i},n=n||1,t=t||.4,e=Math.floor(e)||64,l=Math.floor(l)||8,r=r||2,i=i||3;var u,o,a=[],s=[],c=[],h=[],p=new Gt,d=new Gt,f=new Gt,m=new Gt,v=new Gt,g=new Gt,y=new Gt;for(u=0;u<=e;++u){var x=u/e*r*Math.PI*2;for(A(x,r,i,n,f),A(x+.01,r,i,n,m),g.subVectors(m,f),y.addVectors(m,f),v.crossVectors(g,y),y.crossVectors(v,g),v.normalize(),y.normalize(),o=0;o<=l;++o){var b=o/l*Math.PI*2,_=-t*Math.cos(b),w=t*Math.sin(b);p.x=f.x+(_*y.x+w*v.x),p.y=f.y+(_*y.y+w*v.y),p.z=f.z+(_*y.z+w*v.z),s.push(p.x,p.y,p.z),d.subVectors(p,f).normalize(),c.push(d.x,d.y,d.z),h.push(u/e),h.push(o/l)}}for(o=1;o<=e;o++)for(u=1;u<=l;u++){var M=(l+1)*(o-1)+(u-1),E=(l+1)*o+(u-1),S=(l+1)*o+u,T=(l+1)*(o-1)+u;a.push(M,E,T),a.push(E,S,T)}function A(n,t,e,l,r){var i=Math.cos(n),u=Math.sin(n),o=e/t*n,a=Math.cos(o);r.x=l*(2+a)*.5*i,r.y=l*(2+a)*u*.5,r.z=l*Math.sin(o)*.5}this.setIndex(a),this.addAttribute("position",new Ge(s,3)),this.addAttribute("normal",new Ge(c,3)),this.addAttribute("uv",new Ge(h,2))}function Zi(n,t,e,l,r){De.call(this),this.type="TorusGeometry",this.parameters={radius:n,tube:t,radialSegments:e,tubularSegments:l,arc:r},this.fromBufferGeometry(new Ji(n,t,e,l,r)),this.mergeVertices()}function Ji(n,t,e,l,r){Xe.call(this),this.type="TorusBufferGeometry",this.parameters={radius:n,tube:t,radialSegments:e,tubularSegments:l,arc:r},n=n||1,t=t||.4,e=Math.floor(e)||8,l=Math.floor(l)||6,r=r||2*Math.PI;var i,u,o=[],a=[],s=[],c=[],h=new Gt,p=new Gt,d=new Gt;for(i=0;i<=e;i++)for(u=0;u<=l;u++){var f=u/l*r,m=i/e*Math.PI*2;p.x=(n+t*Math.cos(m))*Math.cos(f),p.y=(n+t*Math.cos(m))*Math.sin(f),p.z=t*Math.sin(m),a.push(p.x,p.y,p.z),h.x=n*Math.cos(f),h.y=n*Math.sin(f),d.subVectors(p,h).normalize(),s.push(d.x,d.y,d.z),c.push(u/l),c.push(i/e)}for(i=1;i<=e;i++)for(u=1;u<=l;u++){var v=(l+1)*i+u-1,g=(l+1)*(i-1)+u-1,y=(l+1)*(i-1)+u,x=(l+1)*i+u;o.push(v,g,x),o.push(g,y,x)}this.setIndex(o),this.addAttribute("position",new Ge(a,3)),this.addAttribute("normal",new Ge(s,3)),this.addAttribute("uv",new Ge(c,2))}hi.prototype.isFogExp2=!0,hi.prototype.clone=function(){return new hi(this.color,this.density)},hi.prototype.toJSON=function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}},pi.prototype.isFog=!0,pi.prototype.clone=function(){return new pi(this.color,this.near,this.far)},pi.prototype.toJSON=function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}},di.prototype=Object.assign(Object.create(Pe.prototype),{constructor:di,isScene:!0,copy:function(n,t){return Pe.prototype.copy.call(this,n,t),null!==n.background&&(this.background=n.background.clone()),null!==n.fog&&(this.fog=n.fog.clone()),null!==n.overrideMaterial&&(this.overrideMaterial=n.overrideMaterial.clone()),this.autoUpdate=n.autoUpdate,this.matrixAutoUpdate=n.matrixAutoUpdate,this},toJSON:function(n){var t=Pe.prototype.toJSON.call(this,n);return null!==this.background&&(t.object.background=this.background.toJSON(n)),null!==this.fog&&(t.object.fog=this.fog.toJSON()),t},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(fi.prototype,"needsUpdate",{set:function(n){!0===n&&this.version++}}),Object.assign(fi.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setArray:function(n){if(Array.isArray(n))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==n?n.length/this.stride:0,this.array=n,this},setDynamic:function(n){return this.dynamic=n,this},copy:function(n){return this.array=new n.array.constructor(n.array),this.count=n.count,this.stride=n.stride,this.dynamic=n.dynamic,this},copyAt:function(n,t,e){n*=this.stride,e*=t.stride;for(var l=0,r=this.stride;l<r;l++)this.array[n+l]=t.array[e+l];return this},set:function(n,t){return void 0===t&&(t=0),this.array.set(n,t),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(n){return this.onUploadCallback=n,this}}),Object.defineProperties(mi.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(mi.prototype,{isInterleavedBufferAttribute:!0,setX:function(n,t){return this.data.array[n*this.data.stride+this.offset]=t,this},setY:function(n,t){return this.data.array[n*this.data.stride+this.offset+1]=t,this},setZ:function(n,t){return this.data.array[n*this.data.stride+this.offset+2]=t,this},setW:function(n,t){return this.data.array[n*this.data.stride+this.offset+3]=t,this},getX:function(n){return this.data.array[n*this.data.stride+this.offset]},getY:function(n){return this.data.array[n*this.data.stride+this.offset+1]},getZ:function(n){return this.data.array[n*this.data.stride+this.offset+2]},getW:function(n){return this.data.array[n*this.data.stride+this.offset+3]},setXY:function(n,t,e){return n=n*this.data.stride+this.offset,this.data.array[n+0]=t,this.data.array[n+1]=e,this},setXYZ:function(n,t,e,l){return n=n*this.data.stride+this.offset,this.data.array[n+0]=t,this.data.array[n+1]=e,this.data.array[n+2]=l,this},setXYZW:function(n,t,e,l,r){return n=n*this.data.stride+this.offset,this.data.array[n+0]=t,this.data.array[n+1]=e,this.data.array[n+2]=l,this.data.array[n+3]=r,this}}),vi.prototype=Object.create(pl.prototype),vi.prototype.constructor=vi,vi.prototype.isSpriteMaterial=!0,vi.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.color.copy(n.color),this.map=n.map,this.rotation=n.rotation,this.sizeAttenuation=n.sizeAttenuation,this},gi.prototype=Object.assign(Object.create(Pe.prototype),{constructor:gi,isSprite:!0,raycast:function(){var n=new Gt,t=new Gt,e=new Gt,l=new kt,r=new kt,i=new Ut,u=new Gt,o=new Gt,a=new Gt,s=new kt,c=new kt,h=new kt;function p(n,t,e,u,o,a){l.subVectors(n,e).addScalar(.5).multiply(u),void 0!==o?(r.x=a*l.x-o*l.y,r.y=o*l.x+a*l.y):r.copy(l),n.copy(t),n.x+=r.x,n.y+=r.y,n.applyMatrix4(i)}return function(l,r){t.setFromMatrixScale(this.matrixWorld),i.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld),e.setFromMatrixPosition(this.modelViewMatrix);var d,f,m=this.material.rotation;0!==m&&(f=Math.cos(m),d=Math.sin(m));var v=this.center;p(u.set(-.5,-.5,0),e,v,t,d,f),p(o.set(.5,-.5,0),e,v,t,d,f),p(a.set(.5,.5,0),e,v,t,d,f),s.set(0,0),c.set(1,0),h.set(1,1);var g=l.ray.intersectTriangle(u,o,a,!1,n);if(null!==g||(p(o.set(-.5,.5,0),e,v,t,d,f),c.set(0,1),null!==(g=l.ray.intersectTriangle(u,a,o,!1,n)))){var y=l.ray.origin.distanceTo(n);y<l.near||y>l.far||r.push({distance:y,point:n.clone(),uv:ml.getUV(n,u,o,a,s,c,h,new kt),face:null,object:this})}}}(),clone:function(){return new this.constructor(this.material).copy(this)},copy:function(n){return Pe.prototype.copy.call(this,n),void 0!==n.center&&this.center.copy(n.center),this}}),yi.prototype=Object.assign(Object.create(Pe.prototype),{constructor:yi,copy:function(n){Pe.prototype.copy.call(this,n,!1);for(var t=n.levels,e=0,l=t.length;e<l;e++){var r=t[e];this.addLevel(r.object.clone(),r.distance)}return this},addLevel:function(n,t){void 0===t&&(t=0),t=Math.abs(t);for(var e=this.levels,l=0;l<e.length&&!(t<e[l].distance);l++);e.splice(l,0,{distance:t,object:n}),this.add(n)},getObjectForDistance:function(n){for(var t=this.levels,e=1,l=t.length;e<l&&!(n<t[e].distance);e++);return t[e-1].object},raycast:(ni=new Gt,function(n,t){ni.setFromMatrixPosition(this.matrixWorld);var e=n.ray.origin.distanceTo(ni);this.getObjectForDistance(e).raycast(n,t)}),update:function(){var n=new Gt,t=new Gt;return function(e){var l=this.levels;if(l.length>1){n.setFromMatrixPosition(e.matrixWorld),t.setFromMatrixPosition(this.matrixWorld);var r=n.distanceTo(t);l[0].object.visible=!0;for(var i=1,u=l.length;i<u&&r>=l[i].distance;i++)l[i-1].object.visible=!1,l[i].object.visible=!0;for(;i<u;i++)l[i].object.visible=!1}}}(),toJSON:function(n){var t=Pe.prototype.toJSON.call(this,n);t.object.levels=[];for(var e=this.levels,l=0,r=e.length;l<r;l++){var i=e[l];t.object.levels.push({object:i.object.uuid,distance:i.distance})}return t}}),xi.prototype=Object.assign(Object.create(gl.prototype),{constructor:xi,isSkinnedMesh:!0,bind:function(n,t){this.skeleton=n,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var n=new Qt,t=this.geometry.attributes.skinWeight,e=0,l=t.count;e<l;e++){n.x=t.getX(e),n.y=t.getY(e),n.z=t.getZ(e),n.w=t.getW(e);var r=1/n.manhattanLength();r!==1/0?n.multiplyScalar(r):n.set(1,0,0,0),t.setXYZW(e,n.x,n.y,n.z,n.w)}},updateMatrixWorld:function(n){gl.prototype.updateMatrixWorld.call(this,n),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Object.assign(bi.prototype,{calculateInverses:function(){this.boneInverses=[];for(var n=0,t=this.bones.length;n<t;n++){var e=new Ut;this.bones[n]&&e.getInverse(this.bones[n].matrixWorld),this.boneInverses.push(e)}},pose:function(){var n,t,e;for(t=0,e=this.bones.length;t<e;t++)(n=this.bones[t])&&n.matrixWorld.getInverse(this.boneInverses[t]);for(t=0,e=this.bones.length;t<e;t++)(n=this.bones[t])&&(n.parent&&n.parent.isBone?(n.matrix.getInverse(n.parent.matrixWorld),n.matrix.multiply(n.matrixWorld)):n.matrix.copy(n.matrixWorld),n.matrix.decompose(n.position,n.quaternion,n.scale))},update:(ti=new Ut,ei=new Ut,function(){for(var n=this.bones,t=this.boneInverses,e=this.boneMatrices,l=this.boneTexture,r=0,i=n.length;r<i;r++){var u=n[r]?n[r].matrixWorld:ei;ti.multiplyMatrices(u,t[r]),ti.toArray(e,16*r)}void 0!==l&&(l.needsUpdate=!0)}),clone:function(){return new bi(this.bones,this.boneInverses)},getBoneByName:function(n){for(var t=0,e=this.bones.length;t<e;t++){var l=this.bones[t];if(l.name===n)return l}}}),_i.prototype=Object.assign(Object.create(Pe.prototype),{constructor:_i,isBone:!0}),wi.prototype=Object.create(pl.prototype),wi.prototype.constructor=wi,wi.prototype.isLineBasicMaterial=!0,wi.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.color.copy(n.color),this.linewidth=n.linewidth,this.linecap=n.linecap,this.linejoin=n.linejoin,this},Mi.prototype=Object.assign(Object.create(Pe.prototype),{constructor:Mi,isLine:!0,computeLineDistances:(li=new Gt,ri=new Gt,function(){var n=this.geometry;if(n.isBufferGeometry)if(null===n.index){for(var t=n.attributes.position,e=[0],l=1,r=t.count;l<r;l++)li.fromBufferAttribute(t,l-1),ri.fromBufferAttribute(t,l),e[l]=e[l-1],e[l]+=li.distanceTo(ri);n.addAttribute("lineDistance",new Ge(e,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(n.isGeometry){var i=n.vertices;for((e=n.lineDistances)[0]=0,l=1,r=i.length;l<r;l++)e[l]=e[l-1],e[l]+=i[l-1].distanceTo(i[l])}return this}),raycast:function(){var n=new Ut,t=new fl,e=new re;return function(l,r){var i=l.linePrecision,u=this.geometry,o=this.matrixWorld;if(null===u.boundingSphere&&u.computeBoundingSphere(),e.copy(u.boundingSphere),e.applyMatrix4(o),e.radius+=i,!1!==l.ray.intersectsSphere(e)){n.getInverse(o),t.copy(l.ray).applyMatrix4(n);var a=i/((this.scale.x+this.scale.y+this.scale.z)/3),s=a*a,c=new Gt,h=new Gt,p=new Gt,d=new Gt,f=this&&this.isLineSegments?2:1;if(u.isBufferGeometry){var m=u.index,v=u.attributes.position.array;if(null!==m)for(var g=m.array,y=0,x=g.length-1;y<x;y+=f){var b=g[y],_=g[y+1];c.fromArray(v,3*b),h.fromArray(v,3*_),t.distanceSqToSegment(c,h,d,p)>s||(d.applyMatrix4(this.matrixWorld),(E=l.ray.origin.distanceTo(d))<l.near||E>l.far||r.push({distance:E,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this}))}else for(y=0,x=v.length/3-1;y<x;y+=f)c.fromArray(v,3*y),h.fromArray(v,3*y+3),t.distanceSqToSegment(c,h,d,p)>s||(d.applyMatrix4(this.matrixWorld),(E=l.ray.origin.distanceTo(d))<l.near||E>l.far||r.push({distance:E,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this}))}else if(u.isGeometry){var w=u.vertices,M=w.length;for(y=0;y<M-1;y+=f){var E;t.distanceSqToSegment(w[y],w[y+1],d,p)>s||(d.applyMatrix4(this.matrixWorld),(E=l.ray.origin.distanceTo(d))<l.near||E>l.far||r.push({distance:E,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this}))}}}}}(),copy:function(n){return Pe.prototype.copy.call(this,n),this.geometry.copy(n.geometry),this.material.copy(n.material),this},clone:function(){return(new this.constructor).copy(this)}}),Ei.prototype=Object.assign(Object.create(Mi.prototype),{constructor:Ei,isLineSegments:!0,computeLineDistances:function(){var n=new Gt,t=new Gt;return function(){var e=this.geometry;if(e.isBufferGeometry)if(null===e.index){for(var l=e.attributes.position,r=[],i=0,u=l.count;i<u;i+=2)n.fromBufferAttribute(l,i),t.fromBufferAttribute(l,i+1),r[i]=0===i?0:r[i-1],r[i+1]=r[i]+n.distanceTo(t);e.addAttribute("lineDistance",new Ge(r,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){var o=e.vertices;for(r=e.lineDistances,i=0,u=o.length;i<u;i+=2)n.copy(o[i]),t.copy(o[i+1]),r[i]=0===i?0:r[i-1],r[i+1]=r[i]+n.distanceTo(t)}return this}}()}),Si.prototype=Object.assign(Object.create(Mi.prototype),{constructor:Si,isLineLoop:!0}),Ti.prototype=Object.create(pl.prototype),Ti.prototype.constructor=Ti,Ti.prototype.isPointsMaterial=!0,Ti.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.color.copy(n.color),this.map=n.map,this.size=n.size,this.sizeAttenuation=n.sizeAttenuation,this.morphTargets=n.morphTargets,this},Ai.prototype=Object.assign(Object.create(Pe.prototype),{constructor:Ai,isPoints:!0,raycast:function(){var n=new Ut,t=new fl,e=new re;return function(l,r){var i=this,u=this.geometry,o=this.matrixWorld,a=l.params.Points.threshold;if(null===u.boundingSphere&&u.computeBoundingSphere(),e.copy(u.boundingSphere),e.applyMatrix4(o),e.radius+=a,!1!==l.ray.intersectsSphere(e)){n.getInverse(o),t.copy(l.ray).applyMatrix4(n);var s=a/((this.scale.x+this.scale.y+this.scale.z)/3),c=s*s,h=new Gt,p=new Gt;if(u.isBufferGeometry){var d=u.index,f=u.attributes.position.array;if(null!==d)for(var m=d.array,v=0,g=m.length;v<g;v++){var y=m[v];h.fromArray(f,3*y),_(h,y)}else{v=0;for(var x=f.length/3;v<x;v++)h.fromArray(f,3*v),_(h,v)}}else{var b=u.vertices;for(v=0,x=b.length;v<x;v++)_(b[v],v)}}function _(n,e){var u=t.distanceSqToPoint(n);if(u<c){t.closestPointToPoint(n,p),p.applyMatrix4(o);var a=l.ray.origin.distanceTo(p);if(a<l.near||a>l.far)return;r.push({distance:a,distanceToRay:Math.sqrt(u),point:p.clone(),index:e,face:null,object:i})}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Li.prototype=Object.assign(Object.create(Kt.prototype),{constructor:Li,isVideoTexture:!0,update:function(){var n=this.image;n.readyState>=n.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),Pi.prototype=Object.create(Kt.prototype),Pi.prototype.constructor=Pi,Pi.prototype.isCompressedTexture=!0,Ci.prototype=Object.create(Kt.prototype),Ci.prototype.constructor=Ci,Ci.prototype.isCanvasTexture=!0,Ri.prototype=Object.create(Kt.prototype),Ri.prototype.constructor=Ri,Ri.prototype.isDepthTexture=!0,Oi.prototype=Object.create(Xe.prototype),Oi.prototype.constructor=Oi,Di.prototype=Object.create(De.prototype),Di.prototype.constructor=Di,Ii.prototype=Object.create(Xe.prototype),Ii.prototype.constructor=Ii,zi.prototype=Object.create(De.prototype),zi.prototype.constructor=zi,Ni.prototype=Object.create(Xe.prototype),Ni.prototype.constructor=Ni,Bi.prototype=Object.create(De.prototype),Bi.prototype.constructor=Bi,Fi.prototype=Object.create(Ni.prototype),Fi.prototype.constructor=Fi,ki.prototype=Object.create(De.prototype),ki.prototype.constructor=ki,Ui.prototype=Object.create(Ni.prototype),Ui.prototype.constructor=Ui,ji.prototype=Object.create(De.prototype),ji.prototype.constructor=ji,Gi.prototype=Object.create(Ni.prototype),Gi.prototype.constructor=Gi,Hi.prototype=Object.create(De.prototype),Hi.prototype.constructor=Hi,Vi.prototype=Object.create(Ni.prototype),Vi.prototype.constructor=Vi,Wi.prototype=Object.create(De.prototype),Wi.prototype.constructor=Wi,qi.prototype=Object.create(Xe.prototype),qi.prototype.constructor=qi,Xi.prototype=Object.create(De.prototype),Xi.prototype.constructor=Xi,Yi.prototype=Object.create(Xe.prototype),Yi.prototype.constructor=Yi,Zi.prototype=Object.create(De.prototype),Zi.prototype.constructor=Zi,Ji.prototype=Object.create(Xe.prototype),Ji.prototype.constructor=Ji;function Ki(n,t,e,l,r){var i,u;if(r===function(n,t,e,l){for(var r=0,i=t,u=e-l;i<e;i+=l)r+=(n[u]-n[i])*(n[i+1]+n[u+1]),u=i;return r}(n,t,e,l)>0)for(i=t;i<e;i+=l)u=mu(i,n[i],n[i+1],u);else for(i=e-l;i>=t;i-=l)u=mu(i,n[i],n[i+1],u);return u&&hu(u,u.next)&&(vu(u),u=u.next),u}function Qi(n,t){if(!n)return n;t||(t=n);var e,l=n;do{if(e=!1,l.steiner||!hu(l,l.next)&&0!==cu(l.prev,l,l.next))l=l.next;else{if(vu(l),(l=t=l.prev)===l.next)break;e=!0}}while(e||l!==t);return t}function $i(n,t,e,l,r,i,u){if(n){!u&&i&&function(n,t,e,l){var r=n;do{null===r.z&&(r.z=uu(r.x,r.y,t,e,l)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==n);r.prevZ.nextZ=null,r.prevZ=null,function(n){var t,e,l,r,i,u,o,a,s=1;do{for(e=n,n=null,i=null,u=0;e;){for(u++,l=e,o=0,t=0;t<s&&(o++,l=l.nextZ);t++);for(a=s;o>0||a>0&&l;)0!==o&&(0===a||!l||e.z<=l.z)?(r=e,e=e.nextZ,o--):(r=l,l=l.nextZ,a--),i?i.nextZ=r:n=r,r.prevZ=i,i=r;e=l}i.nextZ=null,s*=2}while(u>1)}(r)}(n,l,r,i);for(var o,a,s=n;n.prev!==n.next;)if(o=n.prev,a=n.next,i?tu(n,l,r,i):nu(n))t.push(o.i/e),t.push(n.i/e),t.push(a.i/e),vu(n),n=a.next,s=a.next;else if((n=a)===s){u?1===u?$i(n=eu(n,t,e),t,e,l,r,i,2):2===u&&lu(n,t,e,l,r,i):$i(Qi(n),t,e,l,r,i,1);break}}}function nu(n){var t=n.prev,e=n,l=n.next;if(cu(t,e,l)>=0)return!1;for(var r=n.next.next;r!==n.prev;){if(au(t.x,t.y,e.x,e.y,l.x,l.y,r.x,r.y)&&cu(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function tu(n,t,e,l){var r=n.prev,i=n,u=n.next;if(cu(r,i,u)>=0)return!1;for(var o=r.x<i.x?r.x<u.x?r.x:u.x:i.x<u.x?i.x:u.x,a=r.y<i.y?r.y<u.y?r.y:u.y:i.y<u.y?i.y:u.y,s=r.x>i.x?r.x>u.x?r.x:u.x:i.x>u.x?i.x:u.x,c=r.y>i.y?r.y>u.y?r.y:u.y:i.y>u.y?i.y:u.y,h=uu(o,a,t,e,l),p=uu(s,c,t,e,l),d=n.nextZ;d&&d.z<=p;){if(d!==n.prev&&d!==n.next&&au(r.x,r.y,i.x,i.y,u.x,u.y,d.x,d.y)&&cu(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(d=n.prevZ;d&&d.z>=h;){if(d!==n.prev&&d!==n.next&&au(r.x,r.y,i.x,i.y,u.x,u.y,d.x,d.y)&&cu(d.prev,d,d.next)>=0)return!1;d=d.prevZ}return!0}function eu(n,t,e){var l=n;do{var r=l.prev,i=l.next.next;!hu(r,i)&&pu(r,l,l.next,i)&&du(r,i)&&du(i,r)&&(t.push(r.i/e),t.push(l.i/e),t.push(i.i/e),vu(l),vu(l.next),l=n=i),l=l.next}while(l!==n);return l}function lu(n,t,e,l,r,i){var u=n;do{for(var o=u.next.next;o!==u.prev;){if(u.i!==o.i&&su(u,o)){var a=fu(u,o);return u=Qi(u,u.next),a=Qi(a,a.next),$i(u,t,e,l,r,i),void $i(a,t,e,l,r,i)}o=o.next}u=u.next}while(u!==n)}function ru(n,t){return n.x-t.x}function iu(n,t){if(t=function(n,t){var e,l=t,r=n.x,i=n.y,u=-1/0;do{if(i<=l.y&&i>=l.next.y&&l.next.y!==l.y){var o=l.x+(i-l.y)*(l.next.x-l.x)/(l.next.y-l.y);if(o<=r&&o>u){if(u=o,o===r){if(i===l.y)return l;if(i===l.next.y)return l.next}e=l.x<l.next.x?l:l.next}}l=l.next}while(l!==t);if(!e)return null;if(r===u)return e.prev;var a,s=e,c=e.x,h=e.y,p=1/0;for(l=e.next;l!==s;)r>=l.x&&l.x>=c&&r!==l.x&&au(i<h?r:u,i,c,h,i<h?u:r,i,l.x,l.y)&&((a=Math.abs(i-l.y)/(r-l.x))<p||a===p&&l.x>e.x)&&du(l,n)&&(e=l,p=a),l=l.next;return e}(n,t),t){var e=fu(t,n);Qi(e,e.next)}}function uu(n,t,e,l,r){return(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-e)*r)|n<<8))|n<<4))|n<<2))|n<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-l)*r)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function ou(n){var t=n,e=n;do{t.x<e.x&&(e=t),t=t.next}while(t!==n);return e}function au(n,t,e,l,r,i,u,o){return(r-u)*(t-o)-(n-u)*(i-o)>=0&&(n-u)*(l-o)-(e-u)*(t-o)>=0&&(e-u)*(i-o)-(r-u)*(l-o)>=0}function su(n,t){return n.next.i!==t.i&&n.prev.i!==t.i&&!function(n,t){var e=n;do{if(e.i!==n.i&&e.next.i!==n.i&&e.i!==t.i&&e.next.i!==t.i&&pu(e,e.next,n,t))return!0;e=e.next}while(e!==n);return!1}(n,t)&&du(n,t)&&du(t,n)&&function(n,t){var e=n,l=!1,r=(n.x+t.x)/2,i=(n.y+t.y)/2;do{e.y>i!=e.next.y>i&&e.next.y!==e.y&&r<(e.next.x-e.x)*(i-e.y)/(e.next.y-e.y)+e.x&&(l=!l),e=e.next}while(e!==n);return l}(n,t)}function cu(n,t,e){return(t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y)}function hu(n,t){return n.x===t.x&&n.y===t.y}function pu(n,t,e,l){return!!(hu(n,t)&&hu(e,l)||hu(n,l)&&hu(e,t))||cu(n,t,e)>0!=cu(n,t,l)>0&&cu(e,l,n)>0!=cu(e,l,t)>0}function du(n,t){return cu(n.prev,n,n.next)<0?cu(n,t,n.next)>=0&&cu(n,n.prev,t)>=0:cu(n,t,n.prev)<0||cu(n,n.next,t)<0}function fu(n,t){var e=new gu(n.i,n.x,n.y),l=new gu(t.i,t.x,t.y),r=n.next,i=t.prev;return n.next=t,t.prev=n,e.next=r,r.prev=e,l.next=e,e.prev=l,i.next=l,l.prev=i,l}function mu(n,t,e,l){var r=new gu(n,t,e);return l?(r.next=l.next,r.prev=l,l.next.prev=r,l.next=r):(r.prev=r,r.next=r),r}function vu(n){n.next.prev=n.prev,n.prev.next=n.next,n.prevZ&&(n.prevZ.nextZ=n.nextZ),n.nextZ&&(n.nextZ.prevZ=n.prevZ)}function gu(n,t,e){this.i=n,this.x=t,this.y=e,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var yu={area:function(n){for(var t=n.length,e=0,l=t-1,r=0;r<t;l=r++)e+=n[l].x*n[r].y-n[r].x*n[l].y;return.5*e},isClockWise:function(n){return yu.area(n)<0},triangulateShape:function(n,t){var e=[],l=[],r=[];xu(n),bu(e,n);var i=n.length;t.forEach(xu);for(var u=0;u<t.length;u++)l.push(i),i+=t[u].length,bu(e,t[u]);var o=function(n,t,e){e=e||2;var l,r,i,u,o,a,s,c=t&&t.length,h=c?t[0]*e:n.length,p=Ki(n,0,h,e,!0),d=[];if(!p)return d;if(c&&(p=function(n,t,e,l){var r,i,u,o=[];for(r=0,i=t.length;r<i;r++)(u=Ki(n,t[r]*l,r<i-1?t[r+1]*l:n.length,l,!1))===u.next&&(u.steiner=!0),o.push(ou(u));for(o.sort(ru),r=0;r<o.length;r++)iu(o[r],e),e=Qi(e,e.next);return e}(n,t,p,e)),n.length>80*e){l=i=n[0],r=u=n[1];for(var f=e;f<h;f+=e)(o=n[f])<l&&(l=o),(a=n[f+1])<r&&(r=a),o>i&&(i=o),a>u&&(u=a);s=0!==(s=Math.max(i-l,u-r))?1/s:0}return $i(p,d,e,l,r,s),d}(e,l);for(u=0;u<o.length;u+=3)r.push(o.slice(u,u+3));return r}};function xu(n){var t=n.length;t>2&&n[t-1].equals(n[0])&&n.pop()}function bu(n,t){for(var e=0;e<t.length;e++)n.push(t[e].x),n.push(t[e].y)}function _u(n,t){De.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:n,options:t},this.fromBufferGeometry(new wu(n,t)),this.mergeVertices()}function wu(n,t){Xe.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:n,options:t},n=Array.isArray(n)?n:[n];for(var e=this,l=[],r=[],i=0,u=n.length;i<u;i++)o(n[i]);function o(n){var i=[],u=void 0!==t.curveSegments?t.curveSegments:12,o=void 0!==t.steps?t.steps:1,a=void 0!==t.depth?t.depth:100,s=void 0===t.bevelEnabled||t.bevelEnabled,c=void 0!==t.bevelThickness?t.bevelThickness:6,h=void 0!==t.bevelSize?t.bevelSize:c-2,p=void 0!==t.bevelSegments?t.bevelSegments:3,d=t.extrudePath,f=void 0!==t.UVGenerator?t.UVGenerator:Mu;void 0!==t.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),a=t.amount);var m,v,g,y,x,b,_,w,M=!1;d&&(m=d.getSpacedPoints(o),M=!0,s=!1,v=d.computeFrenetFrames(o,!1),g=new Gt,y=new Gt,x=new Gt),s||(p=0,c=0,h=0);var E=n.extractPoints(u),S=E.shape,T=E.holes;if(!yu.isClockWise(S))for(S=S.reverse(),_=0,w=T.length;_<w;_++)b=T[_],yu.isClockWise(b)&&(T[_]=b.reverse());var A=yu.triangulateShape(S,T),L=S;for(_=0,w=T.length;_<w;_++)b=T[_],S=S.concat(b);function P(n,t,e){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(e).add(n)}var C,R,O,D,I,z,N=S.length,B=A.length;function F(n,t,e){var l,r,i,u=n.x-t.x,o=n.y-t.y,a=e.x-n.x,s=e.y-n.y,c=u*u+o*o,h=u*s-o*a;if(Math.abs(h)>Number.EPSILON){var p=Math.sqrt(c),d=Math.sqrt(a*a+s*s),f=t.x-o/p,m=t.y+u/p,v=((e.x-s/d-f)*s-(e.y+a/d-m)*a)/(u*s-o*a),g=(l=f+u*v-n.x)*l+(r=m+o*v-n.y)*r;if(g<=2)return new kt(l,r);i=Math.sqrt(g/2)}else{var y=!1;u>Number.EPSILON?a>Number.EPSILON&&(y=!0):u<-Number.EPSILON?a<-Number.EPSILON&&(y=!0):Math.sign(o)===Math.sign(s)&&(y=!0),y?(l=-o,r=u,i=Math.sqrt(c)):(l=u,r=o,i=Math.sqrt(c/2))}return new kt(l/i,r/i)}for(var k=[],U=0,j=L.length,G=j-1,H=U+1;U<j;U++,G++,H++)G===j&&(G=0),H===j&&(H=0),k[U]=F(L[U],L[G],L[H]);var V,W,q=[],X=k.concat();for(_=0,w=T.length;_<w;_++){for(b=T[_],V=[],U=0,G=(j=b.length)-1,H=U+1;U<j;U++,G++,H++)G===j&&(G=0),H===j&&(H=0),V[U]=F(b[U],b[G],b[H]);q.push(V),X=X.concat(V)}for(C=0;C<p;C++){for(O=C/p,D=c*Math.cos(O*Math.PI/2),R=h*Math.sin(O*Math.PI/2),U=0,j=L.length;U<j;U++)Z((I=P(L[U],k[U],R)).x,I.y,-D);for(_=0,w=T.length;_<w;_++)for(b=T[_],V=q[_],U=0,j=b.length;U<j;U++)Z((I=P(b[U],V[U],R)).x,I.y,-D)}for(R=h,U=0;U<N;U++)I=s?P(S[U],X[U],R):S[U],M?(y.copy(v.normals[0]).multiplyScalar(I.x),g.copy(v.binormals[0]).multiplyScalar(I.y),x.copy(m[0]).add(y).add(g),Z(x.x,x.y,x.z)):Z(I.x,I.y,0);for(W=1;W<=o;W++)for(U=0;U<N;U++)I=s?P(S[U],X[U],R):S[U],M?(y.copy(v.normals[W]).multiplyScalar(I.x),g.copy(v.binormals[W]).multiplyScalar(I.y),x.copy(m[W]).add(y).add(g),Z(x.x,x.y,x.z)):Z(I.x,I.y,a/o*W);for(C=p-1;C>=0;C--){for(O=C/p,D=c*Math.cos(O*Math.PI/2),R=h*Math.sin(O*Math.PI/2),U=0,j=L.length;U<j;U++)Z((I=P(L[U],k[U],R)).x,I.y,a+D);for(_=0,w=T.length;_<w;_++)for(b=T[_],V=q[_],U=0,j=b.length;U<j;U++)I=P(b[U],V[U],R),M?Z(I.x,I.y+m[o-1].y,m[o-1].x+D):Z(I.x,I.y,a+D)}function Y(n,t){var e,l;for(U=n.length;--U>=0;){e=U,(l=U-1)<0&&(l=n.length-1);var r=0,i=o+2*p;for(r=0;r<i;r++){var u=N*r,a=N*(r+1);K(t+e+u,t+l+u,t+l+a,t+e+a)}}}function Z(n,t,e){i.push(n),i.push(t),i.push(e)}function J(n,t,r){Q(n),Q(t),Q(r);var i=l.length/3,u=f.generateTopUV(e,l,i-3,i-2,i-1);$(u[0]),$(u[1]),$(u[2])}function K(n,t,r,i){Q(n),Q(t),Q(i),Q(t),Q(r),Q(i);var u=l.length/3,o=f.generateSideWallUV(e,l,u-6,u-3,u-2,u-1);$(o[0]),$(o[1]),$(o[3]),$(o[1]),$(o[2]),$(o[3])}function Q(n){l.push(i[3*n+0]),l.push(i[3*n+1]),l.push(i[3*n+2])}function $(n){r.push(n.x),r.push(n.y)}!function(){var n=l.length/3;if(s){var t=0,r=N*t;for(U=0;U<B;U++)J((z=A[U])[2]+r,z[1]+r,z[0]+r);for(r=N*(t=o+2*p),U=0;U<B;U++)J((z=A[U])[0]+r,z[1]+r,z[2]+r)}else{for(U=0;U<B;U++)J((z=A[U])[2],z[1],z[0]);for(U=0;U<B;U++)J((z=A[U])[0]+N*o,z[1]+N*o,z[2]+N*o)}e.addGroup(n,l.length/3-n,0)}(),function(){var n=l.length/3,t=0;for(Y(L,t),t+=L.length,_=0,w=T.length;_<w;_++)Y(b=T[_],t),t+=b.length;e.addGroup(n,l.length/3-n,1)}()}this.addAttribute("position",new Ge(l,3)),this.addAttribute("uv",new Ge(r,2)),this.computeVertexNormals()}_u.prototype=Object.create(De.prototype),_u.prototype.constructor=_u,_u.prototype.toJSON=function(){var n=De.prototype.toJSON.call(this);return Eu(this.parameters.shapes,this.parameters.options,n)},wu.prototype=Object.create(Xe.prototype),wu.prototype.constructor=wu,wu.prototype.toJSON=function(){var n=Xe.prototype.toJSON.call(this);return Eu(this.parameters.shapes,this.parameters.options,n)};var Mu={generateTopUV:function(n,t,e,l,r){var i=t[3*e],u=t[3*e+1],o=t[3*l],a=t[3*l+1],s=t[3*r],c=t[3*r+1];return[new kt(i,u),new kt(o,a),new kt(s,c)]},generateSideWallUV:function(n,t,e,l,r,i){var u=t[3*e],o=t[3*e+1],a=t[3*e+2],s=t[3*l],c=t[3*l+1],h=t[3*l+2],p=t[3*r],d=t[3*r+1],f=t[3*r+2],m=t[3*i],v=t[3*i+1],g=t[3*i+2];return Math.abs(o-c)<.01?[new kt(u,1-a),new kt(s,1-h),new kt(p,1-f),new kt(m,1-g)]:[new kt(o,1-a),new kt(c,1-h),new kt(d,1-f),new kt(v,1-g)]}};function Eu(n,t,e){if(e.shapes=[],Array.isArray(n))for(var l=0,r=n.length;l<r;l++){var i=n[l];e.shapes.push(i.uuid)}else e.shapes.push(n.uuid);return void 0!==t.extrudePath&&(e.options.extrudePath=t.extrudePath.toJSON()),e}function Su(n,t){De.call(this),this.type="TextGeometry",this.parameters={text:n,parameters:t},this.fromBufferGeometry(new Tu(n,t)),this.mergeVertices()}function Tu(n,t){var e=(t=t||{}).font;if(!e||!e.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new De;var l=e.generateShapes(n,t.size);t.depth=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),wu.call(this,l,t),this.type="TextBufferGeometry"}function Au(n,t,e,l,r,i,u){De.call(this),this.type="SphereGeometry",this.parameters={radius:n,widthSegments:t,heightSegments:e,phiStart:l,phiLength:r,thetaStart:i,thetaLength:u},this.fromBufferGeometry(new Lu(n,t,e,l,r,i,u)),this.mergeVertices()}function Lu(n,t,e,l,r,i,u){Xe.call(this),this.type="SphereBufferGeometry",this.parameters={radius:n,widthSegments:t,heightSegments:e,phiStart:l,phiLength:r,thetaStart:i,thetaLength:u},n=n||1,t=Math.max(3,Math.floor(t)||8),e=Math.max(2,Math.floor(e)||6),l=void 0!==l?l:0,r=void 0!==r?r:2*Math.PI;var o,a,s=(i=void 0!==i?i:0)+(u=void 0!==u?u:Math.PI),c=0,h=[],p=new Gt,d=new Gt,f=[],m=[],v=[],g=[];for(a=0;a<=e;a++){var y=[],x=a/e;for(o=0;o<=t;o++){var b=o/t;p.x=-n*Math.cos(l+b*r)*Math.sin(i+x*u),p.y=n*Math.cos(i+x*u),p.z=n*Math.sin(l+b*r)*Math.sin(i+x*u),m.push(p.x,p.y,p.z),d.set(p.x,p.y,p.z).normalize(),v.push(d.x,d.y,d.z),g.push(b,1-x),y.push(c++)}h.push(y)}for(a=0;a<e;a++)for(o=0;o<t;o++){var _=h[a][o+1],w=h[a][o],M=h[a+1][o],E=h[a+1][o+1];(0!==a||i>0)&&f.push(_,w,E),(a!==e-1||s<Math.PI)&&f.push(w,M,E)}this.setIndex(f),this.addAttribute("position",new Ge(m,3)),this.addAttribute("normal",new Ge(v,3)),this.addAttribute("uv",new Ge(g,2))}function Pu(n,t,e,l,r,i){De.call(this),this.type="RingGeometry",this.parameters={innerRadius:n,outerRadius:t,thetaSegments:e,phiSegments:l,thetaStart:r,thetaLength:i},this.fromBufferGeometry(new Cu(n,t,e,l,r,i)),this.mergeVertices()}function Cu(n,t,e,l,r,i){Xe.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:n,outerRadius:t,thetaSegments:e,phiSegments:l,thetaStart:r,thetaLength:i},n=n||.5,t=t||1,r=void 0!==r?r:0,i=void 0!==i?i:2*Math.PI,e=void 0!==e?Math.max(3,e):8;var u,o,a,s=[],c=[],h=[],p=[],d=n,f=(t-n)/(l=void 0!==l?Math.max(1,l):1),m=new Gt,v=new kt;for(o=0;o<=l;o++){for(a=0;a<=e;a++)u=r+a/e*i,m.x=d*Math.cos(u),m.y=d*Math.sin(u),c.push(m.x,m.y,m.z),h.push(0,0,1),v.x=(m.x/t+1)/2,v.y=(m.y/t+1)/2,p.push(v.x,v.y);d+=f}for(o=0;o<l;o++){var g=o*(e+1);for(a=0;a<e;a++){var y=u=a+g,x=u+e+1,b=u+e+2,_=u+1;s.push(y,x,_),s.push(x,b,_)}}this.setIndex(s),this.addAttribute("position",new Ge(c,3)),this.addAttribute("normal",new Ge(h,3)),this.addAttribute("uv",new Ge(p,2))}function Ru(n,t,e,l){De.call(this),this.type="LatheGeometry",this.parameters={points:n,segments:t,phiStart:e,phiLength:l},this.fromBufferGeometry(new Ou(n,t,e,l)),this.mergeVertices()}function Ou(n,t,e,l){Xe.call(this),this.type="LatheBufferGeometry",this.parameters={points:n,segments:t,phiStart:e,phiLength:l},t=Math.floor(t)||12,e=e||0,l=l||2*Math.PI,l=Ft.clamp(l,0,2*Math.PI);var r,i,u,o=[],a=[],s=[],c=1/t,h=new Gt,p=new kt;for(i=0;i<=t;i++){var d=e+i*c*l,f=Math.sin(d),m=Math.cos(d);for(u=0;u<=n.length-1;u++)h.x=n[u].x*f,h.y=n[u].y,h.z=n[u].x*m,a.push(h.x,h.y,h.z),p.x=i/t,p.y=u/(n.length-1),s.push(p.x,p.y)}for(i=0;i<t;i++)for(u=0;u<n.length-1;u++){var v=r=u+i*n.length,g=r+n.length,y=r+n.length+1,x=r+1;o.push(v,g,x),o.push(g,y,x)}if(this.setIndex(o),this.addAttribute("position",new Ge(a,3)),this.addAttribute("uv",new Ge(s,2)),this.computeVertexNormals(),l===2*Math.PI){var b=this.attributes.normal.array,_=new Gt,w=new Gt,M=new Gt;for(r=t*n.length*3,i=0,u=0;i<n.length;i++,u+=3)_.x=b[u+0],_.y=b[u+1],_.z=b[u+2],w.x=b[r+u+0],w.y=b[r+u+1],w.z=b[r+u+2],M.addVectors(_,w).normalize(),b[u+0]=b[r+u+0]=M.x,b[u+1]=b[r+u+1]=M.y,b[u+2]=b[r+u+2]=M.z}}function Du(n,t){De.call(this),this.type="ShapeGeometry","object"==typeof t&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),t=t.curveSegments),this.parameters={shapes:n,curveSegments:t},this.fromBufferGeometry(new Iu(n,t)),this.mergeVertices()}function Iu(n,t){Xe.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:n,curveSegments:t},t=t||12;var e=[],l=[],r=[],i=[],u=0,o=0;if(!1===Array.isArray(n))s(n);else for(var a=0;a<n.length;a++)s(n[a]),this.addGroup(u,o,a),u+=o,o=0;function s(n){var u,a,s,c=l.length/3,h=n.extractPoints(t),p=h.shape,d=h.holes;for(!1===yu.isClockWise(p)&&(p=p.reverse()),u=0,a=d.length;u<a;u++)s=d[u],!0===yu.isClockWise(s)&&(d[u]=s.reverse());var f=yu.triangulateShape(p,d);for(u=0,a=d.length;u<a;u++)s=d[u],p=p.concat(s);for(u=0,a=p.length;u<a;u++){var m=p[u];l.push(m.x,m.y,0),r.push(0,0,1),i.push(m.x,m.y)}for(u=0,a=f.length;u<a;u++){var v=f[u],g=v[0]+c,y=v[1]+c,x=v[2]+c;e.push(g,y,x),o+=3}}this.setIndex(e),this.addAttribute("position",new Ge(l,3)),this.addAttribute("normal",new Ge(r,3)),this.addAttribute("uv",new Ge(i,2))}function zu(n,t){if(t.shapes=[],Array.isArray(n))for(var e=0,l=n.length;e<l;e++){var r=n[e];t.shapes.push(r.uuid)}else t.shapes.push(n.uuid);return t}function Nu(n,t){Xe.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:t},t=void 0!==t?t:1;var e,l,r,i,u=[],o=Math.cos(Ft.DEG2RAD*t),a=[0,0],s={},c=["a","b","c"];n.isBufferGeometry?(i=new De).fromBufferGeometry(n):i=n.clone(),i.mergeVertices(),i.computeFaceNormals();for(var h=i.vertices,p=i.faces,d=0,f=p.length;d<f;d++)for(var m=p[d],v=0;v<3;v++)e=m[c[v]],l=m[c[(v+1)%3]],a[0]=Math.min(e,l),a[1]=Math.max(e,l),void 0===s[r=a[0]+","+a[1]]?s[r]={index1:a[0],index2:a[1],face1:d,face2:void 0}:s[r].face2=d;for(r in s){var g=s[r];if(void 0===g.face2||p[g.face1].normal.dot(p[g.face2].normal)<=o){var y=h[g.index1];u.push(y.x,y.y,y.z),y=h[g.index2],u.push(y.x,y.y,y.z)}}this.addAttribute("position",new Ge(u,3))}function Bu(n,t,e,l,r,i,u,o){De.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:n,radiusBottom:t,height:e,radialSegments:l,heightSegments:r,openEnded:i,thetaStart:u,thetaLength:o},this.fromBufferGeometry(new Fu(n,t,e,l,r,i,u,o)),this.mergeVertices()}function Fu(n,t,e,l,r,i,u,o){Xe.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:n,radiusBottom:t,height:e,radialSegments:l,heightSegments:r,openEnded:i,thetaStart:u,thetaLength:o};var a=this;n=void 0!==n?n:1,t=void 0!==t?t:1,e=e||1,l=Math.floor(l)||8,r=Math.floor(r)||1,i=void 0!==i&&i,u=void 0!==u?u:0,o=void 0!==o?o:2*Math.PI;var s=[],c=[],h=[],p=[],d=0,f=[],m=e/2,v=0;function g(e){var r,i,f,g=new kt,y=new Gt,x=0,b=!0===e?n:t,_=!0===e?1:-1;for(i=d,r=1;r<=l;r++)c.push(0,m*_,0),h.push(0,_,0),p.push(.5,.5),d++;for(f=d,r=0;r<=l;r++){var w=r/l*o+u,M=Math.cos(w),E=Math.sin(w);y.x=b*E,y.y=m*_,y.z=b*M,c.push(y.x,y.y,y.z),h.push(0,_,0),g.x=.5*M+.5,g.y=.5*E*_+.5,p.push(g.x,g.y),d++}for(r=0;r<l;r++){var S=i+r,T=f+r;!0===e?s.push(T,T+1,S):s.push(T+1,T,S),x+=3}a.addGroup(v,x,!0===e?1:2),v+=x}!function(){var i,g,y=new Gt,x=new Gt,b=0,_=(t-n)/e;for(g=0;g<=r;g++){var w=[],M=g/r,E=M*(t-n)+n;for(i=0;i<=l;i++){var S=i/l,T=S*o+u,A=Math.sin(T),L=Math.cos(T);x.x=E*A,x.y=-M*e+m,x.z=E*L,c.push(x.x,x.y,x.z),y.set(A,_,L).normalize(),h.push(y.x,y.y,y.z),p.push(S,1-M),w.push(d++)}f.push(w)}for(i=0;i<l;i++)for(g=0;g<r;g++){var P=f[g][i],C=f[g+1][i],R=f[g+1][i+1],O=f[g][i+1];s.push(P,C,O),s.push(C,R,O),b+=6}a.addGroup(v,b,0),v+=b}(),!1===i&&(n>0&&g(!0),t>0&&g(!1)),this.setIndex(s),this.addAttribute("position",new Ge(c,3)),this.addAttribute("normal",new Ge(h,3)),this.addAttribute("uv",new Ge(p,2))}function ku(n,t,e,l,r,i,u){Bu.call(this,0,n,t,e,l,r,i,u),this.type="ConeGeometry",this.parameters={radius:n,height:t,radialSegments:e,heightSegments:l,openEnded:r,thetaStart:i,thetaLength:u}}function Uu(n,t,e,l,r,i,u){Fu.call(this,0,n,t,e,l,r,i,u),this.type="ConeBufferGeometry",this.parameters={radius:n,height:t,radialSegments:e,heightSegments:l,openEnded:r,thetaStart:i,thetaLength:u}}function ju(n,t,e,l){De.call(this),this.type="CircleGeometry",this.parameters={radius:n,segments:t,thetaStart:e,thetaLength:l},this.fromBufferGeometry(new Gu(n,t,e,l)),this.mergeVertices()}function Gu(n,t,e,l){Xe.call(this),this.type="CircleBufferGeometry",this.parameters={radius:n,segments:t,thetaStart:e,thetaLength:l},n=n||1,t=void 0!==t?Math.max(3,t):8,e=void 0!==e?e:0,l=void 0!==l?l:2*Math.PI;var r,i,u=[],o=[],a=[],s=[],c=new Gt,h=new kt;for(o.push(0,0,0),a.push(0,0,1),s.push(.5,.5),i=0,r=3;i<=t;i++,r+=3){var p=e+i/t*l;c.x=n*Math.cos(p),c.y=n*Math.sin(p),o.push(c.x,c.y,c.z),a.push(0,0,1),h.x=(o[r]/n+1)/2,h.y=(o[r+1]/n+1)/2,s.push(h.x,h.y)}for(r=1;r<=t;r++)u.push(r,r+1,0);this.setIndex(u),this.addAttribute("position",new Ge(o,3)),this.addAttribute("normal",new Ge(a,3)),this.addAttribute("uv",new Ge(s,2))}Su.prototype=Object.create(De.prototype),Su.prototype.constructor=Su,Tu.prototype=Object.create(wu.prototype),Tu.prototype.constructor=Tu,Au.prototype=Object.create(De.prototype),Au.prototype.constructor=Au,Lu.prototype=Object.create(Xe.prototype),Lu.prototype.constructor=Lu,Pu.prototype=Object.create(De.prototype),Pu.prototype.constructor=Pu,Cu.prototype=Object.create(Xe.prototype),Cu.prototype.constructor=Cu,Ru.prototype=Object.create(De.prototype),Ru.prototype.constructor=Ru,Ou.prototype=Object.create(Xe.prototype),Ou.prototype.constructor=Ou,Du.prototype=Object.create(De.prototype),Du.prototype.constructor=Du,Du.prototype.toJSON=function(){var n=De.prototype.toJSON.call(this);return zu(this.parameters.shapes,n)},Iu.prototype=Object.create(Xe.prototype),Iu.prototype.constructor=Iu,Iu.prototype.toJSON=function(){var n=Xe.prototype.toJSON.call(this);return zu(this.parameters.shapes,n)},Nu.prototype=Object.create(Xe.prototype),Nu.prototype.constructor=Nu,Bu.prototype=Object.create(De.prototype),Bu.prototype.constructor=Bu,Fu.prototype=Object.create(Xe.prototype),Fu.prototype.constructor=Fu,ku.prototype=Object.create(Bu.prototype),ku.prototype.constructor=ku,Uu.prototype=Object.create(Fu.prototype),Uu.prototype.constructor=Uu,ju.prototype=Object.create(De.prototype),ju.prototype.constructor=ju,Gu.prototype=Object.create(Xe.prototype),Gu.prototype.constructor=Gu;var Hu=Object.freeze({WireframeGeometry:Oi,ParametricGeometry:Di,ParametricBufferGeometry:Ii,TetrahedronGeometry:Bi,TetrahedronBufferGeometry:Fi,OctahedronGeometry:ki,OctahedronBufferGeometry:Ui,IcosahedronGeometry:ji,IcosahedronBufferGeometry:Gi,DodecahedronGeometry:Hi,DodecahedronBufferGeometry:Vi,PolyhedronGeometry:zi,PolyhedronBufferGeometry:Ni,TubeGeometry:Wi,TubeBufferGeometry:qi,TorusKnotGeometry:Xi,TorusKnotBufferGeometry:Yi,TorusGeometry:Zi,TorusBufferGeometry:Ji,TextGeometry:Su,TextBufferGeometry:Tu,SphereGeometry:Au,SphereBufferGeometry:Lu,RingGeometry:Pu,RingBufferGeometry:Cu,PlaneGeometry:Je,PlaneBufferGeometry:Ke,LatheGeometry:Ru,LatheBufferGeometry:Ou,ShapeGeometry:Du,ShapeBufferGeometry:Iu,ExtrudeGeometry:_u,ExtrudeBufferGeometry:wu,EdgesGeometry:Nu,ConeGeometry:ku,ConeBufferGeometry:Uu,CylinderGeometry:Bu,CylinderBufferGeometry:Fu,CircleGeometry:ju,CircleBufferGeometry:Gu,BoxGeometry:Ye,BoxBufferGeometry:Ze});function Vu(n){pl.call(this),this.type="ShadowMaterial",this.color=new me(0),this.transparent=!0,this.setValues(n)}function Wu(n){dl.call(this,n),this.type="RawShaderMaterial"}function qu(n){pl.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new me(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new me(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Nt,this.normalScale=new kt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(n)}function Xu(n){qu.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(n)}function Yu(n){pl.call(this),this.type="MeshPhongMaterial",this.color=new me(16777215),this.specular=new me(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new me(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Nt,this.normalScale=new kt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ln,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(n)}function Zu(n){Yu.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(n)}function Ju(n){pl.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Nt,this.normalScale=new kt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(n)}function Ku(n){pl.call(this),this.type="MeshLambertMaterial",this.color=new me(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new me(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ln,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(n)}function Qu(n){pl.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new me(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Nt,this.normalScale=new kt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.lights=!1,this.setValues(n)}function $u(n){wi.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(n)}Vu.prototype=Object.create(pl.prototype),Vu.prototype.constructor=Vu,Vu.prototype.isShadowMaterial=!0,Vu.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.color.copy(n.color),this},Wu.prototype=Object.create(dl.prototype),Wu.prototype.constructor=Wu,Wu.prototype.isRawShaderMaterial=!0,qu.prototype=Object.create(pl.prototype),qu.prototype.constructor=qu,qu.prototype.isMeshStandardMaterial=!0,qu.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.defines={STANDARD:""},this.color.copy(n.color),this.roughness=n.roughness,this.metalness=n.metalness,this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.roughnessMap=n.roughnessMap,this.metalnessMap=n.metalnessMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.envMapIntensity=n.envMapIntensity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this},Xu.prototype=Object.create(qu.prototype),Xu.prototype.constructor=Xu,Xu.prototype.isMeshPhysicalMaterial=!0,Xu.prototype.copy=function(n){return qu.prototype.copy.call(this,n),this.defines={PHYSICAL:""},this.reflectivity=n.reflectivity,this.clearCoat=n.clearCoat,this.clearCoatRoughness=n.clearCoatRoughness,this},Yu.prototype=Object.create(pl.prototype),Yu.prototype.constructor=Yu,Yu.prototype.isMeshPhongMaterial=!0,Yu.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.color.copy(n.color),this.specular.copy(n.specular),this.shininess=n.shininess,this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this},Zu.prototype=Object.create(Yu.prototype),Zu.prototype.constructor=Zu,Zu.prototype.isMeshToonMaterial=!0,Zu.prototype.copy=function(n){return Yu.prototype.copy.call(this,n),this.gradientMap=n.gradientMap,this},Ju.prototype=Object.create(pl.prototype),Ju.prototype.constructor=Ju,Ju.prototype.isMeshNormalMaterial=!0,Ju.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this},Ku.prototype=Object.create(pl.prototype),Ku.prototype.constructor=Ku,Ku.prototype.isMeshLambertMaterial=!0,Ku.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.color.copy(n.color),this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this},Qu.prototype=Object.create(pl.prototype),Qu.prototype.constructor=Qu,Qu.prototype.isMeshMatcapMaterial=!0,Qu.prototype.copy=function(n){return pl.prototype.copy.call(this,n),this.defines={MATCAP:""},this.color.copy(n.color),this.matcap=n.matcap,this.map=n.map,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.alphaMap=n.alphaMap,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this},$u.prototype=Object.create(wi.prototype),$u.prototype.constructor=$u,$u.prototype.isLineDashedMaterial=!0,$u.prototype.copy=function(n){return wi.prototype.copy.call(this,n),this.scale=n.scale,this.dashSize=n.dashSize,this.gapSize=n.gapSize,this};var no=Object.freeze({ShadowMaterial:Vu,SpriteMaterial:vi,RawShaderMaterial:Wu,ShaderMaterial:dl,PointsMaterial:Ti,MeshPhysicalMaterial:Xu,MeshStandardMaterial:qu,MeshPhongMaterial:Yu,MeshToonMaterial:Zu,MeshNormalMaterial:Ju,MeshLambertMaterial:Ku,MeshDepthMaterial:Hr,MeshDistanceMaterial:Vr,MeshBasicMaterial:vl,MeshMatcapMaterial:Qu,LineDashedMaterial:$u,LineBasicMaterial:wi,Material:pl}),to={arraySlice:function(n,t,e){return to.isTypedArray(n)?new n.constructor(n.subarray(t,void 0!==e?e:n.length)):n.slice(t,e)},convertArray:function(n,t,e){return!n||!e&&n.constructor===t?n:"number"==typeof t.BYTES_PER_ELEMENT?new t(n):Array.prototype.slice.call(n)},isTypedArray:function(n){return ArrayBuffer.isView(n)&&!(n instanceof DataView)},getKeyframeOrder:function(n){for(var t=n.length,e=new Array(t),l=0;l!==t;++l)e[l]=l;return e.sort((function(t,e){return n[t]-n[e]})),e},sortedArray:function(n,t,e){for(var l=n.length,r=new n.constructor(l),i=0,u=0;u!==l;++i)for(var o=e[i]*t,a=0;a!==t;++a)r[u++]=n[o+a];return r},flattenJSON:function(n,t,e,l){for(var r=1,i=n[0];void 0!==i&&void 0===i[l];)i=n[r++];if(void 0!==i){var u=i[l];if(void 0!==u)if(Array.isArray(u))do{void 0!==(u=i[l])&&(t.push(i.time),e.push.apply(e,u)),i=n[r++]}while(void 0!==i);else if(void 0!==u.toArray)do{void 0!==(u=i[l])&&(t.push(i.time),u.toArray(e,e.length)),i=n[r++]}while(void 0!==i);else do{void 0!==(u=i[l])&&(t.push(i.time),e.push(u)),i=n[r++]}while(void 0!==i)}}};function eo(n,t,e,l){this.parameterPositions=n,this._cachedIndex=0,this.resultBuffer=void 0!==l?l:new t.constructor(e),this.sampleValues=t,this.valueSize=e}function lo(n,t,e,l){eo.call(this,n,t,e,l),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function ro(n,t,e,l){eo.call(this,n,t,e,l)}function io(n,t,e,l){eo.call(this,n,t,e,l)}function uo(n,t,e,l){if(void 0===n)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+n);this.name=n,this.times=to.convertArray(t,this.TimeBufferType),this.values=to.convertArray(e,this.ValueBufferType),this.setInterpolation(l||this.DefaultInterpolation)}function oo(n,t,e){uo.call(this,n,t,e)}function ao(n,t,e,l){uo.call(this,n,t,e,l)}function so(n,t,e,l){uo.call(this,n,t,e,l)}function co(n,t,e,l){eo.call(this,n,t,e,l)}function ho(n,t,e,l){uo.call(this,n,t,e,l)}function po(n,t,e,l){uo.call(this,n,t,e,l)}function fo(n,t,e,l){uo.call(this,n,t,e,l)}function mo(n,t,e){this.name=n,this.tracks=e,this.duration=void 0!==t?t:-1,this.uuid=Ft.generateUUID(),this.duration<0&&this.resetDuration()}function vo(n){if(void 0===n.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var t=function(n){switch(n.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return so;case"vector":case"vector2":case"vector3":case"vector4":return fo;case"color":return ao;case"quaternion":return ho;case"bool":case"boolean":return oo;case"string":return po}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+n)}(n.type);if(void 0===n.times){var e=[],l=[];to.flattenJSON(n.keys,e,l,"value"),n.times=e,n.values=l}return void 0!==t.parse?t.parse(n):new t(n.name,n.times,n.values,n.interpolation)}Object.assign(eo.prototype,{evaluate:function(n){var t=this.parameterPositions,e=this._cachedIndex,l=t[e],r=t[e-1];n:{t:{var i;e:{l:if(!(n<l)){for(var u=e+2;;){if(void 0===l){if(n<r)break l;return e=t.length,this._cachedIndex=e,this.afterEnd_(e-1,n,r)}if(e===u)break;if(r=l,n<(l=t[++e]))break t}i=t.length;break e}if(n>=r)break n;var o=t[1];for(n<o&&(e=2,r=o),u=e-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,n,l);if(e===u)break;if(l=r,n>=(r=t[--e-1]))break t}i=e,e=0}for(;e<i;){var a=e+i>>>1;n<t[a]?i=a:e=a+1}if(l=t[e],void 0===(r=t[e-1]))return this._cachedIndex=0,this.beforeStart_(0,n,l);if(void 0===l)return e=t.length,this._cachedIndex=e,this.afterEnd_(e-1,r,n)}this._cachedIndex=e,this.intervalChanged_(e,r,l)}return this.interpolate_(e,r,n,l)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(n){for(var t=this.resultBuffer,e=this.sampleValues,l=this.valueSize,r=n*l,i=0;i!==l;++i)t[i]=e[r+i];return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),Object.assign(eo.prototype,{beforeStart_:eo.prototype.copySampleValue_,afterEnd_:eo.prototype.copySampleValue_}),lo.prototype=Object.assign(Object.create(eo.prototype),{constructor:lo,DefaultSettings_:{endingStart:_t,endingEnd:_t},intervalChanged_:function(n,t,e){var l=this.parameterPositions,r=n-2,i=n+1,u=l[r],o=l[i];if(void 0===u)switch(this.getSettings_().endingStart){case wt:r=n,u=2*t-e;break;case Mt:u=t+l[r=l.length-2]-l[r+1];break;default:r=n,u=e}if(void 0===o)switch(this.getSettings_().endingEnd){case wt:i=n,o=2*e-t;break;case Mt:i=1,o=e+l[1]-l[0];break;default:i=n-1,o=t}var a=.5*(e-t),s=this.valueSize;this._weightPrev=a/(t-u),this._weightNext=a/(o-e),this._offsetPrev=r*s,this._offsetNext=i*s},interpolate_:function(n,t,e,l){for(var r=this.resultBuffer,i=this.sampleValues,u=this.valueSize,o=n*u,a=o-u,s=this._offsetPrev,c=this._offsetNext,h=this._weightPrev,p=this._weightNext,d=(e-t)/(l-t),f=d*d,m=f*d,v=-h*m+2*h*f-h*d,g=(1+h)*m+(-1.5-2*h)*f+(-.5+h)*d+1,y=(-1-p)*m+(1.5+p)*f+.5*d,x=p*m-p*f,b=0;b!==u;++b)r[b]=v*i[s+b]+g*i[a+b]+y*i[o+b]+x*i[c+b];return r}}),ro.prototype=Object.assign(Object.create(eo.prototype),{constructor:ro,interpolate_:function(n,t,e,l){for(var r=this.resultBuffer,i=this.sampleValues,u=this.valueSize,o=n*u,a=o-u,s=(e-t)/(l-t),c=1-s,h=0;h!==u;++h)r[h]=i[a+h]*c+i[o+h]*s;return r}}),io.prototype=Object.assign(Object.create(eo.prototype),{constructor:io,interpolate_:function(n){return this.copySampleValue_(n-1)}}),Object.assign(uo,{toJSON:function(n){var t,e=n.constructor;if(void 0!==e.toJSON)t=e.toJSON(n);else{t={name:n.name,times:to.convertArray(n.times,Array),values:to.convertArray(n.values,Array)};var l=n.getInterpolation();l!==n.DefaultInterpolation&&(t.interpolation=l)}return t.type=n.ValueTypeName,t}}),Object.assign(uo.prototype,{constructor:uo,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:xt,InterpolantFactoryMethodDiscrete:function(n){return new io(this.times,this.values,this.getValueSize(),n)},InterpolantFactoryMethodLinear:function(n){return new ro(this.times,this.values,this.getValueSize(),n)},InterpolantFactoryMethodSmooth:function(n){return new lo(this.times,this.values,this.getValueSize(),n)},setInterpolation:function(n){var t;switch(n){case yt:t=this.InterpolantFactoryMethodDiscrete;break;case xt:t=this.InterpolantFactoryMethodLinear;break;case bt:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){var e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(n===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=t,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return yt;case this.InterpolantFactoryMethodLinear:return xt;case this.InterpolantFactoryMethodSmooth:return bt}},getValueSize:function(){return this.values.length/this.times.length},shift:function(n){if(0!==n)for(var t=this.times,e=0,l=t.length;e!==l;++e)t[e]+=n;return this},scale:function(n){if(1!==n)for(var t=this.times,e=0,l=t.length;e!==l;++e)t[e]*=n;return this},trim:function(n,t){for(var e=this.times,l=e.length,r=0,i=l-1;r!==l&&e[r]<n;)++r;for(;-1!==i&&e[i]>t;)--i;if(++i,0!==r||i!==l){r>=i&&(r=(i=Math.max(i,1))-1);var u=this.getValueSize();this.times=to.arraySlice(e,r,i),this.values=to.arraySlice(this.values,r*u,i*u)}return this},validate:function(){var n=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),n=!1);var e=this.times,l=this.values,r=e.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),n=!1);for(var i=null,u=0;u!==r;u++){var o=e[u];if("number"==typeof o&&isNaN(o)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,u,o),n=!1;break}if(null!==i&&i>o){console.error("THREE.KeyframeTrack: Out of order keys.",this,u,o,i),n=!1;break}i=o}if(void 0!==l&&to.isTypedArray(l)){u=0;for(var a=l.length;u!==a;++u){var s=l[u];if(isNaN(s)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,u,s),n=!1;break}}}return n},optimize:function(){for(var n=this.times,t=this.values,e=this.getValueSize(),l=this.getInterpolation()===bt,r=1,i=n.length-1,u=1;u<i;++u){var o=!1,a=n[u];if(a!==n[u+1]&&(1!==u||a!==a[0]))if(l)o=!0;else for(var s=u*e,c=s-e,h=s+e,p=0;p!==e;++p){var d=t[s+p];if(d!==t[c+p]||d!==t[h+p]){o=!0;break}}if(o){if(u!==r){n[r]=n[u];var f=u*e,m=r*e;for(p=0;p!==e;++p)t[m+p]=t[f+p]}++r}}if(i>0){for(n[r]=n[i],f=i*e,m=r*e,p=0;p!==e;++p)t[m+p]=t[f+p];++r}return r!==n.length&&(this.times=to.arraySlice(n,0,r),this.values=to.arraySlice(t,0,r*e)),this},clone:function(){var n=to.arraySlice(this.times,0),t=to.arraySlice(this.values,0),e=new(0,this.constructor)(this.name,n,t);return e.createInterpolant=this.createInterpolant,e}}),oo.prototype=Object.assign(Object.create(uo.prototype),{constructor:oo,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:yt,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),ao.prototype=Object.assign(Object.create(uo.prototype),{constructor:ao,ValueTypeName:"color"}),so.prototype=Object.assign(Object.create(uo.prototype),{constructor:so,ValueTypeName:"number"}),co.prototype=Object.assign(Object.create(eo.prototype),{constructor:co,interpolate_:function(n,t,e,l){for(var r=this.resultBuffer,i=this.sampleValues,u=this.valueSize,o=n*u,a=(e-t)/(l-t),s=o+u;o!==s;o+=4)jt.slerpFlat(r,0,i,o-u,i,o,a);return r}}),ho.prototype=Object.assign(Object.create(uo.prototype),{constructor:ho,ValueTypeName:"quaternion",DefaultInterpolation:xt,InterpolantFactoryMethodLinear:function(n){return new co(this.times,this.values,this.getValueSize(),n)},InterpolantFactoryMethodSmooth:void 0}),po.prototype=Object.assign(Object.create(uo.prototype),{constructor:po,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:yt,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),fo.prototype=Object.assign(Object.create(uo.prototype),{constructor:fo,ValueTypeName:"vector"}),Object.assign(mo,{parse:function(n){for(var t=[],e=n.tracks,l=1/(n.fps||1),r=0,i=e.length;r!==i;++r)t.push(vo(e[r]).scale(l));return new mo(n.name,n.duration,t)},toJSON:function(n){for(var t=[],e=n.tracks,l={name:n.name,duration:n.duration,tracks:t,uuid:n.uuid},r=0,i=e.length;r!==i;++r)t.push(uo.toJSON(e[r]));return l},CreateFromMorphTargetSequence:function(n,t,e,l){for(var r=t.length,i=[],u=0;u<r;u++){var o=[],a=[];o.push((u+r-1)%r,u,(u+1)%r),a.push(0,1,0);var s=to.getKeyframeOrder(o);o=to.sortedArray(o,1,s),a=to.sortedArray(a,1,s),l||0!==o[0]||(o.push(r),a.push(a[0])),i.push(new so(".morphTargetInfluences["+t[u].name+"]",o,a).scale(1/e))}return new mo(n,-1,i)},findByName:function(n,t){var e=n;if(!Array.isArray(n)){var l=n;e=l.geometry&&l.geometry.animations||l.animations}for(var r=0;r<e.length;r++)if(e[r].name===t)return e[r];return null},CreateClipsFromMorphTargetSequences:function(n,t,e){for(var l={},r=/^([\w-]*?)([\d]+)$/,i=0,u=n.length;i<u;i++){var o=n[i],a=o.name.match(r);if(a&&a.length>1){var s=l[h=a[1]];s||(l[h]=s=[]),s.push(o)}}var c=[];for(var h in l)c.push(mo.CreateFromMorphTargetSequence(h,l[h],t,e));return c},parseAnimation:function(n,t){if(!n)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var e=function(n,t,e,l,r){if(0!==e.length){var i=[],u=[];to.flattenJSON(e,i,u,l),0!==i.length&&r.push(new n(t,i,u))}},l=[],r=n.name||"default",i=n.length||-1,u=n.fps||30,o=n.hierarchy||[],a=0;a<o.length;a++){var s=o[a].keys;if(s&&0!==s.length)if(s[0].morphTargets){for(var c={},h=0;h<s.length;h++)if(s[h].morphTargets)for(var p=0;p<s[h].morphTargets.length;p++)c[s[h].morphTargets[p]]=-1;for(var d in c){var f=[],m=[];for(p=0;p!==s[h].morphTargets.length;++p){var v=s[h];f.push(v.time),m.push(v.morphTarget===d?1:0)}l.push(new so(".morphTargetInfluence["+d+"]",f,m))}i=c.length*(u||1)}else{var g=".bones["+t[a].name+"]";e(fo,g+".position",s,"pos",l),e(ho,g+".quaternion",s,"rot",l),e(fo,g+".scale",s,"scl",l)}}return 0===l.length?null:new mo(r,i,l)}}),Object.assign(mo.prototype,{resetDuration:function(){for(var n=0,t=0,e=this.tracks.length;t!==e;++t){var l=this.tracks[t];n=Math.max(n,l.times[l.times.length-1])}return this.duration=n,this},trim:function(){for(var n=0;n<this.tracks.length;n++)this.tracks[n].trim(0,this.duration);return this},validate:function(){for(var n=!0,t=0;t<this.tracks.length;t++)n=n&&this.tracks[t].validate();return n},optimize:function(){for(var n=0;n<this.tracks.length;n++)this.tracks[n].optimize();return this},clone:function(){for(var n=[],t=0;t<this.tracks.length;t++)n.push(this.tracks[t].clone());return new mo(this.name,this.duration,n)}});var go={enabled:!1,files:{},add:function(n,t){!1!==this.enabled&&(this.files[n]=t)},get:function(n){if(!1!==this.enabled)return this.files[n]},remove:function(n){delete this.files[n]},clear:function(){this.files={}}};function yo(n,t,e){var l=this,r=!1,i=0,u=0,o=void 0;this.onStart=void 0,this.onLoad=n,this.onProgress=t,this.onError=e,this.itemStart=function(n){u++,!1===r&&void 0!==l.onStart&&l.onStart(n,i,u),r=!0},this.itemEnd=function(n){i++,void 0!==l.onProgress&&l.onProgress(n,i,u),i===u&&(r=!1,void 0!==l.onLoad&&l.onLoad())},this.itemError=function(n){void 0!==l.onError&&l.onError(n)},this.resolveURL=function(n){return o?o(n):n},this.setURLModifier=function(n){return o=n,this}}var xo=new yo,bo={};function _o(n){this.manager=void 0!==n?n:xo}function wo(n){this.manager=void 0!==n?n:xo}function Mo(n){this.manager=void 0!==n?n:xo}function Eo(n){this.manager=void 0!==n?n:xo}function So(){this.type="Curve",this.arcLengthDivisions=200}function To(n,t,e,l,r,i,u,o){So.call(this),this.type="EllipseCurve",this.aX=n||0,this.aY=t||0,this.xRadius=e||1,this.yRadius=l||1,this.aStartAngle=r||0,this.aEndAngle=i||2*Math.PI,this.aClockwise=u||!1,this.aRotation=o||0}function Ao(n,t,e,l,r,i){To.call(this,n,t,e,e,l,r,i),this.type="ArcCurve"}function Lo(){var n=0,t=0,e=0,l=0;function r(r,i,u,o){n=r,t=u,e=-3*r+3*i-2*u-o,l=2*r-2*i+u+o}return{initCatmullRom:function(n,t,e,l,i){r(t,e,i*(e-n),i*(l-t))},initNonuniformCatmullRom:function(n,t,e,l,i,u,o){var a=(t-n)/i-(e-n)/(i+u)+(e-t)/u,s=(e-t)/u-(l-t)/(u+o)+(l-e)/o;r(t,e,a*=u,s*=u)},calc:function(r){var i=r*r;return n+t*r+e*i+l*(i*r)}}}Object.assign(_o.prototype,{load:function(n,t,e,l){void 0===n&&(n=""),void 0!==this.path&&(n=this.path+n),n=this.manager.resolveURL(n);var r=this,i=go.get(n);if(void 0!==i)return r.manager.itemStart(n),setTimeout((function(){t&&t(i),r.manager.itemEnd(n)}),0),i;if(void 0===bo[n]){var u=n.match(/^data:(.*?)(;base64)?,(.*)$/);if(u){var o=u[1],a=!!u[2],s=u[3];s=decodeURIComponent(s),a&&(s=atob(s));try{var c,h=(this.responseType||"").toLowerCase();switch(h){case"arraybuffer":case"blob":for(var p=new Uint8Array(s.length),d=0;d<s.length;d++)p[d]=s.charCodeAt(d);c="blob"===h?new Blob([p.buffer],{type:o}):p.buffer;break;case"document":var f=new DOMParser;c=f.parseFromString(s,o);break;case"json":c=JSON.parse(s);break;default:c=s}setTimeout((function(){t&&t(c),r.manager.itemEnd(n)}),0)}catch(t){setTimeout((function(){l&&l(t),r.manager.itemError(n),r.manager.itemEnd(n)}),0)}}else{bo[n]=[],bo[n].push({onLoad:t,onProgress:e,onError:l});var m=new XMLHttpRequest;for(var v in m.open("GET",n,!0),m.addEventListener("load",(function(t){var e=this.response;go.add(n,e);var l=bo[n];if(delete bo[n],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received.");for(var i=0,u=l.length;i<u;i++)(o=l[i]).onLoad&&o.onLoad(e);r.manager.itemEnd(n)}else{for(i=0,u=l.length;i<u;i++){var o;(o=l[i]).onError&&o.onError(t)}r.manager.itemError(n),r.manager.itemEnd(n)}}),!1),m.addEventListener("progress",(function(t){for(var e=bo[n],l=0,r=e.length;l<r;l++){var i=e[l];i.onProgress&&i.onProgress(t)}}),!1),m.addEventListener("error",(function(t){var e=bo[n];delete bo[n];for(var l=0,i=e.length;l<i;l++){var u=e[l];u.onError&&u.onError(t)}r.manager.itemError(n),r.manager.itemEnd(n)}),!1),m.addEventListener("abort",(function(t){var e=bo[n];delete bo[n];for(var l=0,i=e.length;l<i;l++){var u=e[l];u.onError&&u.onError(t)}r.manager.itemError(n),r.manager.itemEnd(n)}),!1),void 0!==this.responseType&&(m.responseType=this.responseType),void 0!==this.withCredentials&&(m.withCredentials=this.withCredentials),m.overrideMimeType&&m.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)m.setRequestHeader(v,this.requestHeader[v]);m.send(null)}return r.manager.itemStart(n),m}bo[n].push({onLoad:t,onProgress:e,onError:l})},setPath:function(n){return this.path=n,this},setResponseType:function(n){return this.responseType=n,this},setWithCredentials:function(n){return this.withCredentials=n,this},setMimeType:function(n){return this.mimeType=n,this},setRequestHeader:function(n){return this.requestHeader=n,this}}),Object.assign(function(n){this.manager=void 0!==n?n:xo}.prototype,{load:function(n,t,e,l){var r=this,i=new _o(r.manager);i.setPath(r.path),i.load(n,(function(n){t(r.parse(JSON.parse(n)))}),e,l)},parse:function(n,t){for(var e=[],l=0;l<n.length;l++){var r=mo.parse(n[l]);e.push(r)}t(e)},setPath:function(n){return this.path=n,this}}),Object.assign(function(n){this.manager=void 0!==n?n:xo,this._parser=null}.prototype,{load:function(n,t,e,l){var r=this,i=[],u=new Pi;u.image=i;var o=new _o(this.manager);function a(a){o.load(n[a],(function(n){var e=r._parser(n,!0);i[a]={width:e.width,height:e.height,format:e.format,mipmaps:e.mipmaps},6===(s+=1)&&(1===e.mipmapCount&&(u.minFilter=Tn),u.format=e.format,u.needsUpdate=!0,t&&t(u))}),e,l)}if(o.setPath(this.path),o.setResponseType("arraybuffer"),Array.isArray(n))for(var s=0,c=0,h=n.length;c<h;++c)a(c);else o.load(n,(function(n){var e=r._parser(n,!0);if(e.isCubemap)for(var l=e.mipmaps.length/e.mipmapCount,o=0;o<l;o++){i[o]={mipmaps:[]};for(var a=0;a<e.mipmapCount;a++)i[o].mipmaps.push(e.mipmaps[o*e.mipmapCount+a]),i[o].format=e.format,i[o].width=e.width,i[o].height=e.height}else u.image.width=e.width,u.image.height=e.height,u.mipmaps=e.mipmaps;1===e.mipmapCount&&(u.minFilter=Tn),u.format=e.format,u.needsUpdate=!0,t&&t(u)}),e,l);return u},setPath:function(n){return this.path=n,this}}),Object.assign(function(n){this.manager=void 0!==n?n:xo,this._parser=null}.prototype,{load:function(n,t,e,l){var r=this,i=new ee,u=new _o(this.manager);return u.setResponseType("arraybuffer"),u.setPath(this.path),u.load(n,(function(n){var e=r._parser(n);e&&(void 0!==e.image?i.image=e.image:void 0!==e.data&&(i.image.width=e.width,i.image.height=e.height,i.image.data=e.data),i.wrapS=void 0!==e.wrapS?e.wrapS:_n,i.wrapT=void 0!==e.wrapT?e.wrapT:_n,i.magFilter=void 0!==e.magFilter?e.magFilter:Tn,i.minFilter=void 0!==e.minFilter?e.minFilter:Ln,i.anisotropy=void 0!==e.anisotropy?e.anisotropy:1,void 0!==e.format&&(i.format=e.format),void 0!==e.type&&(i.type=e.type),void 0!==e.mipmaps&&(i.mipmaps=e.mipmaps),1===e.mipmapCount&&(i.minFilter=Tn),i.needsUpdate=!0,t&&t(i,e))}),e,l),i},setPath:function(n){return this.path=n,this}}),Object.assign(wo.prototype,{crossOrigin:"anonymous",load:function(n,t,e,l){void 0===n&&(n=""),void 0!==this.path&&(n=this.path+n),n=this.manager.resolveURL(n);var r=this,i=go.get(n);if(void 0!==i)return r.manager.itemStart(n),setTimeout((function(){t&&t(i),r.manager.itemEnd(n)}),0),i;var u=document.createElementNS("http://www.w3.org/1999/xhtml","img");function o(){u.removeEventListener("load",o,!1),u.removeEventListener("error",a,!1),go.add(n,this),t&&t(this),r.manager.itemEnd(n)}function a(t){u.removeEventListener("load",o,!1),u.removeEventListener("error",a,!1),l&&l(t),r.manager.itemError(n),r.manager.itemEnd(n)}return u.addEventListener("load",o,!1),u.addEventListener("error",a,!1),"data:"!==n.substr(0,5)&&void 0!==this.crossOrigin&&(u.crossOrigin=this.crossOrigin),r.manager.itemStart(n),u.src=n,u},setCrossOrigin:function(n){return this.crossOrigin=n,this},setPath:function(n){return this.path=n,this}}),Object.assign(Mo.prototype,{crossOrigin:"anonymous",load:function(n,t,e,l){var r=new Pl,i=new wo(this.manager);i.setCrossOrigin(this.crossOrigin),i.setPath(this.path);var u=0;function o(e){i.load(n[e],(function(n){r.images[e]=n,6==++u&&(r.needsUpdate=!0,t&&t(r))}),void 0,l)}for(var a=0;a<n.length;++a)o(a);return r},setCrossOrigin:function(n){return this.crossOrigin=n,this},setPath:function(n){return this.path=n,this}}),Object.assign(Eo.prototype,{crossOrigin:"anonymous",load:function(n,t,e,l){var r=new Kt,i=new wo(this.manager);return i.setCrossOrigin(this.crossOrigin),i.setPath(this.path),i.load(n,(function(e){r.image=e;var l=n.search(/\.jpe?g($|\?)/i)>0||0===n.search(/^data\:image\/jpeg/);r.format=l?Gn:Hn,r.needsUpdate=!0,void 0!==t&&t(r)}),e,l),r},setCrossOrigin:function(n){return this.crossOrigin=n,this},setPath:function(n){return this.path=n,this}}),Object.assign(So.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(n,t){var e=this.getUtoTmapping(n);return this.getPoint(e,t)},getPoints:function(n){void 0===n&&(n=5);for(var t=[],e=0;e<=n;e++)t.push(this.getPoint(e/n));return t},getSpacedPoints:function(n){void 0===n&&(n=5);for(var t=[],e=0;e<=n;e++)t.push(this.getPointAt(e/n));return t},getLength:function(){var n=this.getLengths();return n[n.length-1]},getLengths:function(n){if(void 0===n&&(n=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===n+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,e,l=[],r=this.getPoint(0),i=0;for(l.push(0),e=1;e<=n;e++)i+=(t=this.getPoint(e/n)).distanceTo(r),l.push(i),r=t;return this.cacheArcLengths=l,l},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(n,t){var e,l=this.getLengths(),r=0,i=l.length;e=t||n*l[i-1];for(var u,o=0,a=i-1;o<=a;)if((u=l[r=Math.floor(o+(a-o)/2)]-e)<0)o=r+1;else{if(!(u>0)){a=r;break}a=r-1}if(l[r=a]===e)return r/(i-1);var s=l[r];return(r+(e-s)/(l[r+1]-s))/(i-1)},getTangent:function(n){var t=1e-4,e=n-t,l=n+t;e<0&&(e=0),l>1&&(l=1);var r=this.getPoint(e);return this.getPoint(l).clone().sub(r).normalize()},getTangentAt:function(n){var t=this.getUtoTmapping(n);return this.getTangent(t)},computeFrenetFrames:function(n,t){var e,l,r,i=new Gt,u=[],o=[],a=[],s=new Gt,c=new Ut;for(e=0;e<=n;e++)l=e/n,u[e]=this.getTangentAt(l),u[e].normalize();o[0]=new Gt,a[0]=new Gt;var h=Number.MAX_VALUE,p=Math.abs(u[0].x),d=Math.abs(u[0].y),f=Math.abs(u[0].z);for(p<=h&&(h=p,i.set(1,0,0)),d<=h&&(h=d,i.set(0,1,0)),f<=h&&i.set(0,0,1),s.crossVectors(u[0],i).normalize(),o[0].crossVectors(u[0],s),a[0].crossVectors(u[0],o[0]),e=1;e<=n;e++)o[e]=o[e-1].clone(),a[e]=a[e-1].clone(),s.crossVectors(u[e-1],u[e]),s.length()>Number.EPSILON&&(s.normalize(),r=Math.acos(Ft.clamp(u[e-1].dot(u[e]),-1,1)),o[e].applyMatrix4(c.makeRotationAxis(s,r))),a[e].crossVectors(u[e],o[e]);if(!0===t)for(r=Math.acos(Ft.clamp(o[0].dot(o[n]),-1,1)),r/=n,u[0].dot(s.crossVectors(o[0],o[n]))>0&&(r=-r),e=1;e<=n;e++)o[e].applyMatrix4(c.makeRotationAxis(u[e],r*e)),a[e].crossVectors(u[e],o[e]);return{tangents:u,normals:o,binormals:a}},clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.arcLengthDivisions=n.arcLengthDivisions,this},toJSON:function(){var n={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return n.arcLengthDivisions=this.arcLengthDivisions,n.type=this.type,n},fromJSON:function(n){return this.arcLengthDivisions=n.arcLengthDivisions,this}}),To.prototype=Object.create(So.prototype),To.prototype.constructor=To,To.prototype.isEllipseCurve=!0,To.prototype.getPoint=function(n,t){for(var e=t||new kt,l=2*Math.PI,r=this.aEndAngle-this.aStartAngle,i=Math.abs(r)<Number.EPSILON;r<0;)r+=l;for(;r>l;)r-=l;r<Number.EPSILON&&(r=i?0:l),!0!==this.aClockwise||i||(r===l?r=-l:r-=l);var u=this.aStartAngle+n*r,o=this.aX+this.xRadius*Math.cos(u),a=this.aY+this.yRadius*Math.sin(u);if(0!==this.aRotation){var s=Math.cos(this.aRotation),c=Math.sin(this.aRotation),h=o-this.aX,p=a-this.aY;o=h*s-p*c+this.aX,a=h*c+p*s+this.aY}return e.set(o,a)},To.prototype.copy=function(n){return So.prototype.copy.call(this,n),this.aX=n.aX,this.aY=n.aY,this.xRadius=n.xRadius,this.yRadius=n.yRadius,this.aStartAngle=n.aStartAngle,this.aEndAngle=n.aEndAngle,this.aClockwise=n.aClockwise,this.aRotation=n.aRotation,this},To.prototype.toJSON=function(){var n=So.prototype.toJSON.call(this);return n.aX=this.aX,n.aY=this.aY,n.xRadius=this.xRadius,n.yRadius=this.yRadius,n.aStartAngle=this.aStartAngle,n.aEndAngle=this.aEndAngle,n.aClockwise=this.aClockwise,n.aRotation=this.aRotation,n},To.prototype.fromJSON=function(n){return So.prototype.fromJSON.call(this,n),this.aX=n.aX,this.aY=n.aY,this.xRadius=n.xRadius,this.yRadius=n.yRadius,this.aStartAngle=n.aStartAngle,this.aEndAngle=n.aEndAngle,this.aClockwise=n.aClockwise,this.aRotation=n.aRotation,this},Ao.prototype=Object.create(To.prototype),Ao.prototype.constructor=Ao,Ao.prototype.isArcCurve=!0;var Po=new Gt,Co=new Lo,Ro=new Lo,Oo=new Lo;function Do(n,t,e,l){So.call(this),this.type="CatmullRomCurve3",this.points=n||[],this.closed=t||!1,this.curveType=e||"centripetal",this.tension=l||.5}function Io(n,t,e,l,r){var i=.5*(l-t),u=.5*(r-e),o=n*n;return(2*e-2*l+i+u)*(n*o)+(-3*e+3*l-2*i-u)*o+i*n+e}function zo(n,t,e,l){return function(n,t){var e=1-n;return e*e*t}(n,t)+function(n,t){return 2*(1-n)*n*t}(n,e)+function(n,t){return n*n*t}(n,l)}function No(n,t,e,l,r){return function(n,t){var e=1-n;return e*e*e*t}(n,t)+function(n,t){var e=1-n;return 3*e*e*n*t}(n,e)+function(n,t){return 3*(1-n)*n*n*t}(n,l)+function(n,t){return n*n*n*t}(n,r)}function Bo(n,t,e,l){So.call(this),this.type="CubicBezierCurve",this.v0=n||new kt,this.v1=t||new kt,this.v2=e||new kt,this.v3=l||new kt}function Fo(n,t,e,l){So.call(this),this.type="CubicBezierCurve3",this.v0=n||new Gt,this.v1=t||new Gt,this.v2=e||new Gt,this.v3=l||new Gt}function ko(n,t){So.call(this),this.type="LineCurve",this.v1=n||new kt,this.v2=t||new kt}function Uo(n,t){So.call(this),this.type="LineCurve3",this.v1=n||new Gt,this.v2=t||new Gt}function jo(n,t,e){So.call(this),this.type="QuadraticBezierCurve",this.v0=n||new kt,this.v1=t||new kt,this.v2=e||new kt}function Go(n,t,e){So.call(this),this.type="QuadraticBezierCurve3",this.v0=n||new Gt,this.v1=t||new Gt,this.v2=e||new Gt}function Ho(n){So.call(this),this.type="SplineCurve",this.points=n||[]}Do.prototype=Object.create(So.prototype),Do.prototype.constructor=Do,Do.prototype.isCatmullRomCurve3=!0,Do.prototype.getPoint=function(n,t){var e,l,r,i,u=t||new Gt,o=this.points,a=o.length,s=(a-(this.closed?0:1))*n,c=Math.floor(s),h=s-c;if(this.closed?c+=c>0?0:(Math.floor(Math.abs(c)/a)+1)*a:0===h&&c===a-1&&(c=a-2,h=1),this.closed||c>0?e=o[(c-1)%a]:(Po.subVectors(o[0],o[1]).add(o[0]),e=Po),l=o[c%a],r=o[(c+1)%a],this.closed||c+2<a?i=o[(c+2)%a]:(Po.subVectors(o[a-1],o[a-2]).add(o[a-1]),i=Po),"centripetal"===this.curveType||"chordal"===this.curveType){var p="chordal"===this.curveType?.5:.25,d=Math.pow(e.distanceToSquared(l),p),f=Math.pow(l.distanceToSquared(r),p),m=Math.pow(r.distanceToSquared(i),p);f<1e-4&&(f=1),d<1e-4&&(d=f),m<1e-4&&(m=f),Co.initNonuniformCatmullRom(e.x,l.x,r.x,i.x,d,f,m),Ro.initNonuniformCatmullRom(e.y,l.y,r.y,i.y,d,f,m),Oo.initNonuniformCatmullRom(e.z,l.z,r.z,i.z,d,f,m)}else"catmullrom"===this.curveType&&(Co.initCatmullRom(e.x,l.x,r.x,i.x,this.tension),Ro.initCatmullRom(e.y,l.y,r.y,i.y,this.tension),Oo.initCatmullRom(e.z,l.z,r.z,i.z,this.tension));return u.set(Co.calc(h),Ro.calc(h),Oo.calc(h)),u},Do.prototype.copy=function(n){So.prototype.copy.call(this,n),this.points=[];for(var t=0,e=n.points.length;t<e;t++){var l=n.points[t];this.points.push(l.clone())}return this.closed=n.closed,this.curveType=n.curveType,this.tension=n.tension,this},Do.prototype.toJSON=function(){var n=So.prototype.toJSON.call(this);n.points=[];for(var t=0,e=this.points.length;t<e;t++){var l=this.points[t];n.points.push(l.toArray())}return n.closed=this.closed,n.curveType=this.curveType,n.tension=this.tension,n},Do.prototype.fromJSON=function(n){So.prototype.fromJSON.call(this,n),this.points=[];for(var t=0,e=n.points.length;t<e;t++){var l=n.points[t];this.points.push((new Gt).fromArray(l))}return this.closed=n.closed,this.curveType=n.curveType,this.tension=n.tension,this},Bo.prototype=Object.create(So.prototype),Bo.prototype.constructor=Bo,Bo.prototype.isCubicBezierCurve=!0,Bo.prototype.getPoint=function(n,t){var e=t||new kt,l=this.v0,r=this.v1,i=this.v2,u=this.v3;return e.set(No(n,l.x,r.x,i.x,u.x),No(n,l.y,r.y,i.y,u.y)),e},Bo.prototype.copy=function(n){return So.prototype.copy.call(this,n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this.v3.copy(n.v3),this},Bo.prototype.toJSON=function(){var n=So.prototype.toJSON.call(this);return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n.v3=this.v3.toArray(),n},Bo.prototype.fromJSON=function(n){return So.prototype.fromJSON.call(this,n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this.v3.fromArray(n.v3),this},Fo.prototype=Object.create(So.prototype),Fo.prototype.constructor=Fo,Fo.prototype.isCubicBezierCurve3=!0,Fo.prototype.getPoint=function(n,t){var e=t||new Gt,l=this.v0,r=this.v1,i=this.v2,u=this.v3;return e.set(No(n,l.x,r.x,i.x,u.x),No(n,l.y,r.y,i.y,u.y),No(n,l.z,r.z,i.z,u.z)),e},Fo.prototype.copy=function(n){return So.prototype.copy.call(this,n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this.v3.copy(n.v3),this},Fo.prototype.toJSON=function(){var n=So.prototype.toJSON.call(this);return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n.v3=this.v3.toArray(),n},Fo.prototype.fromJSON=function(n){return So.prototype.fromJSON.call(this,n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this.v3.fromArray(n.v3),this},ko.prototype=Object.create(So.prototype),ko.prototype.constructor=ko,ko.prototype.isLineCurve=!0,ko.prototype.getPoint=function(n,t){var e=t||new kt;return 1===n?e.copy(this.v2):(e.copy(this.v2).sub(this.v1),e.multiplyScalar(n).add(this.v1)),e},ko.prototype.getPointAt=function(n,t){return this.getPoint(n,t)},ko.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},ko.prototype.copy=function(n){return So.prototype.copy.call(this,n),this.v1.copy(n.v1),this.v2.copy(n.v2),this},ko.prototype.toJSON=function(){var n=So.prototype.toJSON.call(this);return n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n},ko.prototype.fromJSON=function(n){return So.prototype.fromJSON.call(this,n),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this},Uo.prototype=Object.create(So.prototype),Uo.prototype.constructor=Uo,Uo.prototype.isLineCurve3=!0,Uo.prototype.getPoint=function(n,t){var e=t||new Gt;return 1===n?e.copy(this.v2):(e.copy(this.v2).sub(this.v1),e.multiplyScalar(n).add(this.v1)),e},Uo.prototype.getPointAt=function(n,t){return this.getPoint(n,t)},Uo.prototype.copy=function(n){return So.prototype.copy.call(this,n),this.v1.copy(n.v1),this.v2.copy(n.v2),this},Uo.prototype.toJSON=function(){var n=So.prototype.toJSON.call(this);return n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n},Uo.prototype.fromJSON=function(n){return So.prototype.fromJSON.call(this,n),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this},jo.prototype=Object.create(So.prototype),jo.prototype.constructor=jo,jo.prototype.isQuadraticBezierCurve=!0,jo.prototype.getPoint=function(n,t){var e=t||new kt,l=this.v0,r=this.v1,i=this.v2;return e.set(zo(n,l.x,r.x,i.x),zo(n,l.y,r.y,i.y)),e},jo.prototype.copy=function(n){return So.prototype.copy.call(this,n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this},jo.prototype.toJSON=function(){var n=So.prototype.toJSON.call(this);return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n},jo.prototype.fromJSON=function(n){return So.prototype.fromJSON.call(this,n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this},Go.prototype=Object.create(So.prototype),Go.prototype.constructor=Go,Go.prototype.isQuadraticBezierCurve3=!0,Go.prototype.getPoint=function(n,t){var e=t||new Gt,l=this.v0,r=this.v1,i=this.v2;return e.set(zo(n,l.x,r.x,i.x),zo(n,l.y,r.y,i.y),zo(n,l.z,r.z,i.z)),e},Go.prototype.copy=function(n){return So.prototype.copy.call(this,n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this},Go.prototype.toJSON=function(){var n=So.prototype.toJSON.call(this);return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n},Go.prototype.fromJSON=function(n){return So.prototype.fromJSON.call(this,n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this},Ho.prototype=Object.create(So.prototype),Ho.prototype.constructor=Ho,Ho.prototype.isSplineCurve=!0,Ho.prototype.getPoint=function(n,t){var e=t||new kt,l=this.points,r=(l.length-1)*n,i=Math.floor(r),u=r-i,o=l[0===i?i:i-1],a=l[i],s=l[i>l.length-2?l.length-1:i+1],c=l[i>l.length-3?l.length-1:i+2];return e.set(Io(u,o.x,a.x,s.x,c.x),Io(u,o.y,a.y,s.y,c.y)),e},Ho.prototype.copy=function(n){So.prototype.copy.call(this,n),this.points=[];for(var t=0,e=n.points.length;t<e;t++){var l=n.points[t];this.points.push(l.clone())}return this},Ho.prototype.toJSON=function(){var n=So.prototype.toJSON.call(this);n.points=[];for(var t=0,e=this.points.length;t<e;t++){var l=this.points[t];n.points.push(l.toArray())}return n},Ho.prototype.fromJSON=function(n){So.prototype.fromJSON.call(this,n),this.points=[];for(var t=0,e=n.points.length;t<e;t++){var l=n.points[t];this.points.push((new kt).fromArray(l))}return this};var Vo=Object.freeze({ArcCurve:Ao,CatmullRomCurve3:Do,CubicBezierCurve:Bo,CubicBezierCurve3:Fo,EllipseCurve:To,LineCurve:ko,LineCurve3:Uo,QuadraticBezierCurve:jo,QuadraticBezierCurve3:Go,SplineCurve:Ho});function Wo(){So.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function qo(n){Wo.call(this),this.type="Path",this.currentPoint=new kt,n&&this.setFromPoints(n)}function Xo(n){qo.call(this,n),this.uuid=Ft.generateUUID(),this.type="Shape",this.holes=[]}function Yo(n,t){Pe.call(this),this.type="Light",this.color=new me(n),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0}function Zo(n,t,e){Yo.call(this,n,e),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(Pe.DefaultUp),this.updateMatrix(),this.groundColor=new me(t)}function Jo(n){this.camera=n,this.bias=0,this.radius=1,this.mapSize=new kt(512,512),this.map=null,this.matrix=new Ut}function Ko(){Jo.call(this,new Kr(50,1,.5,500))}function Qo(n,t,e,l,r,i){Yo.call(this,n,t),this.type="SpotLight",this.position.copy(Pe.DefaultUp),this.updateMatrix(),this.target=new Pe,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(n){this.intensity=n/Math.PI}}),this.distance=void 0!==e?e:0,this.angle=void 0!==l?l:Math.PI/3,this.penumbra=void 0!==r?r:0,this.decay=void 0!==i?i:1,this.shadow=new Ko}function $o(n,t,e,l){Yo.call(this,n,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(n){this.intensity=n/(4*Math.PI)}}),this.distance=void 0!==e?e:0,this.decay=void 0!==l?l:1,this.shadow=new Jo(new Kr(90,1,.5,500))}function na(n,t,e,l,r,i){Jr.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==n?n:-1,this.right=void 0!==t?t:1,this.top=void 0!==e?e:1,this.bottom=void 0!==l?l:-1,this.near=void 0!==r?r:.1,this.far=void 0!==i?i:2e3,this.updateProjectionMatrix()}function ta(){Jo.call(this,new na(-5,5,5,-5,.5,500))}function ea(n,t){Yo.call(this,n,t),this.type="DirectionalLight",this.position.copy(Pe.DefaultUp),this.updateMatrix(),this.target=new Pe,this.shadow=new ta}function la(n,t){Yo.call(this,n,t),this.type="AmbientLight",this.castShadow=void 0}function ra(n,t,e,l){Yo.call(this,n,t),this.type="RectAreaLight",this.width=void 0!==e?e:10,this.height=void 0!==l?l:10}function ia(n){this.manager=void 0!==n?n:xo,this.textures={}}Wo.prototype=Object.assign(Object.create(So.prototype),{constructor:Wo,add:function(n){this.curves.push(n)},closePath:function(){var n=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);n.equals(t)||this.curves.push(new ko(t,n))},getPoint:function(n){for(var t=n*this.getLength(),e=this.getCurveLengths(),l=0;l<e.length;){if(e[l]>=t){var r=e[l]-t,i=this.curves[l],u=i.getLength(),o=0===u?0:1-r/u;return i.getPointAt(o)}l++}return null},getLength:function(){var n=this.getCurveLengths();return n[n.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var n=[],t=0,e=0,l=this.curves.length;e<l;e++)t+=this.curves[e].getLength(),n.push(t);return this.cacheLengths=n,n},getSpacedPoints:function(n){void 0===n&&(n=40);for(var t=[],e=0;e<=n;e++)t.push(this.getPoint(e/n));return this.autoClose&&t.push(t[0]),t},getPoints:function(n){n=n||12;for(var t,e=[],l=0,r=this.curves;l<r.length;l++)for(var i=r[l],u=i&&i.isEllipseCurve?2*n:i&&(i.isLineCurve||i.isLineCurve3)?1:i&&i.isSplineCurve?n*i.points.length:n,o=i.getPoints(u),a=0;a<o.length;a++){var s=o[a];t&&t.equals(s)||(e.push(s),t=s)}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e},copy:function(n){So.prototype.copy.call(this,n),this.curves=[];for(var t=0,e=n.curves.length;t<e;t++){var l=n.curves[t];this.curves.push(l.clone())}return this.autoClose=n.autoClose,this},toJSON:function(){var n=So.prototype.toJSON.call(this);n.autoClose=this.autoClose,n.curves=[];for(var t=0,e=this.curves.length;t<e;t++){var l=this.curves[t];n.curves.push(l.toJSON())}return n},fromJSON:function(n){So.prototype.fromJSON.call(this,n),this.autoClose=n.autoClose,this.curves=[];for(var t=0,e=n.curves.length;t<e;t++){var l=n.curves[t];this.curves.push((new Vo[l.type]).fromJSON(l))}return this}}),qo.prototype=Object.assign(Object.create(Wo.prototype),{constructor:qo,setFromPoints:function(n){this.moveTo(n[0].x,n[0].y);for(var t=1,e=n.length;t<e;t++)this.lineTo(n[t].x,n[t].y)},moveTo:function(n,t){this.currentPoint.set(n,t)},lineTo:function(n,t){var e=new ko(this.currentPoint.clone(),new kt(n,t));this.curves.push(e),this.currentPoint.set(n,t)},quadraticCurveTo:function(n,t,e,l){var r=new jo(this.currentPoint.clone(),new kt(n,t),new kt(e,l));this.curves.push(r),this.currentPoint.set(e,l)},bezierCurveTo:function(n,t,e,l,r,i){var u=new Bo(this.currentPoint.clone(),new kt(n,t),new kt(e,l),new kt(r,i));this.curves.push(u),this.currentPoint.set(r,i)},splineThru:function(n){var t=new Ho([this.currentPoint.clone()].concat(n));this.curves.push(t),this.currentPoint.copy(n[n.length-1])},arc:function(n,t,e,l,r,i){var u=this.currentPoint.x,o=this.currentPoint.y;this.absarc(n+u,t+o,e,l,r,i)},absarc:function(n,t,e,l,r,i){this.absellipse(n,t,e,e,l,r,i)},ellipse:function(n,t,e,l,r,i,u,o){var a=this.currentPoint.x,s=this.currentPoint.y;this.absellipse(n+a,t+s,e,l,r,i,u,o)},absellipse:function(n,t,e,l,r,i,u,o){var a=new To(n,t,e,l,r,i,u,o);if(this.curves.length>0){var s=a.getPoint(0);s.equals(this.currentPoint)||this.lineTo(s.x,s.y)}this.curves.push(a);var c=a.getPoint(1);this.currentPoint.copy(c)},copy:function(n){return Wo.prototype.copy.call(this,n),this.currentPoint.copy(n.currentPoint),this},toJSON:function(){var n=Wo.prototype.toJSON.call(this);return n.currentPoint=this.currentPoint.toArray(),n},fromJSON:function(n){return Wo.prototype.fromJSON.call(this,n),this.currentPoint.fromArray(n.currentPoint),this}}),Xo.prototype=Object.assign(Object.create(qo.prototype),{constructor:Xo,getPointsHoles:function(n){for(var t=[],e=0,l=this.holes.length;e<l;e++)t[e]=this.holes[e].getPoints(n);return t},extractPoints:function(n){return{shape:this.getPoints(n),holes:this.getPointsHoles(n)}},copy:function(n){qo.prototype.copy.call(this,n),this.holes=[];for(var t=0,e=n.holes.length;t<e;t++){var l=n.holes[t];this.holes.push(l.clone())}return this},toJSON:function(){var n=qo.prototype.toJSON.call(this);n.uuid=this.uuid,n.holes=[];for(var t=0,e=this.holes.length;t<e;t++){var l=this.holes[t];n.holes.push(l.toJSON())}return n},fromJSON:function(n){qo.prototype.fromJSON.call(this,n),this.uuid=n.uuid,this.holes=[];for(var t=0,e=n.holes.length;t<e;t++){var l=n.holes[t];this.holes.push((new qo).fromJSON(l))}return this}}),Yo.prototype=Object.assign(Object.create(Pe.prototype),{constructor:Yo,isLight:!0,copy:function(n){return Pe.prototype.copy.call(this,n),this.color.copy(n.color),this.intensity=n.intensity,this},toJSON:function(n){var t=Pe.prototype.toJSON.call(this,n);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}),Zo.prototype=Object.assign(Object.create(Yo.prototype),{constructor:Zo,isHemisphereLight:!0,copy:function(n){return Yo.prototype.copy.call(this,n),this.groundColor.copy(n.groundColor),this}}),Object.assign(Jo.prototype,{copy:function(n){return this.camera=n.camera.clone(),this.bias=n.bias,this.radius=n.radius,this.mapSize.copy(n.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var n={};return 0!==this.bias&&(n.bias=this.bias),1!==this.radius&&(n.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(n.mapSize=this.mapSize.toArray()),n.camera=this.camera.toJSON(!1).object,delete n.camera.matrix,n}}),Ko.prototype=Object.assign(Object.create(Jo.prototype),{constructor:Ko,isSpotLightShadow:!0,update:function(n){var t=this.camera,e=2*Ft.RAD2DEG*n.angle,l=this.mapSize.width/this.mapSize.height,r=n.distance||t.far;e===t.fov&&l===t.aspect&&r===t.far||(t.fov=e,t.aspect=l,t.far=r,t.updateProjectionMatrix())}}),Qo.prototype=Object.assign(Object.create(Yo.prototype),{constructor:Qo,isSpotLight:!0,copy:function(n){return Yo.prototype.copy.call(this,n),this.distance=n.distance,this.angle=n.angle,this.penumbra=n.penumbra,this.decay=n.decay,this.target=n.target.clone(),this.shadow=n.shadow.clone(),this}}),$o.prototype=Object.assign(Object.create(Yo.prototype),{constructor:$o,isPointLight:!0,copy:function(n){return Yo.prototype.copy.call(this,n),this.distance=n.distance,this.decay=n.decay,this.shadow=n.shadow.clone(),this}}),na.prototype=Object.assign(Object.create(Jr.prototype),{constructor:na,isOrthographicCamera:!0,copy:function(n,t){return Jr.prototype.copy.call(this,n,t),this.left=n.left,this.right=n.right,this.top=n.top,this.bottom=n.bottom,this.near=n.near,this.far=n.far,this.zoom=n.zoom,this.view=null===n.view?null:Object.assign({},n.view),this},setViewOffset:function(n,t,e,l,r,i){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=n,this.view.fullHeight=t,this.view.offsetX=e,this.view.offsetY=l,this.view.width=r,this.view.height=i,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var n=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),e=(this.right+this.left)/2,l=(this.top+this.bottom)/2,r=e-n,i=e+n,u=l+t,o=l-t;if(null!==this.view&&this.view.enabled){var a=this.zoom/(this.view.width/this.view.fullWidth),s=this.zoom/(this.view.height/this.view.fullHeight),c=(this.right-this.left)/this.view.width,h=(this.top-this.bottom)/this.view.height;i=(r+=c*(this.view.offsetX/a))+c*(this.view.width/a),o=(u-=h*(this.view.offsetY/s))-h*(this.view.height/s)}this.projectionMatrix.makeOrthographic(r,i,u,o,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(n){var t=Pe.prototype.toJSON.call(this,n);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}),ta.prototype=Object.assign(Object.create(Jo.prototype),{constructor:ta}),ea.prototype=Object.assign(Object.create(Yo.prototype),{constructor:ea,isDirectionalLight:!0,copy:function(n){return Yo.prototype.copy.call(this,n),this.target=n.target.clone(),this.shadow=n.shadow.clone(),this}}),la.prototype=Object.assign(Object.create(Yo.prototype),{constructor:la,isAmbientLight:!0}),ra.prototype=Object.assign(Object.create(Yo.prototype),{constructor:ra,isRectAreaLight:!0,copy:function(n){return Yo.prototype.copy.call(this,n),this.width=n.width,this.height=n.height,this},toJSON:function(n){var t=Yo.prototype.toJSON.call(this,n);return t.object.width=this.width,t.object.height=this.height,t}}),Object.assign(ia.prototype,{load:function(n,t,e,l){var r=this,i=new _o(r.manager);i.setPath(r.path),i.load(n,(function(n){t(r.parse(JSON.parse(n)))}),e,l)},parse:function(n){var t=this.textures;function e(n){return void 0===t[n]&&console.warn("THREE.MaterialLoader: Undefined texture",n),t[n]}var l=new no[n.type];if(void 0!==n.uuid&&(l.uuid=n.uuid),void 0!==n.name&&(l.name=n.name),void 0!==n.color&&l.color.setHex(n.color),void 0!==n.roughness&&(l.roughness=n.roughness),void 0!==n.metalness&&(l.metalness=n.metalness),void 0!==n.emissive&&l.emissive.setHex(n.emissive),void 0!==n.specular&&l.specular.setHex(n.specular),void 0!==n.shininess&&(l.shininess=n.shininess),void 0!==n.clearCoat&&(l.clearCoat=n.clearCoat),void 0!==n.clearCoatRoughness&&(l.clearCoatRoughness=n.clearCoatRoughness),void 0!==n.vertexColors&&(l.vertexColors=n.vertexColors),void 0!==n.fog&&(l.fog=n.fog),void 0!==n.flatShading&&(l.flatShading=n.flatShading),void 0!==n.blending&&(l.blending=n.blending),void 0!==n.combine&&(l.combine=n.combine),void 0!==n.side&&(l.side=n.side),void 0!==n.opacity&&(l.opacity=n.opacity),void 0!==n.transparent&&(l.transparent=n.transparent),void 0!==n.alphaTest&&(l.alphaTest=n.alphaTest),void 0!==n.depthTest&&(l.depthTest=n.depthTest),void 0!==n.depthWrite&&(l.depthWrite=n.depthWrite),void 0!==n.colorWrite&&(l.colorWrite=n.colorWrite),void 0!==n.wireframe&&(l.wireframe=n.wireframe),void 0!==n.wireframeLinewidth&&(l.wireframeLinewidth=n.wireframeLinewidth),void 0!==n.wireframeLinecap&&(l.wireframeLinecap=n.wireframeLinecap),void 0!==n.wireframeLinejoin&&(l.wireframeLinejoin=n.wireframeLinejoin),void 0!==n.rotation&&(l.rotation=n.rotation),1!==n.linewidth&&(l.linewidth=n.linewidth),void 0!==n.dashSize&&(l.dashSize=n.dashSize),void 0!==n.gapSize&&(l.gapSize=n.gapSize),void 0!==n.scale&&(l.scale=n.scale),void 0!==n.polygonOffset&&(l.polygonOffset=n.polygonOffset),void 0!==n.polygonOffsetFactor&&(l.polygonOffsetFactor=n.polygonOffsetFactor),void 0!==n.polygonOffsetUnits&&(l.polygonOffsetUnits=n.polygonOffsetUnits),void 0!==n.skinning&&(l.skinning=n.skinning),void 0!==n.morphTargets&&(l.morphTargets=n.morphTargets),void 0!==n.dithering&&(l.dithering=n.dithering),void 0!==n.visible&&(l.visible=n.visible),void 0!==n.userData&&(l.userData=n.userData),void 0!==n.uniforms)for(var r in n.uniforms){var i=n.uniforms[r];switch(l.uniforms[r]={},i.type){case"t":l.uniforms[r].value=e(i.value);break;case"c":l.uniforms[r].value=(new me).setHex(i.value);break;case"v2":l.uniforms[r].value=(new kt).fromArray(i.value);break;case"v3":l.uniforms[r].value=(new Gt).fromArray(i.value);break;case"v4":l.uniforms[r].value=(new Qt).fromArray(i.value);break;case"m3":l.uniforms[r].value=(new Ht).fromArray(i.value);case"m4":l.uniforms[r].value=(new Ut).fromArray(i.value);break;default:l.uniforms[r].value=i.value}}if(void 0!==n.defines&&(l.defines=n.defines),void 0!==n.vertexShader&&(l.vertexShader=n.vertexShader),void 0!==n.fragmentShader&&(l.fragmentShader=n.fragmentShader),void 0!==n.extensions)for(var u in n.extensions)l.extensions[u]=n.extensions[u];if(void 0!==n.shading&&(l.flatShading=1===n.shading),void 0!==n.size&&(l.size=n.size),void 0!==n.sizeAttenuation&&(l.sizeAttenuation=n.sizeAttenuation),void 0!==n.map&&(l.map=e(n.map)),void 0!==n.alphaMap&&(l.alphaMap=e(n.alphaMap),l.transparent=!0),void 0!==n.bumpMap&&(l.bumpMap=e(n.bumpMap)),void 0!==n.bumpScale&&(l.bumpScale=n.bumpScale),void 0!==n.normalMap&&(l.normalMap=e(n.normalMap)),void 0!==n.normalMapType&&(l.normalMapType=n.normalMapType),void 0!==n.normalScale){var o=n.normalScale;!1===Array.isArray(o)&&(o=[o,o]),l.normalScale=(new kt).fromArray(o)}return void 0!==n.displacementMap&&(l.displacementMap=e(n.displacementMap)),void 0!==n.displacementScale&&(l.displacementScale=n.displacementScale),void 0!==n.displacementBias&&(l.displacementBias=n.displacementBias),void 0!==n.roughnessMap&&(l.roughnessMap=e(n.roughnessMap)),void 0!==n.metalnessMap&&(l.metalnessMap=e(n.metalnessMap)),void 0!==n.emissiveMap&&(l.emissiveMap=e(n.emissiveMap)),void 0!==n.emissiveIntensity&&(l.emissiveIntensity=n.emissiveIntensity),void 0!==n.specularMap&&(l.specularMap=e(n.specularMap)),void 0!==n.envMap&&(l.envMap=e(n.envMap)),void 0!==n.envMapIntensity&&(l.envMapIntensity=n.envMapIntensity),void 0!==n.reflectivity&&(l.reflectivity=n.reflectivity),void 0!==n.lightMap&&(l.lightMap=e(n.lightMap)),void 0!==n.lightMapIntensity&&(l.lightMapIntensity=n.lightMapIntensity),void 0!==n.aoMap&&(l.aoMap=e(n.aoMap)),void 0!==n.aoMapIntensity&&(l.aoMapIntensity=n.aoMapIntensity),void 0!==n.gradientMap&&(l.gradientMap=e(n.gradientMap)),l},setPath:function(n){return this.path=n,this},setTextures:function(n){return this.textures=n,this}});var ua=function(n){var t=n.lastIndexOf("/");return-1===t?"./":n.substr(0,t+1)};function oa(n){this.manager=void 0!==n?n:xo}Object.assign(oa.prototype,{load:function(n,t,e,l){var r=this,i=new _o(r.manager);i.setPath(r.path),i.load(n,(function(n){t(r.parse(JSON.parse(n)))}),e,l)},parse:function(n){var t=new Xe,e=n.data.index;if(void 0!==e){var l=new aa[e.type](e.array);t.setIndex(new Ie(l,1))}var r=n.data.attributes;for(var i in r){var u=r[i];l=new aa[u.type](u.array),t.addAttribute(i,new Ie(l,u.itemSize,u.normalized))}var o=n.data.groups||n.data.drawcalls||n.data.offsets;if(void 0!==o)for(var a=0,s=o.length;a!==s;++a){var c=o[a];t.addGroup(c.start,c.count,c.materialIndex)}var h=n.data.boundingSphere;if(void 0!==h){var p=new Gt;void 0!==h.center&&p.fromArray(h.center),t.boundingSphere=new re(p,h.radius)}return n.name&&(t.name=n.name),n.userData&&(t.userData=n.userData),t},setPath:function(n){return this.path=n,this}});var aa={Int8Array,Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function sa(n){this.manager=void 0!==n?n:xo,this.resourcePath=""}Object.assign(sa.prototype,{crossOrigin:"anonymous",load:function(n,t,e,l){var r=this,i=void 0===this.path?ua(n):this.path;this.resourcePath=this.resourcePath||i;var u=new _o(r.manager);u.setPath(this.path),u.load(n,(function(e){var i=null;try{i=JSON.parse(e)}catch(t){return void 0!==l&&l(t),void console.error("THREE:ObjectLoader: Can't parse "+n+".",t.message)}var u=i.metadata;void 0!==u&&void 0!==u.type&&"geometry"!==u.type.toLowerCase()?r.parse(i,t):console.error("THREE.ObjectLoader: Can't load "+n)}),e,l)},setPath:function(n){return this.path=n,this},setResourcePath:function(n){return this.resourcePath=n,this},setCrossOrigin:function(n){return this.crossOrigin=n,this},parse:function(n,t){var e=this.parseShape(n.shapes),l=this.parseGeometries(n.geometries,e),r=this.parseImages(n.images,(function(){void 0!==t&&t(o)})),i=this.parseTextures(n.textures,r),u=this.parseMaterials(n.materials,i),o=this.parseObject(n.object,l,u);return n.animations&&(o.animations=this.parseAnimations(n.animations)),void 0!==n.images&&0!==n.images.length||void 0!==t&&t(o),o},parseShape:function(n){var t={};if(void 0!==n)for(var e=0,l=n.length;e<l;e++){var r=(new Xo).fromJSON(n[e]);t[r.uuid]=r}return t},parseGeometries:function(n,t){var e={};if(void 0!==n)for(var l=new oa,r=0,i=n.length;r<i;r++){var u,o=n[r];switch(o.type){case"PlaneGeometry":case"PlaneBufferGeometry":u=new Hu[o.type](o.width,o.height,o.widthSegments,o.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":u=new Hu[o.type](o.width,o.height,o.depth,o.widthSegments,o.heightSegments,o.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":u=new Hu[o.type](o.radius,o.segments,o.thetaStart,o.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":u=new Hu[o.type](o.radiusTop,o.radiusBottom,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":u=new Hu[o.type](o.radius,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":u=new Hu[o.type](o.radius,o.widthSegments,o.heightSegments,o.phiStart,o.phiLength,o.thetaStart,o.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":u=new Hu[o.type](o.radius,o.detail);break;case"RingGeometry":case"RingBufferGeometry":u=new Hu[o.type](o.innerRadius,o.outerRadius,o.thetaSegments,o.phiSegments,o.thetaStart,o.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":u=new Hu[o.type](o.radius,o.tube,o.radialSegments,o.tubularSegments,o.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":u=new Hu[o.type](o.radius,o.tube,o.tubularSegments,o.radialSegments,o.p,o.q);break;case"LatheGeometry":case"LatheBufferGeometry":u=new Hu[o.type](o.points,o.segments,o.phiStart,o.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":u=new Hu[o.type](o.vertices,o.indices,o.radius,o.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var a=[],s=0,c=o.shapes.length;s<c;s++){var h=t[o.shapes[s]];a.push(h)}u=new Hu[o.type](a,o.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(a=[],s=0,c=o.shapes.length;s<c;s++)h=t[o.shapes[s]],a.push(h);var p=o.options.extrudePath;void 0!==p&&(o.options.extrudePath=(new Vo[p.type]).fromJSON(p)),u=new Hu[o.type](a,o.options);break;case"BufferGeometry":u=l.parse(o);break;case"Geometry":"THREE"in window&&"LegacyJSONLoader"in THREE?u=(new THREE.LegacyJSONLoader).parse(o,this.resourcePath).geometry:console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+o.type+'"');continue}u.uuid=o.uuid,void 0!==o.name&&(u.name=o.name),!0===u.isBufferGeometry&&void 0!==o.userData&&(u.userData=o.userData),e[o.uuid]=u}return e},parseMaterials:function(n,t){var e={},l={};if(void 0!==n){var r=new ia;r.setTextures(t);for(var i=0,u=n.length;i<u;i++){var o=n[i];if("MultiMaterial"===o.type){for(var a=[],s=0;s<o.materials.length;s++){var c=o.materials[s];void 0===e[c.uuid]&&(e[c.uuid]=r.parse(c)),a.push(e[c.uuid])}l[o.uuid]=a}else void 0===e[o.uuid]&&(e[o.uuid]=r.parse(o)),l[o.uuid]=e[o.uuid]}}return l},parseAnimations:function(n){for(var t=[],e=0;e<n.length;e++){var l=n[e],r=mo.parse(l);void 0!==l.uuid&&(r.uuid=l.uuid),t.push(r)}return t},parseImages:function(n,t){var e=this,l={};function r(n){return e.manager.itemStart(n),i.load(n,(function(){e.manager.itemEnd(n)}),void 0,(function(){e.manager.itemError(n),e.manager.itemEnd(n)}))}if(void 0!==n&&n.length>0){var i=new wo(new yo(t));i.setCrossOrigin(this.crossOrigin);for(var u=0,o=n.length;u<o;u++){var a=n[u],s=a.url;if(Array.isArray(s)){l[a.uuid]=[];for(var c=0,h=s.length;c<h;c++){var p=s[c],d=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(p)?p:e.resourcePath+p;l[a.uuid].push(r(d))}}else d=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(a.url)?a.url:e.resourcePath+a.url,l[a.uuid]=r(d)}}return l},parseTextures:function(n,t){function e(n,t){return"number"==typeof n?n:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",n),t[n])}var l={};if(void 0!==n)for(var r=0,i=n.length;r<i;r++){var u,o=n[r];void 0===o.image&&console.warn('THREE.ObjectLoader: No "image" specified for',o.uuid),void 0===t[o.image]&&console.warn("THREE.ObjectLoader: Undefined image",o.image),(u=Array.isArray(t[o.image])?new Pl(t[o.image]):new Kt(t[o.image])).needsUpdate=!0,u.uuid=o.uuid,void 0!==o.name&&(u.name=o.name),void 0!==o.mapping&&(u.mapping=e(o.mapping,ma)),void 0!==o.offset&&u.offset.fromArray(o.offset),void 0!==o.repeat&&u.repeat.fromArray(o.repeat),void 0!==o.center&&u.center.fromArray(o.center),void 0!==o.rotation&&(u.rotation=o.rotation),void 0!==o.wrap&&(u.wrapS=e(o.wrap[0],va),u.wrapT=e(o.wrap[1],va)),void 0!==o.format&&(u.format=o.format),void 0!==o.type&&(u.type=o.type),void 0!==o.encoding&&(u.encoding=o.encoding),void 0!==o.minFilter&&(u.minFilter=e(o.minFilter,ga)),void 0!==o.magFilter&&(u.magFilter=e(o.magFilter,ga)),void 0!==o.anisotropy&&(u.anisotropy=o.anisotropy),void 0!==o.flipY&&(u.flipY=o.flipY),void 0!==o.premultiplyAlpha&&(u.premultiplyAlpha=o.premultiplyAlpha),void 0!==o.unpackAlignment&&(u.unpackAlignment=o.unpackAlignment),l[o.uuid]=u}return l},parseObject:function(n,t,e){var l;function r(n){return void 0===t[n]&&console.warn("THREE.ObjectLoader: Undefined geometry",n),t[n]}function i(n){if(void 0!==n){if(Array.isArray(n)){for(var t=[],l=0,r=n.length;l<r;l++){var i=n[l];void 0===e[i]&&console.warn("THREE.ObjectLoader: Undefined material",i),t.push(e[i])}return t}return void 0===e[n]&&console.warn("THREE.ObjectLoader: Undefined material",n),e[n]}}switch(n.type){case"Scene":l=new di,void 0!==n.background&&Number.isInteger(n.background)&&(l.background=new me(n.background)),void 0!==n.fog&&("Fog"===n.fog.type?l.fog=new pi(n.fog.color,n.fog.near,n.fog.far):"FogExp2"===n.fog.type&&(l.fog=new hi(n.fog.color,n.fog.density)));break;case"PerspectiveCamera":l=new Kr(n.fov,n.aspect,n.near,n.far),void 0!==n.focus&&(l.focus=n.focus),void 0!==n.zoom&&(l.zoom=n.zoom),void 0!==n.filmGauge&&(l.filmGauge=n.filmGauge),void 0!==n.filmOffset&&(l.filmOffset=n.filmOffset),void 0!==n.view&&(l.view=Object.assign({},n.view));break;case"OrthographicCamera":l=new na(n.left,n.right,n.top,n.bottom,n.near,n.far),void 0!==n.zoom&&(l.zoom=n.zoom),void 0!==n.view&&(l.view=Object.assign({},n.view));break;case"AmbientLight":l=new la(n.color,n.intensity);break;case"DirectionalLight":l=new ea(n.color,n.intensity);break;case"PointLight":l=new $o(n.color,n.intensity,n.distance,n.decay);break;case"RectAreaLight":l=new ra(n.color,n.intensity,n.width,n.height);break;case"SpotLight":l=new Qo(n.color,n.intensity,n.distance,n.angle,n.penumbra,n.decay);break;case"HemisphereLight":l=new Zo(n.color,n.groundColor,n.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var u=r(n.geometry),o=i(n.material);l=u.bones&&u.bones.length>0?new xi(u,o):new gl(u,o),void 0!==n.drawMode&&l.setDrawMode(n.drawMode);break;case"LOD":l=new yi;break;case"Line":l=new Mi(r(n.geometry),i(n.material),n.mode);break;case"LineLoop":l=new Si(r(n.geometry),i(n.material));break;case"LineSegments":l=new Ei(r(n.geometry),i(n.material));break;case"PointCloud":case"Points":l=new Ai(r(n.geometry),i(n.material));break;case"Sprite":l=new gi(i(n.material));break;case"Group":l=new Zr;break;default:l=new Pe}if(l.uuid=n.uuid,void 0!==n.name&&(l.name=n.name),void 0!==n.matrix?(l.matrix.fromArray(n.matrix),void 0!==n.matrixAutoUpdate&&(l.matrixAutoUpdate=n.matrixAutoUpdate),l.matrixAutoUpdate&&l.matrix.decompose(l.position,l.quaternion,l.scale)):(void 0!==n.position&&l.position.fromArray(n.position),void 0!==n.rotation&&l.rotation.fromArray(n.rotation),void 0!==n.quaternion&&l.quaternion.fromArray(n.quaternion),void 0!==n.scale&&l.scale.fromArray(n.scale)),void 0!==n.castShadow&&(l.castShadow=n.castShadow),void 0!==n.receiveShadow&&(l.receiveShadow=n.receiveShadow),n.shadow&&(void 0!==n.shadow.bias&&(l.shadow.bias=n.shadow.bias),void 0!==n.shadow.radius&&(l.shadow.radius=n.shadow.radius),void 0!==n.shadow.mapSize&&l.shadow.mapSize.fromArray(n.shadow.mapSize),void 0!==n.shadow.camera&&(l.shadow.camera=this.parseObject(n.shadow.camera))),void 0!==n.visible&&(l.visible=n.visible),void 0!==n.frustumCulled&&(l.frustumCulled=n.frustumCulled),void 0!==n.renderOrder&&(l.renderOrder=n.renderOrder),void 0!==n.userData&&(l.userData=n.userData),void 0!==n.layers&&(l.layers.mask=n.layers),void 0!==n.children)for(var a=n.children,s=0;s<a.length;s++)l.add(this.parseObject(a[s],t,e));if("LOD"===n.type)for(var c=n.levels,h=0;h<c.length;h++){var p=c[h],d=l.getObjectByProperty("uuid",p.object);void 0!==d&&l.addLevel(d,p.distance)}return l}});var ca,ha,pa,da,fa,ma={UVMapping:300,CubeReflectionMapping:dn,CubeRefractionMapping:fn,EquirectangularReflectionMapping:mn,EquirectangularRefractionMapping:vn,SphericalReflectionMapping:gn,CubeUVReflectionMapping:yn,CubeUVRefractionMapping:xn},va={RepeatWrapping:bn,ClampToEdgeWrapping:_n,MirroredRepeatWrapping:wn},ga={NearestFilter:Mn,NearestMipMapNearestFilter:En,NearestMipMapLinearFilter:Sn,LinearFilter:Tn,LinearMipMapNearestFilter:An,LinearMipMapLinearFilter:Ln};function ya(n){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.manager=void 0!==n?n:xo,this.options=void 0}function xa(){this.type="ShapePath",this.color=new me,this.subPaths=[],this.currentPath=null}function ba(n){this.type="Font",this.data=n}function _a(n,t,e,l,r){var i=r.glyphs[n]||r.glyphs["?"];if(i){var u,o,a,s,c,h,p,d,f=new xa;if(i.o)for(var m=i._cachedOutline||(i._cachedOutline=i.o.split(" ")),v=0,g=m.length;v<g;)switch(m[v++]){case"m":u=m[v++]*t+e,o=m[v++]*t+l,f.moveTo(u,o);break;case"l":u=m[v++]*t+e,o=m[v++]*t+l,f.lineTo(u,o);break;case"q":a=m[v++]*t+e,s=m[v++]*t+l,c=m[v++]*t+e,h=m[v++]*t+l,f.quadraticCurveTo(c,h,a,s);break;case"b":a=m[v++]*t+e,s=m[v++]*t+l,c=m[v++]*t+e,h=m[v++]*t+l,p=m[v++]*t+e,d=m[v++]*t+l,f.bezierCurveTo(c,h,p,d,a,s)}return{offsetX:i.ha*t,path:f}}}function wa(){}ya.prototype={constructor:ya,setOptions:function(n){return this.options=n,this},load:function(n,t,e,l){void 0===n&&(n=""),void 0!==this.path&&(n=this.path+n),n=this.manager.resolveURL(n);var r=this,i=go.get(n);if(void 0!==i)return r.manager.itemStart(n),setTimeout((function(){t&&t(i),r.manager.itemEnd(n)}),0),i;fetch(n).then((function(n){return n.blob()})).then((function(n){return createImageBitmap(n,r.options)})).then((function(e){go.add(n,e),t&&t(e),r.manager.itemEnd(n)})).catch((function(t){l&&l(t),r.manager.itemError(n),r.manager.itemEnd(n)}))},setCrossOrigin:function(){return this},setPath:function(n){return this.path=n,this}},Object.assign(xa.prototype,{moveTo:function(n,t){this.currentPath=new qo,this.subPaths.push(this.currentPath),this.currentPath.moveTo(n,t)},lineTo:function(n,t){this.currentPath.lineTo(n,t)},quadraticCurveTo:function(n,t,e,l){this.currentPath.quadraticCurveTo(n,t,e,l)},bezierCurveTo:function(n,t,e,l,r,i){this.currentPath.bezierCurveTo(n,t,e,l,r,i)},splineThru:function(n){this.currentPath.splineThru(n)},toShapes:function(n,t){function e(n){for(var t=[],e=0,l=n.length;e<l;e++){var r=n[e],i=new Xo;i.curves=r.curves,t.push(i)}return t}function l(n,t){for(var e=t.length,l=!1,r=e-1,i=0;i<e;r=i++){var u=t[r],o=t[i],a=o.x-u.x,s=o.y-u.y;if(Math.abs(s)>Number.EPSILON){if(s<0&&(u=t[i],a=-a,o=t[r],s=-s),n.y<u.y||n.y>o.y)continue;if(n.y===u.y){if(n.x===u.x)return!0}else{var c=s*(n.x-u.x)-a*(n.y-u.y);if(0===c)return!0;if(c<0)continue;l=!l}}else{if(n.y!==u.y)continue;if(o.x<=n.x&&n.x<=u.x||u.x<=n.x&&n.x<=o.x)return!0}}return l}var r=yu.isClockWise,i=this.subPaths;if(0===i.length)return[];if(!0===t)return e(i);var u,o,a,s=[];if(1===i.length)return o=i[0],(a=new Xo).curves=o.curves,s.push(a),s;var c=!r(i[0].getPoints());c=n?!c:c;var h,p,d=[],f=[],m=[],v=0;f[v]=void 0,m[v]=[];for(var g=0,y=i.length;g<y;g++)u=r(h=(o=i[g]).getPoints()),(u=n?!u:u)?(!c&&f[v]&&v++,f[v]={s:new Xo,p:h},f[v].s.curves=o.curves,c&&v++,m[v]=[]):m[v].push({h:o,p:h[0]});if(!f[0])return e(i);if(f.length>1){for(var x=!1,b=[],_=0,w=f.length;_<w;_++)d[_]=[];for(_=0,w=f.length;_<w;_++)for(var M=m[_],E=0;E<M.length;E++){for(var S=M[E],T=!0,A=0;A<f.length;A++)l(S.p,f[A].p)&&(_!==A&&b.push({froms:_,tos:A,hole:E}),T?(T=!1,d[A].push(S)):x=!0);T&&d[_].push(S)}b.length>0&&(x||(m=d))}g=0;for(var L=f.length;g<L;g++){a=f[g].s,s.push(a);for(var P=0,C=(p=m[g]).length;P<C;P++)a.holes.push(p[P].h)}return s}}),Object.assign(ba.prototype,{isFont:!0,generateShapes:function(n,t){void 0===t&&(t=100);for(var e=[],l=function(n,t,e){for(var l=Array.from?Array.from(n):String(n).split(""),r=t/e.resolution,i=(e.boundingBox.yMax-e.boundingBox.yMin+e.underlineThickness)*r,u=[],o=0,a=0,s=0;s<l.length;s++){var c=l[s];if("\n"===c)o=0,a-=i;else{var h=_a(c,r,o,a,e);o+=h.offsetX,u.push(h.path)}}return u}(n,t,this.data),r=0,i=l.length;r<i;r++)Array.prototype.push.apply(e,l[r].toShapes());return e}}),Object.assign(function(n){this.manager=void 0!==n?n:xo}.prototype,{load:function(n,t,e,l){var r=this,i=new _o(this.manager);i.setPath(this.path),i.load(n,(function(n){var e;try{e=JSON.parse(n)}catch(t){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),e=JSON.parse(n.substring(65,n.length-2))}var l=r.parse(e);t&&t(l)}),e,l)},parse:function(n){return new ba(n)},setPath:function(n){return this.path=n,this}}),wa.Handlers={handlers:[],add:function(n,t){this.handlers.push(n,t)},get:function(n){for(var t=this.handlers,e=0,l=t.length;e<l;e+=2){var r=t[e],i=t[e+1];if(r.test(n))return i}return null}},Object.assign(wa.prototype,{crossOrigin:"anonymous",onLoadStart:function(){},onLoadProgress:function(){},onLoadComplete:function(){},initMaterials:function(n,t,e){for(var l=[],r=0;r<n.length;++r)l[r]=this.createMaterial(n[r],t,e);return l},createMaterial:(ca={NoBlending:A,NormalBlending:L,AdditiveBlending:P,SubtractiveBlending:C,MultiplyBlending:R,CustomBlending:O},ha=new me,pa=new Eo,da=new ia,function(n,t,e){var l={};function r(n,r,i,u,o){var a,s=t+n,c=wa.Handlers.get(s);null!==c?a=c.load(s):(pa.setCrossOrigin(e),a=pa.load(s)),void 0!==r&&(a.repeat.fromArray(r),1!==r[0]&&(a.wrapS=bn),1!==r[1]&&(a.wrapT=bn)),void 0!==i&&a.offset.fromArray(i),void 0!==u&&("repeat"===u[0]&&(a.wrapS=bn),"mirror"===u[0]&&(a.wrapS=wn),"repeat"===u[1]&&(a.wrapT=bn),"mirror"===u[1]&&(a.wrapT=wn)),void 0!==o&&(a.anisotropy=o);var h=Ft.generateUUID();return l[h]=a,h}var i={uuid:Ft.generateUUID(),type:"MeshLambertMaterial"};for(var u in n){var o=n[u];switch(u){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"DbgName":i.name=o;break;case"blending":i.blending=ca[o];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",u,"is no longer supported.");break;case"colorDiffuse":i.color=ha.fromArray(o).getHex();break;case"colorSpecular":i.specular=ha.fromArray(o).getHex();break;case"colorEmissive":i.emissive=ha.fromArray(o).getHex();break;case"specularCoef":i.shininess=o;break;case"shading":"basic"===o.toLowerCase()&&(i.type="MeshBasicMaterial"),"phong"===o.toLowerCase()&&(i.type="MeshPhongMaterial"),"standard"===o.toLowerCase()&&(i.type="MeshStandardMaterial");break;case"mapDiffuse":i.map=r(o,n.mapDiffuseRepeat,n.mapDiffuseOffset,n.mapDiffuseWrap,n.mapDiffuseAnisotropy);break;case"mapEmissive":i.emissiveMap=r(o,n.mapEmissiveRepeat,n.mapEmissiveOffset,n.mapEmissiveWrap,n.mapEmissiveAnisotropy);break;case"mapLight":i.lightMap=r(o,n.mapLightRepeat,n.mapLightOffset,n.mapLightWrap,n.mapLightAnisotropy);break;case"mapAO":i.aoMap=r(o,n.mapAORepeat,n.mapAOOffset,n.mapAOWrap,n.mapAOAnisotropy);break;case"mapBump":i.bumpMap=r(o,n.mapBumpRepeat,n.mapBumpOffset,n.mapBumpWrap,n.mapBumpAnisotropy);break;case"mapBumpScale":i.bumpScale=o;break;case"mapNormal":i.normalMap=r(o,n.mapNormalRepeat,n.mapNormalOffset,n.mapNormalWrap,n.mapNormalAnisotropy);break;case"mapNormalFactor":i.normalScale=o;break;case"mapSpecular":i.specularMap=r(o,n.mapSpecularRepeat,n.mapSpecularOffset,n.mapSpecularWrap,n.mapSpecularAnisotropy);break;case"mapMetalness":i.metalnessMap=r(o,n.mapMetalnessRepeat,n.mapMetalnessOffset,n.mapMetalnessWrap,n.mapMetalnessAnisotropy);break;case"mapRoughness":i.roughnessMap=r(o,n.mapRoughnessRepeat,n.mapRoughnessOffset,n.mapRoughnessWrap,n.mapRoughnessAnisotropy);break;case"mapAlpha":i.alphaMap=r(o,n.mapAlphaRepeat,n.mapAlphaOffset,n.mapAlphaWrap,n.mapAlphaAnisotropy);break;case"flipSided":i.side=M;break;case"doubleSided":i.side=E;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),i.opacity=o;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":i[u]=o;break;case"vertexColors":!0===o&&(i.vertexColors=T),"face"===o&&(i.vertexColors=1);break;default:console.error("THREE.Loader.createMaterial: Unsupported",u,o)}}return"MeshBasicMaterial"===i.type&&delete i.emissive,"MeshPhongMaterial"!==i.type&&delete i.specular,i.opacity<1&&(i.transparent=!0),da.setTextures(l),da.parse(i)})});var Ma,Ea,Sa,Ta,Aa,La,Pa,Ca,Ra,Oa,Da=function(){return void 0===fa&&(fa=new(window.AudioContext||window.webkitAudioContext)),fa};function Ia(n){this.manager=void 0!==n?n:xo}function za(n,t,e,l){Pe.call(this),this.type="CubeCamera";var r=90,i=new Kr(r,1,n,t);i.up.set(0,-1,0),i.lookAt(new Gt(1,0,0)),this.add(i);var u=new Kr(r,1,n,t);u.up.set(0,-1,0),u.lookAt(new Gt(-1,0,0)),this.add(u);var o=new Kr(r,1,n,t);o.up.set(0,0,1),o.lookAt(new Gt(0,1,0)),this.add(o);var a=new Kr(r,1,n,t);a.up.set(0,0,-1),a.lookAt(new Gt(0,-1,0)),this.add(a);var s=new Kr(r,1,n,t);s.up.set(0,-1,0),s.lookAt(new Gt(0,0,1)),this.add(s);var c=new Kr(r,1,n,t);c.up.set(0,-1,0),c.lookAt(new Gt(0,0,-1)),this.add(c),l=l||{format:Gn,magFilter:Tn,minFilter:Tn},this.renderTarget=new te(e,e,l),this.renderTarget.texture.name="CubeCamera",this.update=function(n,t){null===this.parent&&this.updateMatrixWorld();var e=n.getRenderTarget(),l=this.renderTarget,r=l.texture.generateMipmaps;l.texture.generateMipmaps=!1,l.activeCubeFace=0,n.render(t,i,l),l.activeCubeFace=1,n.render(t,u,l),l.activeCubeFace=2,n.render(t,o,l),l.activeCubeFace=3,n.render(t,a,l),l.activeCubeFace=4,n.render(t,s,l),l.texture.generateMipmaps=r,l.activeCubeFace=5,n.render(t,c,l),n.setRenderTarget(e)},this.clear=function(n,t,e,l){for(var r=n.getRenderTarget(),i=this.renderTarget,u=0;u<6;u++)i.activeCubeFace=u,n.setRenderTarget(i),n.clear(t,e,l);n.setRenderTarget(r)}}function Na(n){this.autoStart=void 0===n||n,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function Ba(){Pe.call(this),this.type="AudioListener",this.context=Da(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0}function Fa(n){Pe.call(this),this.type="Audio",this.listener=n,this.context=n.context,this.gain=this.context.createGain(),this.gain.connect(n.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.startTime=0,this.offset=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]}function ka(n){Fa.call(this,n),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}function Ua(n,t){this.analyser=n.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),n.getOutput().connect(this.analyser)}function ja(n,t,e){this.binding=n,this.valueSize=e;var l,r=Float64Array;switch(t){case"quaternion":l=this._slerp;break;case"string":case"bool":r=Array,l=this._select;break;default:l=this._lerp}this.buffer=new r(4*e),this._mixBufferRegion=l,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Object.assign(Ia.prototype,{load:function(n,t,e,l){var r=new _o(this.manager);r.setResponseType("arraybuffer"),r.setPath(this.path),r.load(n,(function(n){var e=n.slice(0);Da().decodeAudioData(e,(function(n){t(n)}))}),e,l)},setPath:function(n){return this.path=n,this}}),Object.assign(function(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Kr,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Kr,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}.prototype,{update:(Ra=new Ut,Oa=new Ut,function(n){if(Ma!==this||Ea!==n.focus||Sa!==n.fov||Ta!==n.aspect*this.aspect||Aa!==n.near||La!==n.far||Pa!==n.zoom||Ca!==this.eyeSep){Ma=this,Ea=n.focus,Sa=n.fov,Ta=n.aspect*this.aspect,Aa=n.near,La=n.far,Pa=n.zoom;var t,e,l=n.projectionMatrix.clone(),r=(Ca=this.eyeSep/2)*Aa/Ea,i=Aa*Math.tan(Ft.DEG2RAD*Sa*.5)/Pa;Oa.elements[12]=-Ca,Ra.elements[12]=Ca,t=-i*Ta+r,e=i*Ta+r,l.elements[0]=2*Aa/(e-t),l.elements[8]=(e+t)/(e-t),this.cameraL.projectionMatrix.copy(l),t=-i*Ta-r,e=i*Ta-r,l.elements[0]=2*Aa/(e-t),l.elements[8]=(e+t)/(e-t),this.cameraR.projectionMatrix.copy(l)}this.cameraL.matrixWorld.copy(n.matrixWorld).multiply(Oa),this.cameraR.matrixWorld.copy(n.matrixWorld).multiply(Ra)})}),za.prototype=Object.create(Pe.prototype),za.prototype.constructor=za,Object.assign(Na.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var n=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var t=("undefined"==typeof performance?Date:performance).now();n=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=n}return n}}),Ba.prototype=Object.assign(Object.create(Pe.prototype),{constructor:Ba,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(n){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=n,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(n){return this.gain.gain.setTargetAtTime(n,this.context.currentTime,.01),this},updateMatrixWorld:function(){var n=new Gt,t=new jt,e=new Gt,l=new Gt,r=new Na;return function(i){Pe.prototype.updateMatrixWorld.call(this,i);var u=this.context.listener,o=this.up;if(this.timeDelta=r.getDelta(),this.matrixWorld.decompose(n,t,e),l.set(0,0,-1).applyQuaternion(t),u.positionX){var a=this.context.currentTime+this.timeDelta;u.positionX.linearRampToValueAtTime(n.x,a),u.positionY.linearRampToValueAtTime(n.y,a),u.positionZ.linearRampToValueAtTime(n.z,a),u.forwardX.linearRampToValueAtTime(l.x,a),u.forwardY.linearRampToValueAtTime(l.y,a),u.forwardZ.linearRampToValueAtTime(l.z,a),u.upX.linearRampToValueAtTime(o.x,a),u.upY.linearRampToValueAtTime(o.y,a),u.upZ.linearRampToValueAtTime(o.z,a)}else u.setPosition(n.x,n.y,n.z),u.setOrientation(l.x,l.y,l.z,o.x,o.y,o.z)}}()}),Fa.prototype=Object.assign(Object.create(Pe.prototype),{constructor:Fa,getOutput:function(){return this.gain},setNodeSource:function(n){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=n,this.connect(),this},setMediaElementSource:function(n){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(n),this.connect(),this},setBuffer:function(n){return this.buffer=n,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){var n=this.context.createBufferSource();return n.buffer=this.buffer,n.loop=this.loop,n.onended=this.onEnded.bind(this),this.startTime=this.context.currentTime,n.start(this.startTime,this.offset),this.isPlaying=!0,this.source=n,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this.source.stop(),this.source.onended=null,this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this.source.stop(),this.source.onended=null,this.offset=0,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var n=1,t=this.filters.length;n<t;n++)this.filters[n-1].connect(this.filters[n]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var n=1,t=this.filters.length;n<t;n++)this.filters[n-1].disconnect(this.filters[n]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(n){return n||(n=[]),!0===this.isPlaying?(this.disconnect(),this.filters=n,this.connect()):this.filters=n,this},setDetune:function(n){if(this.detune=n,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(n){return this.setFilters(n?[n]:[])},setPlaybackRate:function(n){if(!1!==this.hasPlaybackControl)return this.playbackRate=n,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(n){if(!1!==this.hasPlaybackControl)return this.loop=n,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},getVolume:function(){return this.gain.gain.value},setVolume:function(n){return this.gain.gain.setTargetAtTime(n,this.context.currentTime,.01),this}}),ka.prototype=Object.assign(Object.create(Fa.prototype),{constructor:ka,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(n){return this.panner.refDistance=n,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(n){return this.panner.rolloffFactor=n,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(n){return this.panner.distanceModel=n,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(n){return this.panner.maxDistance=n,this},setDirectionalCone:function(n,t,e){return this.panner.coneInnerAngle=n,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=e,this},updateMatrixWorld:function(){var n=new Gt,t=new jt,e=new Gt,l=new Gt;return function(r){if(Pe.prototype.updateMatrixWorld.call(this,r),!1!==this.isPlaying){this.matrixWorld.decompose(n,t,e),l.set(0,0,1).applyQuaternion(t);var i=this.panner;if(i.positionX){var u=this.context.currentTime+this.listener.timeDelta;i.positionX.linearRampToValueAtTime(n.x,u),i.positionY.linearRampToValueAtTime(n.y,u),i.positionZ.linearRampToValueAtTime(n.z,u),i.orientationX.linearRampToValueAtTime(l.x,u),i.orientationY.linearRampToValueAtTime(l.y,u),i.orientationZ.linearRampToValueAtTime(l.z,u)}else i.setPosition(n.x,n.y,n.z),i.setOrientation(l.x,l.y,l.z)}}}()}),Object.assign(Ua.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var n=0,t=this.getFrequencyData(),e=0;e<t.length;e++)n+=t[e];return n/t.length}}),Object.assign(ja.prototype,{accumulate:function(n,t){var e=this.buffer,l=this.valueSize,r=n*l+l,i=this.cumulativeWeight;if(0===i){for(var u=0;u!==l;++u)e[r+u]=e[u];i=t}else{var o=t/(i+=t);this._mixBufferRegion(e,r,0,o,l)}this.cumulativeWeight=i},apply:function(n){var t=this.valueSize,e=this.buffer,l=n*t+t,r=this.cumulativeWeight,i=this.binding;if(this.cumulativeWeight=0,r<1){var u=3*t;this._mixBufferRegion(e,l,u,1-r,t)}for(var o=t,a=t+t;o!==a;++o)if(e[o]!==e[o+t]){i.setValue(e,l);break}},saveOriginalState:function(){var n=this.binding,t=this.buffer,e=this.valueSize,l=3*e;n.getValue(t,l);for(var r=e,i=l;r!==i;++r)t[r]=t[l+r%e];this.cumulativeWeight=0},restoreOriginalState:function(){var n=3*this.valueSize;this.binding.setValue(this.buffer,n)},_select:function(n,t,e,l,r){if(l>=.5)for(var i=0;i!==r;++i)n[t+i]=n[e+i]},_slerp:function(n,t,e,l){jt.slerpFlat(n,t,n,t,n,e,l)},_lerp:function(n,t,e,l,r){for(var i=1-l,u=0;u!==r;++u){var o=t+u;n[o]=n[o]*i+n[e+u]*l}}});var Ga,Ha,Va,Wa,qa,Xa,Ya,Za,Ja,Ka,Qa,$a,ns,ts,es,ls="\\[\\]\\.:\\/";function rs(n,t,e){var l=e||is.parseTrackName(t);this._targetGroup=n,this._bindings=n.subscribe_(t,l)}function is(n,t,e){this.path=t,this.parsedPath=e||is.parseTrackName(t),this.node=is.findNode(n,this.parsedPath.nodeName)||n,this.rootNode=n}function us(n,t,e){this._mixer=n,this._clip=t,this._localRoot=e||null;for(var l=t.tracks,r=l.length,i=new Array(r),u={endingStart:_t,endingEnd:_t},o=0;o!==r;++o){var a=l[o].createInterpolant(null);i[o]=a,a.settings=u}this._interpolantSettings=u,this._interpolants=i,this._propertyBindings=new Array(r),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function os(n){this._root=n,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function as(n){"string"==typeof n&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),n=arguments[1]),this.value=n}function ss(){Xe.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function cs(n,t,e){fi.call(this,n,t),this.meshPerAttribute=e||1}function hs(n,t,e,l){"number"==typeof e&&(l=e,e=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),Ie.call(this,n,t,e),this.meshPerAttribute=l||1}function ps(n,t,e,l){this.ray=new fl(n,t),this.near=e||0,this.far=l||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function ds(n,t){return n.distance-t.distance}function fs(n,t,e,l){if(!1!==n.visible&&(n.raycast(t,e),!0===l))for(var r=n.children,i=0,u=r.length;i<u;i++)fs(r[i],t,e,!0)}function ms(n,t,e){return this.radius=void 0!==n?n:1,this.phi=void 0!==t?t:0,this.theta=void 0!==e?e:0,this}function vs(n,t){this.min=void 0!==n?n:new kt(1/0,1/0),this.max=void 0!==t?t:new kt(-1/0,-1/0)}function gs(n,t){this.start=void 0!==n?n:new Gt,this.end=void 0!==t?t:new Gt}function ys(n){Pe.call(this),this.material=n,this.render=function(){}}function xs(n,t,e,l){this.object=n,this.size=void 0!==t?t:1;var r=void 0!==e?e:16711680,i=void 0!==l?l:1,u=0,o=this.object.geometry;o&&o.isGeometry?u=3*o.faces.length:o&&o.isBufferGeometry&&(u=o.attributes.normal.count);var a=new Xe,s=new Ge(2*u*3,3);a.addAttribute("position",s),Ei.call(this,a,new wi({color:r,linewidth:i})),this.matrixAutoUpdate=!1,this.update()}function bs(n,t){Pe.call(this),this.light=n,this.light.updateMatrixWorld(),this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;for(var e=new Xe,l=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],r=0,i=1;r<32;r++,i++){var u=r/32*Math.PI*2,o=i/32*Math.PI*2;l.push(Math.cos(u),Math.sin(u),1,Math.cos(o),Math.sin(o),1)}e.addAttribute("position",new Ge(l,3));var a=new wi({fog:!1});this.cone=new Ei(e,a),this.add(this.cone),this.update()}function _s(n){var t=[];n&&n.isBone&&t.push(n);for(var e=0;e<n.children.length;e++)t.push.apply(t,_s(n.children[e]));return t}function ws(n){for(var t=_s(n),e=new Xe,l=[],r=[],i=new me(0,0,1),u=new me(0,1,0),o=0;o<t.length;o++){var a=t[o];a.parent&&a.parent.isBone&&(l.push(0,0,0),l.push(0,0,0),r.push(i.r,i.g,i.b),r.push(u.r,u.g,u.b))}e.addAttribute("position",new Ge(l,3)),e.addAttribute("color",new Ge(r,3));var s=new wi({vertexColors:T,depthTest:!1,depthWrite:!1,transparent:!0});Ei.call(this,e,s),this.root=n,this.bones=t,this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1}function Ms(n,t,e){this.light=n,this.light.updateMatrixWorld(),this.color=e;var l=new Lu(t,4,2),r=new vl({wireframe:!0,fog:!1});gl.call(this,l,r),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function Es(n,t){this.type="RectAreaLightHelper",this.light=n,this.color=t;var e=new Xe;e.addAttribute("position",new Ge([1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),e.computeBoundingSphere();var l=new wi({fog:!1});Mi.call(this,e,l);var r=new Xe;r.addAttribute("position",new Ge([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),r.computeBoundingSphere(),this.add(new gl(r,new vl({side:M,fog:!1}))),this.update()}function Ss(n,t,e){Pe.call(this),this.light=n,this.light.updateMatrixWorld(),this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;var l=new Ui(t);l.rotateY(.5*Math.PI),this.material=new vl({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=T);var r=l.getAttribute("position"),i=new Float32Array(3*r.count);l.addAttribute("color",new Ie(i,3)),this.add(new gl(l,this.material)),this.update()}function Ts(n,t,e,l){n=n||10,t=t||10,e=new me(void 0!==e?e:4473924),l=new me(void 0!==l?l:8947848);for(var r=t/2,i=n/t,u=n/2,o=[],a=[],s=0,c=0,h=-u;s<=t;s++,h+=i){o.push(-u,0,h,u,0,h),o.push(h,0,-u,h,0,u);var p=s===r?e:l;p.toArray(a,c),c+=3,p.toArray(a,c),c+=3,p.toArray(a,c),c+=3,p.toArray(a,c),c+=3}var d=new Xe;d.addAttribute("position",new Ge(o,3)),d.addAttribute("color",new Ge(a,3));var f=new wi({vertexColors:T});Ei.call(this,d,f)}function As(n,t,e,l,r,i){n=n||10,t=t||16,e=e||8,l=l||64,r=new me(void 0!==r?r:4473924),i=new me(void 0!==i?i:8947848);var u,o,a,s,c,h,p,d=[],f=[];for(s=0;s<=t;s++)a=s/t*(2*Math.PI),u=Math.sin(a)*n,o=Math.cos(a)*n,d.push(0,0,0),d.push(u,0,o),p=1&s?r:i,f.push(p.r,p.g,p.b),f.push(p.r,p.g,p.b);for(s=0;s<=e;s++)for(p=1&s?r:i,h=n-n/e*s,c=0;c<l;c++)a=c/l*(2*Math.PI),u=Math.sin(a)*h,o=Math.cos(a)*h,d.push(u,0,o),f.push(p.r,p.g,p.b),a=(c+1)/l*(2*Math.PI),u=Math.sin(a)*h,o=Math.cos(a)*h,d.push(u,0,o),f.push(p.r,p.g,p.b);var m=new Xe;m.addAttribute("position",new Ge(d,3)),m.addAttribute("color",new Ge(f,3));var v=new wi({vertexColors:T});Ei.call(this,m,v)}function Ls(n,t,e,l){this.object=n,this.size=void 0!==t?t:1;var r=void 0!==e?e:16776960,i=void 0!==l?l:1,u=0,o=this.object.geometry;o&&o.isGeometry?u=o.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var a=new Xe,s=new Ge(2*u*3,3);a.addAttribute("position",s),Ei.call(this,a,new wi({color:r,linewidth:i})),this.matrixAutoUpdate=!1,this.update()}function Ps(n,t,e){Pe.call(this),this.light=n,this.light.updateMatrixWorld(),this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.color=e,void 0===t&&(t=1);var l=new Xe;l.addAttribute("position",new Ge([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var r=new wi({fog:!1});this.lightPlane=new Mi(l,r),this.add(this.lightPlane),(l=new Xe).addAttribute("position",new Ge([0,0,0,0,0,1],3)),this.targetLine=new Mi(l,r),this.add(this.targetLine),this.update()}function Cs(n){var t=new Xe,e=new wi({color:16777215,vertexColors:1}),l=[],r=[],i={},u=new me(16755200),o=new me(16711680),a=new me(43775),s=new me(16777215),c=new me(3355443);function h(n,t,e){p(n,e),p(t,e)}function p(n,t){l.push(0,0,0),r.push(t.r,t.g,t.b),void 0===i[n]&&(i[n]=[]),i[n].push(l.length/3-1)}h("n1","n2",u),h("n2","n4",u),h("n4","n3",u),h("n3","n1",u),h("f1","f2",u),h("f2","f4",u),h("f4","f3",u),h("f3","f1",u),h("n1","f1",u),h("n2","f2",u),h("n3","f3",u),h("n4","f4",u),h("p","n1",o),h("p","n2",o),h("p","n3",o),h("p","n4",o),h("u1","u2",a),h("u2","u3",a),h("u3","u1",a),h("c","t",s),h("p","c",c),h("cn1","cn2",c),h("cn3","cn4",c),h("cf1","cf2",c),h("cf3","cf4",c),t.addAttribute("position",new Ge(l,3)),t.addAttribute("color",new Ge(r,3)),Ei.call(this,t,e),this.camera=n,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=i,this.update()}function Rs(n,t){this.object=n,void 0===t&&(t=16776960);var e=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),l=new Float32Array(24),r=new Xe;r.setIndex(new Ie(e,1)),r.addAttribute("position",new Ie(l,3)),Ei.call(this,r,new wi({color:t})),this.matrixAutoUpdate=!1,this.update()}function Os(n,t){this.type="Box3Helper",this.box=n;var e=void 0!==t?t:16776960,l=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Xe;r.setIndex(new Ie(l,1)),r.addAttribute("position",new Ge([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),Ei.call(this,r,new wi({color:e})),this.geometry.computeBoundingSphere()}function Ds(n,t,e){this.type="PlaneHelper",this.plane=n,this.size=void 0===t?1:t;var l=void 0!==e?e:16776960,r=new Xe;r.addAttribute("position",new Ge([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),r.computeBoundingSphere(),Mi.call(this,r,new wi({color:l}));var i=new Xe;i.addAttribute("position",new Ge([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),i.computeBoundingSphere(),this.add(new gl(i,new vl({color:l,opacity:.2,transparent:!0,depthWrite:!1})))}function Is(n,t,e,l,r,i){Pe.call(this),void 0===n&&(n=new Gt(0,0,1)),void 0===t&&(t=new Gt(0,0,0)),void 0===e&&(e=1),void 0===l&&(l=16776960),void 0===r&&(r=.2*e),void 0===i&&(i=.2*r),void 0===$a&&(($a=new Xe).addAttribute("position",new Ge([0,0,0,0,1,0],3)),(ns=new Fu(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(t),this.line=new Mi($a,new wi({color:l})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new gl(ns,new vl({color:l})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(n),this.setLength(e,r,i)}function zs(n){var t=[0,0,0,n=n||1,0,0,0,0,0,0,n,0,0,0,0,0,0,n],e=new Xe;e.addAttribute("position",new Ge(t,3)),e.addAttribute("color",new Ge([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var l=new wi({vertexColors:T});Ei.call(this,e,l)}function Ns(n){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),Do.call(this,n),this.type="catmullrom"}Object.assign(rs.prototype,{getValue:function(n,t){this.bind();var e=this._targetGroup.nCachedObjects_,l=this._bindings[e];void 0!==l&&l.getValue(n,t)},setValue:function(n,t){for(var e=this._bindings,l=this._targetGroup.nCachedObjects_,r=e.length;l!==r;++l)e[l].setValue(n,t)},bind:function(){for(var n=this._bindings,t=this._targetGroup.nCachedObjects_,e=n.length;t!==e;++t)n[t].bind()},unbind:function(){for(var n=this._bindings,t=this._targetGroup.nCachedObjects_,e=n.length;t!==e;++t)n[t].unbind()}}),Object.assign(is,{Composite:rs,create:function(n,t,e){return n&&n.isAnimationObjectGroup?new is.Composite(n,t,e):new is(n,t,e)},sanitizeNodeName:(Ja=new RegExp("["+ls+"]","g"),function(n){return n.replace(/\s/g,"_").replace(Ja,"")}),parseTrackName:(Ga="[^"+ls+"]",Ha="[^"+ls.replace("\\.","")+"]",Va=/((?:WC+[\/:])*)/.source.replace("WC",Ga),Wa=/(WCOD+)?/.source.replace("WCOD",Ha),qa=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Ga),Xa=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Ga),Ya=new RegExp("^"+Va+Wa+qa+Xa+"$"),Za=["material","materials","bones"],function(n){var t=Ya.exec(n);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+n);var e={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},l=e.nodeName&&e.nodeName.lastIndexOf(".");if(void 0!==l&&-1!==l){var r=e.nodeName.substring(l+1);-1!==Za.indexOf(r)&&(e.nodeName=e.nodeName.substring(0,l),e.objectName=r)}if(null===e.propertyName||0===e.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+n);return e}),findNode:function(n,t){if(!t||""===t||"root"===t||"."===t||-1===t||t===n.name||t===n.uuid)return n;if(n.skeleton){var e=n.skeleton.getBoneByName(t);if(void 0!==e)return e}if(n.children){var l=function(n){for(var e=0;e<n.length;e++){var r=n[e];if(r.name===t||r.uuid===t)return r;var i=l(r.children);if(i)return i}return null},r=l(n.children);if(r)return r}return null}}),Object.assign(is.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(n,t){n[t]=this.node[this.propertyName]},function(n,t){for(var e=this.resolvedProperty,l=0,r=e.length;l!==r;++l)n[t++]=e[l]},function(n,t){n[t]=this.resolvedProperty[this.propertyIndex]},function(n,t){this.resolvedProperty.toArray(n,t)}],SetterByBindingTypeAndVersioning:[[function(n,t){this.targetObject[this.propertyName]=n[t]},function(n,t){this.targetObject[this.propertyName]=n[t],this.targetObject.needsUpdate=!0},function(n,t){this.targetObject[this.propertyName]=n[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(n,t){for(var e=this.resolvedProperty,l=0,r=e.length;l!==r;++l)e[l]=n[t++]},function(n,t){for(var e=this.resolvedProperty,l=0,r=e.length;l!==r;++l)e[l]=n[t++];this.targetObject.needsUpdate=!0},function(n,t){for(var e=this.resolvedProperty,l=0,r=e.length;l!==r;++l)e[l]=n[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(n,t){this.resolvedProperty[this.propertyIndex]=n[t]},function(n,t){this.resolvedProperty[this.propertyIndex]=n[t],this.targetObject.needsUpdate=!0},function(n,t){this.resolvedProperty[this.propertyIndex]=n[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(n,t){this.resolvedProperty.fromArray(n,t)},function(n,t){this.resolvedProperty.fromArray(n,t),this.targetObject.needsUpdate=!0},function(n,t){this.resolvedProperty.fromArray(n,t),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(n,t){this.bind(),this.getValue(n,t)},setValue:function(n,t){this.bind(),this.setValue(n,t)},bind:function(){var n=this.node,t=this.parsedPath,e=t.objectName,l=t.propertyName,r=t.propertyIndex;if(n||(n=is.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=n),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,n){if(e){var i=t.objectIndex;switch(e){case"materials":if(!n.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!n.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);n=n.material.materials;break;case"bones":if(!n.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);n=n.skeleton.bones;for(var u=0;u<n.length;u++)if(n[u].name===i){i=u;break}break;default:if(void 0===n[e])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);n=n[e]}if(void 0!==i){if(void 0===n[i])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,n);n=n[i]}}var o=n[l];if(void 0!==o){var a=this.Versioning.None;this.targetObject=n,void 0!==n.needsUpdate?a=this.Versioning.NeedsUpdate:void 0!==n.matrixWorldNeedsUpdate&&(a=this.Versioning.MatrixWorldNeedsUpdate);var s=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===l){if(!n.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(n.geometry.isBufferGeometry){if(!n.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(u=0;u<this.node.geometry.morphAttributes.position.length;u++)if(n.geometry.morphAttributes.position[u].name===r){r=u;break}}else{if(!n.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(u=0;u<this.node.geometry.morphTargets.length;u++)if(n.geometry.morphTargets[u].name===r){r=u;break}}}s=this.BindingType.ArrayElement,this.resolvedProperty=o,this.propertyIndex=r}else void 0!==o.fromArray&&void 0!==o.toArray?(s=this.BindingType.HasFromToArray,this.resolvedProperty=o):Array.isArray(o)?(s=this.BindingType.EntireArray,this.resolvedProperty=o):this.propertyName=l;this.getValue=this.GetterByBindingType[s],this.setValue=this.SetterByBindingTypeAndVersioning[s][a]}else{var c=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+l+" but it wasn't found.",n)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),Object.assign(is.prototype,{_getValue_unbound:is.prototype.getValue,_setValue_unbound:is.prototype.setValue}),Object.assign(function(){this.uuid=Ft.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var n={};this._indicesByUUID=n;for(var t=0,e=arguments.length;t!==e;++t)n[arguments[t].uuid]=t;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var l=this;this.stats={objects:{get total(){return l._objects.length},get inUse(){return this.total-l.nCachedObjects_}},get bindingsPerObject(){return l._bindings.length}}}.prototype,{isAnimationObjectGroup:!0,add:function(){for(var n=this._objects,t=n.length,e=this.nCachedObjects_,l=this._indicesByUUID,r=this._paths,i=this._parsedPaths,u=this._bindings,o=u.length,a=void 0,s=0,c=arguments.length;s!==c;++s){var h=arguments[s],p=h.uuid,d=l[p];if(void 0===d){d=t++,l[p]=d,n.push(h);for(var f=0,m=o;f!==m;++f)u[f].push(new is(h,r[f],i[f]))}else if(d<e){a=n[d];var v=--e,g=n[v];for(l[g.uuid]=d,n[d]=g,l[p]=v,n[v]=h,f=0,m=o;f!==m;++f){var y=u[f],x=y[v],b=y[d];y[d]=x,void 0===b&&(b=new is(h,r[f],i[f])),y[v]=b}}else n[d]!==a&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=e},remove:function(){for(var n=this._objects,t=this.nCachedObjects_,e=this._indicesByUUID,l=this._bindings,r=l.length,i=0,u=arguments.length;i!==u;++i){var o=arguments[i],a=o.uuid,s=e[a];if(void 0!==s&&s>=t){var c=t++,h=n[c];e[h.uuid]=s,n[s]=h,e[a]=c,n[c]=o;for(var p=0,d=r;p!==d;++p){var f=l[p],m=f[c],v=f[s];f[s]=m,f[c]=v}}}this.nCachedObjects_=t},uncache:function(){for(var n=this._objects,t=n.length,e=this.nCachedObjects_,l=this._indicesByUUID,r=this._bindings,i=r.length,u=0,o=arguments.length;u!==o;++u){var a=arguments[u].uuid,s=l[a];if(void 0!==s)if(delete l[a],s<e){var c=--e,h=n[c],p=n[g=--t];l[h.uuid]=s,n[s]=h,l[p.uuid]=c,n[c]=p,n.pop();for(var d=0,f=i;d!==f;++d){var m=(y=r[d])[c],v=y[g];y[s]=m,y[c]=v,y.pop()}}else{var g;for(l[(p=n[g=--t]).uuid]=s,n[s]=p,n.pop(),d=0,f=i;d!==f;++d){var y;(y=r[d])[s]=y[g],y.pop()}}}this.nCachedObjects_=e},subscribe_:function(n,t){var e=this._bindingsIndicesByPath,l=e[n],r=this._bindings;if(void 0!==l)return r[l];var i=this._paths,u=this._parsedPaths,o=this._objects,a=o.length,s=this.nCachedObjects_,c=new Array(a);l=r.length,e[n]=l,i.push(n),u.push(t),r.push(c);for(var h=s,p=o.length;h!==p;++h){var d=o[h];c[h]=new is(d,n,t)}return c},unsubscribe_:function(n){var t=this._bindingsIndicesByPath,e=t[n];if(void 0!==e){var l=this._paths,r=this._parsedPaths,i=this._bindings,u=i.length-1,o=i[u];t[n[u]]=e,i[e]=o,i.pop(),r[e]=r[u],r.pop(),l[e]=l[u],l.pop()}}}),Object.assign(us.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(n){return this._startTime=n,this},setLoop:function(n,t){return this.loop=n,this.repetitions=t,this},setEffectiveWeight:function(n){return this.weight=n,this._effectiveWeight=this.enabled?n:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(n){return this._scheduleFading(n,0,1)},fadeOut:function(n){return this._scheduleFading(n,1,0)},crossFadeFrom:function(n,t,e){if(n.fadeOut(t),this.fadeIn(t),e){var l=this._clip.duration,r=n._clip.duration,i=r/l,u=l/r;n.warp(1,i,t),this.warp(u,1,t)}return this},crossFadeTo:function(n,t,e){return n.crossFadeFrom(this,t,e)},stopFading:function(){var n=this._weightInterpolant;return null!==n&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(n)),this},setEffectiveTimeScale:function(n){return this.timeScale=n,this._effectiveTimeScale=this.paused?0:n,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(n){return this.timeScale=this._clip.duration/n,this.stopWarping()},syncWith:function(n){return this.time=n.time,this.timeScale=n.timeScale,this.stopWarping()},halt:function(n){return this.warp(this._effectiveTimeScale,0,n)},warp:function(n,t,e){var l=this._mixer,r=l.time,i=this._timeScaleInterpolant,u=this.timeScale;null===i&&(i=l._lendControlInterpolant(),this._timeScaleInterpolant=i);var o=i.parameterPositions,a=i.sampleValues;return o[0]=r,o[1]=r+e,a[0]=n/u,a[1]=t/u,this},stopWarping:function(){var n=this._timeScaleInterpolant;return null!==n&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(n)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(n,t,e,l){if(this.enabled){var r=this._startTime;if(null!==r){var i=(n-r)*e;if(i<0||0===e)return;this._startTime=null,t=e*i}t*=this._updateTimeScale(n);var u=this._updateTime(t),o=this._updateWeight(n);if(o>0)for(var a=this._interpolants,s=this._propertyBindings,c=0,h=a.length;c!==h;++c)a[c].evaluate(u),s[c].accumulate(l,o)}else this._updateWeight(n)},_updateWeight:function(n){var t=0;if(this.enabled){t=this.weight;var e=this._weightInterpolant;if(null!==e){var l=e.evaluate(n)[0];t*=l,n>e.parameterPositions[1]&&(this.stopFading(),0===l&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(n){var t=0;if(!this.paused){t=this.timeScale;var e=this._timeScaleInterpolant;null!==e&&(t*=e.evaluate(n)[0],n>e.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t))}return this._effectiveTimeScale=t,t},_updateTime:function(n){var t=this.time+n,e=this._clip.duration,l=this.loop,r=this._loopCount,i=2202===l;if(0===n)return-1===r?t:i&&1==(1&r)?e-t:t;if(2200===l){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));n:{if(t>=e)t=e;else{if(!(t<0))break n;t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:n<0?-1:1})}}else{if(-1===r&&(n>=0?(r=0,this._setEndings(!0,0===this.repetitions,i)):this._setEndings(0===this.repetitions,!0,i)),t>=e||t<0){var u=Math.floor(t/e);t-=e*u,r+=Math.abs(u);var o=this.repetitions-r;if(o<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=n>0?e:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:n>0?1:-1});else{if(1===o){var a=n<0;this._setEndings(a,!a,i)}else this._setEndings(!1,!1,i);this._loopCount=r,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:u})}}if(i&&1==(1&r))return this.time=t,e-t}return this.time=t,t},_setEndings:function(n,t,e){var l=this._interpolantSettings;e?(l.endingStart=wt,l.endingEnd=wt):(l.endingStart=n?this.zeroSlopeAtStart?wt:_t:Mt,l.endingEnd=t?this.zeroSlopeAtEnd?wt:_t:Mt)},_scheduleFading:function(n,t,e){var l=this._mixer,r=l.time,i=this._weightInterpolant;null===i&&(i=l._lendControlInterpolant(),this._weightInterpolant=i);var u=i.parameterPositions,o=i.sampleValues;return u[0]=r,o[0]=t,u[1]=r+n,o[1]=e,this}}),os.prototype=Object.assign(Object.create(t.prototype),{constructor:os,_bindAction:function(n,t){var e=n._localRoot||this._root,l=n._clip.tracks,r=l.length,i=n._propertyBindings,u=n._interpolants,o=e.uuid,a=this._bindingsByRootAndName,s=a[o];void 0===s&&(s={},a[o]=s);for(var c=0;c!==r;++c){var h=l[c],p=h.name,d=s[p];if(void 0!==d)i[c]=d;else{if(void 0!==(d=i[c])){null===d._cacheIndex&&(++d.referenceCount,this._addInactiveBinding(d,o,p));continue}var f=t&&t._propertyBindings[c].binding.parsedPath;++(d=new ja(is.create(e,p,f),h.ValueTypeName,h.getValueSize())).referenceCount,this._addInactiveBinding(d,o,p),i[c]=d}u[c].resultBuffer=d.buffer}},_activateAction:function(n){if(!this._isActiveAction(n)){if(null===n._cacheIndex){var t=(n._localRoot||this._root).uuid,e=n._clip.uuid,l=this._actionsByClip[e];this._bindAction(n,l&&l.knownActions[0]),this._addInactiveAction(n,e,t)}for(var r=n._propertyBindings,i=0,u=r.length;i!==u;++i){var o=r[i];0==o.useCount++&&(this._lendBinding(o),o.saveOriginalState())}this._lendAction(n)}},_deactivateAction:function(n){if(this._isActiveAction(n)){for(var t=n._propertyBindings,e=0,l=t.length;e!==l;++e){var r=t[e];0==--r.useCount&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(n)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var n=this;this.stats={actions:{get total(){return n._actions.length},get inUse(){return n._nActiveActions}},bindings:{get total(){return n._bindings.length},get inUse(){return n._nActiveBindings}},controlInterpolants:{get total(){return n._controlInterpolants.length},get inUse(){return n._nActiveControlInterpolants}}}},_isActiveAction:function(n){var t=n._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(n,t,e){var l=this._actions,r=this._actionsByClip,i=r[t];if(void 0===i)i={knownActions:[n],actionByRoot:{}},n._byClipCacheIndex=0,r[t]=i;else{var u=i.knownActions;n._byClipCacheIndex=u.length,u.push(n)}n._cacheIndex=l.length,l.push(n),i.actionByRoot[e]=n},_removeInactiveAction:function(n){var t=this._actions,e=t[t.length-1],l=n._cacheIndex;e._cacheIndex=l,t[l]=e,t.pop(),n._cacheIndex=null;var r=n._clip.uuid,i=this._actionsByClip,u=i[r],o=u.knownActions,a=o[o.length-1],s=n._byClipCacheIndex;a._byClipCacheIndex=s,o[s]=a,o.pop(),n._byClipCacheIndex=null,delete u.actionByRoot[(n._localRoot||this._root).uuid],0===o.length&&delete i[r],this._removeInactiveBindingsForAction(n)},_removeInactiveBindingsForAction:function(n){for(var t=n._propertyBindings,e=0,l=t.length;e!==l;++e){var r=t[e];0==--r.referenceCount&&this._removeInactiveBinding(r)}},_lendAction:function(n){var t=this._actions,e=n._cacheIndex,l=this._nActiveActions++,r=t[l];n._cacheIndex=l,t[l]=n,r._cacheIndex=e,t[e]=r},_takeBackAction:function(n){var t=this._actions,e=n._cacheIndex,l=--this._nActiveActions,r=t[l];n._cacheIndex=l,t[l]=n,r._cacheIndex=e,t[e]=r},_addInactiveBinding:function(n,t,e){var l=this._bindingsByRootAndName,r=l[t],i=this._bindings;void 0===r&&(r={},l[t]=r),r[e]=n,n._cacheIndex=i.length,i.push(n)},_removeInactiveBinding:function(n){var t=this._bindings,e=n.binding,l=e.rootNode.uuid,r=e.path,i=this._bindingsByRootAndName,u=i[l],o=t[t.length-1],a=n._cacheIndex;o._cacheIndex=a,t[a]=o,t.pop(),delete u[r];n:{for(var s in u)break n;delete i[l]}},_lendBinding:function(n){var t=this._bindings,e=n._cacheIndex,l=this._nActiveBindings++,r=t[l];n._cacheIndex=l,t[l]=n,r._cacheIndex=e,t[e]=r},_takeBackBinding:function(n){var t=this._bindings,e=n._cacheIndex,l=--this._nActiveBindings,r=t[l];n._cacheIndex=l,t[l]=n,r._cacheIndex=e,t[e]=r},_lendControlInterpolant:function(){var n=this._controlInterpolants,t=this._nActiveControlInterpolants++,e=n[t];return void 0===e&&((e=new ro(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=t,n[t]=e),e},_takeBackControlInterpolant:function(n){var t=this._controlInterpolants,e=n.__cacheIndex,l=--this._nActiveControlInterpolants,r=t[l];n.__cacheIndex=l,t[l]=n,r.__cacheIndex=e,t[e]=r},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(n,t){var e=t||this._root,l=e.uuid,r="string"==typeof n?mo.findByName(e,n):n,i=null!==r?r.uuid:n,u=this._actionsByClip[i],o=null;if(void 0!==u){var a=u.actionByRoot[l];if(void 0!==a)return a;o=u.knownActions[0],null===r&&(r=o._clip)}if(null===r)return null;var s=new us(this,r,t);return this._bindAction(s,o),this._addInactiveAction(s,i,l),s},existingAction:function(n,t){var e=t||this._root,l=e.uuid,r="string"==typeof n?mo.findByName(e,n):n,i=r?r.uuid:n,u=this._actionsByClip[i];return void 0!==u&&u.actionByRoot[l]||null},stopAllAction:function(){var n=this._actions,t=this._nActiveActions,e=this._bindings,l=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var r=0;r!==t;++r)n[r].reset();for(r=0;r!==l;++r)e[r].useCount=0;return this},update:function(n){n*=this.timeScale;for(var t=this._actions,e=this._nActiveActions,l=this.time+=n,r=Math.sign(n),i=this._accuIndex^=1,u=0;u!==e;++u)t[u]._update(l,n,r,i);var o=this._bindings,a=this._nActiveBindings;for(u=0;u!==a;++u)o[u].apply(i);return this},getRoot:function(){return this._root},uncacheClip:function(n){var t=this._actions,e=n.uuid,l=this._actionsByClip,r=l[e];if(void 0!==r){for(var i=r.knownActions,u=0,o=i.length;u!==o;++u){var a=i[u];this._deactivateAction(a);var s=a._cacheIndex,c=t[t.length-1];a._cacheIndex=null,a._byClipCacheIndex=null,c._cacheIndex=s,t[s]=c,t.pop(),this._removeInactiveBindingsForAction(a)}delete l[e]}},uncacheRoot:function(n){var t=n.uuid,e=this._actionsByClip;for(var l in e){var r=e[l].actionByRoot[t];void 0!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}var i=this._bindingsByRootAndName[t];if(void 0!==i)for(var u in i){var o=i[u];o.restoreOriginalState(),this._removeInactiveBinding(o)}},uncacheAction:function(n,t){var e=this.existingAction(n,t);null!==e&&(this._deactivateAction(e),this._removeInactiveAction(e))}}),as.prototype.clone=function(){return new as(void 0===this.value.clone?this.value:this.value.clone())},ss.prototype=Object.assign(Object.create(Xe.prototype),{constructor:ss,isInstancedBufferGeometry:!0,copy:function(n){return Xe.prototype.copy.call(this,n),this.maxInstancedCount=n.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)}}),cs.prototype=Object.assign(Object.create(fi.prototype),{constructor:cs,isInstancedInterleavedBuffer:!0,copy:function(n){return fi.prototype.copy.call(this,n),this.meshPerAttribute=n.meshPerAttribute,this}}),hs.prototype=Object.assign(Object.create(Ie.prototype),{constructor:hs,isInstancedBufferAttribute:!0,copy:function(n){return Ie.prototype.copy.call(this,n),this.meshPerAttribute=n.meshPerAttribute,this}}),Object.assign(ps.prototype,{linePrecision:1,set:function(n,t){this.ray.set(n,t)},setFromCamera:function(n,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(n.x,n.y,.5).unproject(t).sub(this.ray.origin).normalize()):t&&t.isOrthographicCamera?(this.ray.origin.set(n.x,n.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(n,t,e){var l=e||[];return fs(n,this,l,t),l.sort(ds),l},intersectObjects:function(n,t,e){var l=e||[];if(!1===Array.isArray(n))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),l;for(var r=0,i=n.length;r<i;r++)fs(n[r],this,l,t);return l.sort(ds),l}}),Object.assign(ms.prototype,{set:function(n,t,e){return this.radius=n,this.phi=t,this.theta=e,this},clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.radius=n.radius,this.phi=n.phi,this.theta=n.theta,this},makeSafe:function(){var n=1e-6;return this.phi=Math.max(n,Math.min(Math.PI-n,this.phi)),this},setFromVector3:function(n){return this.setFromCartesianCoords(n.x,n.y,n.z)},setFromCartesianCoords:function(n,t,e){return this.radius=Math.sqrt(n*n+t*t+e*e),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(n,e),this.phi=Math.acos(Ft.clamp(t/this.radius,-1,1))),this}}),Object.assign(function(n,t,e){return this.radius=void 0!==n?n:1,this.theta=void 0!==t?t:0,this.y=void 0!==e?e:0,this}.prototype,{set:function(n,t,e){return this.radius=n,this.theta=t,this.y=e,this},clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.radius=n.radius,this.theta=n.theta,this.y=n.y,this},setFromVector3:function(n){return this.setFromCartesianCoords(n.x,n.y,n.z)},setFromCartesianCoords:function(n,t,e){return this.radius=Math.sqrt(n*n+e*e),this.theta=Math.atan2(n,e),this.y=t,this}}),Object.assign(vs.prototype,{set:function(n,t){return this.min.copy(n),this.max.copy(t),this},setFromPoints:function(n){this.makeEmpty();for(var t=0,e=n.length;t<e;t++)this.expandByPoint(n[t]);return this},setFromCenterAndSize:function(){var n=new kt;return function(t,e){var l=n.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(l),this.max.copy(t).add(l),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.min.copy(n.min),this.max.copy(n.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(n){return void 0===n&&(console.warn("THREE.Box2: .getCenter() target is now required"),n=new kt),this.isEmpty()?n.set(0,0):n.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(n){return void 0===n&&(console.warn("THREE.Box2: .getSize() target is now required"),n=new kt),this.isEmpty()?n.set(0,0):n.subVectors(this.max,this.min)},expandByPoint:function(n){return this.min.min(n),this.max.max(n),this},expandByVector:function(n){return this.min.sub(n),this.max.add(n),this},expandByScalar:function(n){return this.min.addScalar(-n),this.max.addScalar(n),this},containsPoint:function(n){return!(n.x<this.min.x||n.x>this.max.x||n.y<this.min.y||n.y>this.max.y)},containsBox:function(n){return this.min.x<=n.min.x&&n.max.x<=this.max.x&&this.min.y<=n.min.y&&n.max.y<=this.max.y},getParameter:function(n,t){return void 0===t&&(console.warn("THREE.Box2: .getParameter() target is now required"),t=new kt),t.set((n.x-this.min.x)/(this.max.x-this.min.x),(n.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(n){return!(n.max.x<this.min.x||n.min.x>this.max.x||n.max.y<this.min.y||n.min.y>this.max.y)},clampPoint:function(n,t){return void 0===t&&(console.warn("THREE.Box2: .clampPoint() target is now required"),t=new kt),t.copy(n).clamp(this.min,this.max)},distanceToPoint:function(){var n=new kt;return function(t){return n.copy(t).clamp(this.min,this.max).sub(t).length()}}(),intersect:function(n){return this.min.max(n.min),this.max.min(n.max),this},union:function(n){return this.min.min(n.min),this.max.max(n.max),this},translate:function(n){return this.min.add(n),this.max.add(n),this},equals:function(n){return n.min.equals(this.min)&&n.max.equals(this.max)}}),Object.assign(gs.prototype,{set:function(n,t){return this.start.copy(n),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(n){return this.start.copy(n.start),this.end.copy(n.end),this},getCenter:function(n){return void 0===n&&(console.warn("THREE.Line3: .getCenter() target is now required"),n=new Gt),n.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(n){return void 0===n&&(console.warn("THREE.Line3: .delta() target is now required"),n=new Gt),n.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(n,t){return void 0===t&&(console.warn("THREE.Line3: .at() target is now required"),t=new Gt),this.delta(t).multiplyScalar(n).add(this.start)},closestPointToPointParameter:(Ka=new Gt,Qa=new Gt,function(n,t){Ka.subVectors(n,this.start),Qa.subVectors(this.end,this.start);var e=Qa.dot(Qa),l=Qa.dot(Ka)/e;return t&&(l=Ft.clamp(l,0,1)),l}),closestPointToPoint:function(n,t,e){var l=this.closestPointToPointParameter(n,t);return void 0===e&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),e=new Gt),this.delta(e).multiplyScalar(l).add(this.start)},applyMatrix4:function(n){return this.start.applyMatrix4(n),this.end.applyMatrix4(n),this},equals:function(n){return n.start.equals(this.start)&&n.end.equals(this.end)}}),ys.prototype=Object.create(Pe.prototype),ys.prototype.constructor=ys,ys.prototype.isImmediateRenderObject=!0,xs.prototype=Object.create(Ei.prototype),xs.prototype.constructor=xs,xs.prototype.update=function(){var n=new Gt,t=new Gt,e=new Ht;return function(){var l=["a","b","c"];this.object.updateMatrixWorld(!0),e.getNormalMatrix(this.object.matrixWorld);var r=this.object.matrixWorld,i=this.geometry.attributes.position,u=this.object.geometry;if(u&&u.isGeometry)for(var o=u.vertices,a=u.faces,s=0,c=0,h=a.length;c<h;c++)for(var p=a[c],d=0,f=p.vertexNormals.length;d<f;d++){var m=o[p[l[d]]],v=p.vertexNormals[d];n.copy(m).applyMatrix4(r),t.copy(v).applyMatrix3(e).normalize().multiplyScalar(this.size).add(n),i.setXYZ(s,n.x,n.y,n.z),s+=1,i.setXYZ(s,t.x,t.y,t.z),s+=1}else if(u&&u.isBufferGeometry){var g=u.attributes.position,y=u.attributes.normal;for(s=0,d=0,f=g.count;d<f;d++)n.set(g.getX(d),g.getY(d),g.getZ(d)).applyMatrix4(r),t.set(y.getX(d),y.getY(d),y.getZ(d)),t.applyMatrix3(e).normalize().multiplyScalar(this.size).add(n),i.setXYZ(s,n.x,n.y,n.z),s+=1,i.setXYZ(s,t.x,t.y,t.z),s+=1}i.needsUpdate=!0}}(),bs.prototype=Object.create(Pe.prototype),bs.prototype.constructor=bs,bs.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},bs.prototype.update=function(){var n=new Gt;return function(){this.light.updateMatrixWorld();var t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),n.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(n),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}(),ws.prototype=Object.create(Ei.prototype),ws.prototype.constructor=ws,ws.prototype.updateMatrixWorld=function(){var n=new Gt,t=new Ut,e=new Ut;return function(l){var r=this.bones,i=this.geometry,u=i.getAttribute("position");e.getInverse(this.root.matrixWorld);for(var o=0,a=0;o<r.length;o++){var s=r[o];s.parent&&s.parent.isBone&&(t.multiplyMatrices(e,s.matrixWorld),n.setFromMatrixPosition(t),u.setXYZ(a,n.x,n.y,n.z),t.multiplyMatrices(e,s.parent.matrixWorld),n.setFromMatrixPosition(t),u.setXYZ(a+1,n.x,n.y,n.z),a+=2)}i.getAttribute("position").needsUpdate=!0,Pe.prototype.updateMatrixWorld.call(this,l)}}(),Ms.prototype=Object.create(gl.prototype),Ms.prototype.constructor=Ms,Ms.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Ms.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},Es.prototype=Object.create(Mi.prototype),Es.prototype.constructor=Es,Es.prototype.update=function(){if(this.scale.set(.5*this.light.width,.5*this.light.height,1),void 0!==this.color)this.material.color.set(this.color),this.children[0].material.color.set(this.color);else{this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);var n=this.material.color,t=Math.max(n.r,n.g,n.b);t>1&&n.multiplyScalar(1/t),this.children[0].material.color.copy(this.material.color)}},Es.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()},Ss.prototype=Object.create(Pe.prototype),Ss.prototype.constructor=Ss,Ss.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Ss.prototype.update=function(){var n=new Gt,t=new me,e=new me;return function(){var l=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var r=l.geometry.getAttribute("color");t.copy(this.light.color),e.copy(this.light.groundColor);for(var i=0,u=r.count;i<u;i++){var o=i<u/2?t:e;r.setXYZ(i,o.r,o.g,o.b)}r.needsUpdate=!0}l.lookAt(n.setFromMatrixPosition(this.light.matrixWorld).negate())}}(),Ts.prototype=Object.create(Ei.prototype),Ts.prototype.constructor=Ts,As.prototype=Object.create(Ei.prototype),As.prototype.constructor=As,Ls.prototype=Object.create(Ei.prototype),Ls.prototype.constructor=Ls,Ls.prototype.update=function(){var n=new Gt,t=new Gt,e=new Ht;return function(){this.object.updateMatrixWorld(!0),e.getNormalMatrix(this.object.matrixWorld);for(var l=this.object.matrixWorld,r=this.geometry.attributes.position,i=this.object.geometry,u=i.vertices,o=i.faces,a=0,s=0,c=o.length;s<c;s++){var h=o[s],p=h.normal;n.copy(u[h.a]).add(u[h.b]).add(u[h.c]).divideScalar(3).applyMatrix4(l),t.copy(p).applyMatrix3(e).normalize().multiplyScalar(this.size).add(n),r.setXYZ(a,n.x,n.y,n.z),a+=1,r.setXYZ(a,t.x,t.y,t.z),a+=1}r.needsUpdate=!0}}(),Ps.prototype=Object.create(Pe.prototype),Ps.prototype.constructor=Ps,Ps.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Ps.prototype.update=function(){var n=new Gt,t=new Gt,e=new Gt;return function(){n.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),e.subVectors(t,n),this.lightPlane.lookAt(t),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(t),this.targetLine.scale.z=e.length()}}(),Cs.prototype=Object.create(Ei.prototype),Cs.prototype.constructor=Cs,Cs.prototype.update=function(){var n,t,e=new Gt,l=new Jr;function r(r,i,u,o){e.set(i,u,o).unproject(l);var a=t[r];if(void 0!==a)for(var s=n.getAttribute("position"),c=0,h=a.length;c<h;c++)s.setXYZ(a[c],e.x,e.y,e.z)}return function(){n=this.geometry,t=this.pointMap,l.projectionMatrix.copy(this.camera.projectionMatrix),r("c",0,0,-1),r("t",0,0,1),r("n1",-1,-1,-1),r("n2",1,-1,-1),r("n3",-1,1,-1),r("n4",1,1,-1),r("f1",-1,-1,1),r("f2",1,-1,1),r("f3",-1,1,1),r("f4",1,1,1),r("u1",.7,1.1,-1),r("u2",-.7,1.1,-1),r("u3",0,2,-1),r("cf1",-1,0,1),r("cf2",1,0,1),r("cf3",0,-1,1),r("cf4",0,1,1),r("cn1",-1,0,-1),r("cn2",1,0,-1),r("cn3",0,-1,-1),r("cn4",0,1,-1),n.getAttribute("position").needsUpdate=!0}}(),Rs.prototype=Object.create(Ei.prototype),Rs.prototype.constructor=Rs,Rs.prototype.update=function(){var n=new le;return function(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&n.setFromObject(this.object),!n.isEmpty()){var e=n.min,l=n.max,r=this.geometry.attributes.position,i=r.array;i[0]=l.x,i[1]=l.y,i[2]=l.z,i[3]=e.x,i[4]=l.y,i[5]=l.z,i[6]=e.x,i[7]=e.y,i[8]=l.z,i[9]=l.x,i[10]=e.y,i[11]=l.z,i[12]=l.x,i[13]=l.y,i[14]=e.z,i[15]=e.x,i[16]=l.y,i[17]=e.z,i[18]=e.x,i[19]=e.y,i[20]=e.z,i[21]=l.x,i[22]=e.y,i[23]=e.z,r.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),Rs.prototype.setFromObject=function(n){return this.object=n,this.update(),this},Rs.prototype.copy=function(n){return Ei.prototype.copy.call(this,n),this.object=n.object,this},Rs.prototype.clone=function(){return(new this.constructor).copy(this)},Os.prototype=Object.create(Ei.prototype),Os.prototype.constructor=Os,Os.prototype.updateMatrixWorld=function(n){var t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),Pe.prototype.updateMatrixWorld.call(this,n))},Ds.prototype=Object.create(Mi.prototype),Ds.prototype.constructor=Ds,Ds.prototype.updateMatrixWorld=function(n){var t=-this.plane.constant;Math.abs(t)<1e-8&&(t=1e-8),this.scale.set(.5*this.size,.5*this.size,t),this.children[0].material.side=t<0?M:w,this.lookAt(this.plane.normal),Pe.prototype.updateMatrixWorld.call(this,n)},Is.prototype=Object.create(Pe.prototype),Is.prototype.constructor=Is,Is.prototype.setDirection=(es=new Gt,function(n){n.y>.99999?this.quaternion.set(0,0,0,1):n.y<-.99999?this.quaternion.set(1,0,0,0):(es.set(n.z,0,-n.x).normalize(),ts=Math.acos(n.y),this.quaternion.setFromAxisAngle(es,ts))}),Is.prototype.setLength=function(n,t,e){void 0===t&&(t=.2*n),void 0===e&&(e=.2*t),this.line.scale.set(1,Math.max(0,n-t),1),this.line.updateMatrix(),this.cone.scale.set(e,t,e),this.cone.position.y=n,this.cone.updateMatrix()},Is.prototype.setColor=function(n){this.line.material.color.copy(n),this.cone.material.color.copy(n)},Is.prototype.copy=function(n){return Pe.prototype.copy.call(this,n,!1),this.line.copy(n.line),this.cone.copy(n.cone),this},Is.prototype.clone=function(){return(new this.constructor).copy(this)},zs.prototype=Object.create(Ei.prototype),zs.prototype.constructor=zs,So.create=function(n,t){return console.log("THREE.Curve.create() has been deprecated"),n.prototype=Object.create(So.prototype),n.prototype.constructor=n,n.prototype.getPoint=t,n},Object.assign(Wo.prototype,{createPointsGeometry:function(n){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getPoints(n);return this.createGeometry(t)},createSpacedPointsGeometry:function(n){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getSpacedPoints(n);return this.createGeometry(t)},createGeometry:function(n){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var t=new De,e=0,l=n.length;e<l;e++){var r=n[e];t.vertices.push(new Gt(r.x,r.y,r.z||0))}return t}}),Object.assign(qo.prototype,{fromPoints:function(n){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(n)}}),Object.create(Do.prototype),Object.create(Do.prototype),Ns.prototype=Object.create(Do.prototype),Object.assign(Ns.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),Ts.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},ws.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(wa.prototype,{extractUrlBase:function(n){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),ua(n)}}),Object.assign(sa.prototype,{setTexturePath:function(n){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(n)}}),Object.assign(vs.prototype,{center:function(n){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(n)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(n){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(n)},size:function(n){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(n)}}),Object.assign(le.prototype,{center:function(n){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(n)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(n){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(n)},isIntersectionSphere:function(n){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(n)},size:function(n){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(n)}}),gs.prototype.center=function(n){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(n)},Object.assign(Ft,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(n){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),Ft.floorPowerOfTwo(n)},nextPowerOfTwo:function(n){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),Ft.ceilPowerOfTwo(n)}}),Object.assign(Ht.prototype,{flattenToArrayOffset:function(n,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(n,t)},multiplyVector3:function(n){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),n.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(n){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(n)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(Ut.prototype,{extractPosition:function(n){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(n)},flattenToArrayOffset:function(n,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(n,t)},getPosition:function(){var n;return function(){return void 0===n&&(n=new Gt),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),n.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(n){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(n)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(n){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)},multiplyVector4:function(n){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(n){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),n.transformDirection(this)},crossVector:function(n){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(n){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(n)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(n,t,e,l,r,i){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(n,t,l,e,r,i)}}),ie.prototype.isIntersectionLine=function(n){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(n)},jt.prototype.multiplyVector3=function(n){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),n.applyQuaternion(this)},Object.assign(fl.prototype,{isIntersectionBox:function(n){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(n)},isIntersectionPlane:function(n){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(n)},isIntersectionSphere:function(n){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(n)}}),Object.assign(ml.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(n,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(n,t)},midpoint:function(n){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(n)},normal:function(n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(n)},plane:function(n){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(n)}}),Object.assign(ml,{barycoordFromPoint:function(n,t,e,l,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),ml.getBarycoord(n,t,e,l,r)},normal:function(n,t,e,l){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),ml.getNormal(n,t,e,l)}}),Object.assign(Xo.prototype,{extractAllPoints:function(n){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(n)},extrude:function(n){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new _u(this,n)},makeGeometry:function(n){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new Du(this,n)}}),Object.assign(kt.prototype,{fromAttribute:function(n,t,e){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(n,t,e)},distanceToManhattan:function(n){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(n)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Gt.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(n){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(n)},getScaleFromMatrix:function(n){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(n)},getColumnFromMatrix:function(n,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,n)},applyProjection:function(n){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(n)},fromAttribute:function(n,t,e){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(n,t,e)},distanceToManhattan:function(n){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(n)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Qt.prototype,{fromAttribute:function(n,t,e){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(n,t,e)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(De.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}}),Object.assign(Pe.prototype,{getChildByName:function(n){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(n)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(n,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,n)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}}),Object.defineProperties(Pe.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(n){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=n}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(yi.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(bi.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),xi.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(So.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(n){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=n}}),Kr.prototype.setLens=function(n,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==t&&(this.filmGauge=t),this.setFocalLength(n)},Object.defineProperties(Yo.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(n){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=n}},shadowCameraLeft:{set:function(n){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=n}},shadowCameraRight:{set:function(n){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=n}},shadowCameraTop:{set:function(n){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=n}},shadowCameraBottom:{set:function(n){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=n}},shadowCameraNear:{set:function(n){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=n}},shadowCameraFar:{set:function(n){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=n}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(n){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=n}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(n){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=n}},shadowMapHeight:{set:function(n){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=n}}}),Object.defineProperties(Ie.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")}}),Object.assign(Xe.prototype,{addIndex:function(n){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(n)},addDrawCall:function(n,t,e){void 0!==e&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(n,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(Xe.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.assign(wu.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(as.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(pl.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new me}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(n){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===n}}}),Object.defineProperties(Yu.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(dl.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(n){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=n}}}),Object.assign(ci.prototype,{clearTarget:function(n,t,e,l){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(n),this.clear(t,e,l)},animate:function(n){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(n)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(n){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(n)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")}}),Object.defineProperties(ci.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(n){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=n}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(n){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=n}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Wr.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties($t.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(n){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=n}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(n){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=n}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(n){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=n}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(n){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=n}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(n){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=n}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(n){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=n}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(n){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=n}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(n){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=n}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(n){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=n}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(n){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=n}}}),Object.defineProperties(ai.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}},userHeight:{set:function(){console.warn("THREE.WebVRManager: .userHeight has been removed.")}}}),Fa.prototype.load=function(n){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var t=this;return(new Ia).load(n,(function(n){t.setBuffer(n)})),this},Ua.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},za.prototype.updateCubeMap=function(n,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(n,t)},Zt.crossOrigin=void 0,Zt.loadTexture=function(n,t,e,l){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var r=new Eo;r.setCrossOrigin(this.crossOrigin);var i=r.load(n,e,void 0,l);return t&&(i.mapping=t),i},Zt.loadTextureCube=function(n,t,e,l){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var r=new Mo;r.setCrossOrigin(this.crossOrigin);var i=r.load(n,e,void 0,l);return t&&(i.mapping=t),i},Zt.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},Zt.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};var Bs=__webpack_require__(6729),Fs=__webpack_require__.n(Bs),ks=__webpack_require__(1730),Us=__webpack_require__.n(ks);class js{constructor(n,t,e){if(isNaN(n)||isNaN(t))throw new Error("Invalid LatLon object: ("+n+", "+t+")");this.lat=+n,this.lon=+t,void 0!==e&&(this.alt=+e)}clone(){return new js(this.lat,this.lon,this.alt)}}class Gs{constructor(n,t,e){this.x=e?Math.round(n):n,this.y=e?Math.round(t):t}clone(){return new Gs(this.x,this.y)}add(n){return this.clone()._add(Vs(n))}_add(n){return this.x+=n.x,this.y+=n.y,this}subtract(n){return this.clone()._subtract(Vs(n))}_subtract(n){return this.x-=n.x,this.y-=n.y,this}}var Hs,Vs=function(n,t,e){return n instanceof Gs?n:Array.isArray(n)?new Gs(n[0],n[1]):null==n?n:new Gs(n,t,e)},Ws={R:6378137,MAX_LATITUDE:85.0511287798,ECC:.081819191,ECC2:.006694380015894481,multiplier:1,project:function(n){var t=Math.PI/180,e=Ws.MAX_LATITUDE,l=Math.max(Math.min(e,n.lat),-e),r=Math.sin(l*t);return Vs(Ws.R*n.lon*t,Ws.R*Math.log((1+r)/(1-r))/2)}};Ws.unproject=function(n){var t,e,l,r=180/Math.PI;return t=(2*Math.atan(Math.exp(n.y/Ws.R))-Math.PI/2)*r,e=n.x*r/Ws.R,t instanceof js?t:Array.isArray(t)&&"object"!=typeof t[0]?3===t.length?new js(t[0],t[1],t[2]):2===t.length?new js(t[0],t[1]):null:null==t?t:"object"==typeof t&&"lat"in t?new js(t.lat,"lng"in t?t.lng:t.lon,t.alt):void 0===e?null:new js(t,e,l)},Ws.latLonToPoint=function(n){var t=Ws.project(n);return t.y*=-1,t.x*=Ws.multiplier,t.y*=Ws.multiplier,t},Ws.pointToLatLon=function(n){var t=Vs(n.x,-1*n.y);return t.x/=Ws.multiplier,t.y/=Ws.multiplier,Ws.unproject(t)},Ws.pointScale=function(n,t){var e,l=Math.PI/180;if(t){var r=n.lat*l,i=(n.lon,Ws.R),u=Math.sin(r),o=u*u,a=Math.cos(r),s=i*(1-Ws.ECC2)/Math.pow(1-Ws.ECC2*o,1.5);return[e=i/(i/Math.sqrt(1-Ws.ECC2*o))/a,i/s/a]}return[e=1/Math.cos(n.lat*l),e]},Ws.metresToProjected=function(n,t){return n*t[1]},Ws.projectedToMetres=function(n,t){return n/t[1]},Ws.metresToWorld=function(n,t){return Ws.metresToProjected(n,t)*Ws.multiplier},Ws.worldToMetres=function(n,t){var e=n;return Ws.projectedToMetres(e,t)/Ws.multiplier},Ws.scale=function(n){return 256*Math.pow(2,n)},Ws.zoom=function(n){return Math.log(n/256)/Math.LN2},Ws.distance=function(n,t,e){var l,r,i,u=Math.PI/180;if(e){l=n.lat*u,r=t.lat*u;var o=n.lon*u,a=(r-l)/2,s=(t.lon*u-o)/2;i=Math.sin(a)*Math.sin(a)+Math.cos(l)*Math.cos(r)*Math.sin(s)*Math.sin(s);var c=2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i));return Ws.R*c}return l=n.lat*u,r=t.lat*u,i=Math.sin(l)*Math.sin(r)+Math.cos(l)*Math.cos(r)*Math.cos((t.lon-n.lon)*u),Ws.R*Math.acos(Math.min(i,1))},Ws.bounds=[[-(Hs=Ws.R*Math.PI*Ws.multiplier),-Hs],[Hs,Hs]],new di,new di,new di;var qs=function(n){Pe.call(this),this.element=n,this.element.style.position="absolute",this.addEventListener("removed",(function(n){null!==this.element.parentNode&&this.element.parentNode.removeChild(this.element)}))};(qs.prototype=Object.create(Pe.prototype)).constructor=qs;var Xs=function(n){qs.call(this,n)};(Xs.prototype=Object.create(qs.prototype)).constructor=Xs;n.CSS3DObject=qs,n.CSS3DSprite=Xs,n.CSS3DRenderer=function(){var n,t,e,l;console.log("THREE.CSS3DRenderer",m);var r=new Ut,i={camera:{fov:0,style:""},objects:{}},u=document.createElement("div");u.style.overflow="hidden",u.style.WebkitTransformStyle="preserve-3d",u.style.MozTransformStyle="preserve-3d",u.style.oTransformStyle="preserve-3d",u.style.transformStyle="preserve-3d",this.domElement=u;var o=document.createElement("div");o.style.WebkitTransformStyle="preserve-3d",o.style.MozTransformStyle="preserve-3d",o.style.oTransformStyle="preserve-3d",o.style.transformStyle="preserve-3d",u.appendChild(o),this.setClearColor=function(){},this.getSize=function(){return{width:n,height:t}},this.setSize=function(r,i){e=(n=r)/2,l=(t=i)/2,u.style.width=r+"px",u.style.height=i+"px",o.style.width=r+"px",o.style.height=i+"px"};var a=function(n){return Math.abs(n)<Number.EPSILON?0:n},s=function(n){var t=n.elements;return"translate3d(-50%,-50%,0) matrix3d("+a(t[0])+","+a(t[1])+","+a(t[2])+","+a(t[3])+","+a(-t[4])+","+a(-t[5])+","+a(-t[6])+","+a(-t[7])+","+a(t[8])+","+a(t[9])+","+a(t[10])+","+a(t[11])+","+a(t[12])+","+a(t[13])+","+a(t[14])+","+a(t[15])+")"},c=function(n,t){if(n instanceof qs){var e;n instanceof Xs?(r.copy(t.matrixWorldInverse),r.transpose(),r.copyPosition(n.matrixWorld),r.scale(n.scale),r.elements[3]=0,r.elements[7]=0,r.elements[11]=0,r.elements[15]=1,e=s(r)):e=s(n.matrixWorld);var l=n.element,u=i.objects[n.id];void 0!==u&&u===e||(l.style.WebkitTransform=e,l.style.MozTransform=e,l.style.oTransform=e,l.style.transform=e,i.objects[n.id]=e),l.parentNode!==o&&o.appendChild(l)}for(var a=0,h=n.children.length;a<h;a++)c(n.children[a],t)};this.render=function(n,r){var s=.5/Math.tan(Ft.degToRad(.5*r.fov))*t;i.camera.fov!==s&&(u.style.WebkitPerspective=s+"px",u.style.MozPerspective=s+"px",u.style.oPerspective=s+"px",u.style.perspective=s+"px",i.camera.fov=s),n.updateMatrixWorld(),null===r.parent&&r.updateMatrixWorld(),r.matrixWorldInverse.getInverse(r.matrixWorld);var h="translate3d(0,0,"+s+"px)"+function(n){var t=n.elements;return"matrix3d("+a(t[0])+","+a(-t[1])+","+a(t[2])+","+a(t[3])+","+a(t[4])+","+a(-t[5])+","+a(t[6])+","+a(t[7])+","+a(t[8])+","+a(-t[9])+","+a(t[10])+","+a(t[11])+","+a(t[12])+","+a(-t[13])+","+a(t[14])+","+a(t[15])+")"}(r.matrixWorldInverse)+" translate3d("+e+"px,"+l+"px, 0)";i.camera.style!==h&&(o.style.WebkitTransform=h,o.style.MozTransform=h,o.style.oTransform=h,o.style.transform=h,i.camera.style=h),c(n,r)}};var Ys=function(n){Pe.call(this),this.element=n,this.element.style.position="absolute",this.addEventListener("removed",(function(n){null!==this.element.parentNode&&this.element.parentNode.removeChild(this.element)}))};(Ys.prototype=Object.create(Pe.prototype)).constructor=Ys;n.CSS2DObject=Ys,n.CSS2DRenderer=function(){var n,t;console.log("THREE.CSS2DRenderer",m);var e=new Gt,l=new Ut,r=new Ut,i=new ue,u=document.createElement("div");u.style.overflow="hidden",this.domElement=u,this.setSize=function(e,l){n=e/2,t=l/2,u.style.width=e+"px",u.style.height=l+"px"};var o=function(l,a){if(l instanceof Ys){e.setFromMatrixPosition(l.matrixWorld),e.applyMatrix4(r);var s=l.element,c="translate(-50%,-50%) translate("+(e.x*n+n)+"px,"+(-e.y*t+t)+"px)";s.style.WebkitTransform=c,s.style.MozTransform=c,s.style.oTransform=c,s.style.transform=c,s.parentNode!==u&&u.appendChild(s),i.containsPoint(l.position)?s.style.display="block":s.style.display="none"}for(var h=0,p=l.children.length;h<p;h++)o(l.children[h],a)};this.render=function(n,t){n.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),t.matrixWorldInverse.getInverse(t.matrixWorld),l.copy(t.matrixWorldInverse.getInverse(t.matrixWorld)),r.multiplyMatrices(t.projectionMatrix,l),i.setFromMatrix((new Ut).multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse)),o(n,t)}},new di,__webpack_require__(3096);var Zs={uniforms:{tDiffuse:{type:"t",value:null},opacity:{type:"f",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")};const Js=Zs;n.CopyShader=Zs;var Ks=function(n,t){this.textureID=void 0!==t?t:"tDiffuse",n instanceof dl?(this.uniforms=n.uniforms,this.material=n):n&&(this.uniforms=de.clone(n.uniforms),this.material=new dl({defines:n.defines||{},uniforms:this.uniforms,vertexShader:n.vertexShader,fragmentShader:n.fragmentShader})),this.renderToScreen=!1,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.camera=new na(-1,1,1,-1,0,1),this.scene=new di,this.quad=new gl(new Ke(2,2),null),this.scene.add(this.quad)};Ks.prototype={render:function(n,t,e,l){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=e.texture),this.quad.material=this.material,this.renderToScreen?n.render(this.scene,this.camera):n.render(this.scene,this.camera,t,this.clear)}};const Qs=Ks;n.ShaderPass=Ks;var $s=function(n,t){this.scene=n,this.camera=t,this.enabled=!0,this.clear=!0,this.needsSwap=!1,this.inverse=!1};$s.prototype={render:function(n,t,e,l){var r,i,u=n.context;u.colorMask(!1,!1,!1,!1),u.depthMask(!1),this.inverse?(r=0,i=1):(r=1,i=0),u.enable(u.STENCIL_TEST),u.stencilOp(u.REPLACE,u.REPLACE,u.REPLACE),u.stencilFunc(u.ALWAYS,r,4294967295),u.clearStencil(i),n.render(this.scene,this.camera,e,this.clear),n.render(this.scene,this.camera,t,this.clear),u.colorMask(!0,!0,!0,!0),u.depthMask(!0),u.stencilFunc(u.EQUAL,1,4294967295),u.stencilOp(u.KEEP,u.KEEP,u.KEEP)}};var nc=function(){this.enabled=!0};nc.prototype={render:function(n,t,e,l){var r=n.context;r.disable(r.STENCIL_TEST)}};const tc=$s;n.MaskPass=$s,n.ClearMaskPass=nc;var ec=function(n,t){if(this.renderer=n,void 0===t){var e=n.getPixelRatio();t=new $t(Math.floor(n.context.canvas.width/e)||1,Math.floor(n.context.canvas.height/e)||1,{minFilter:Tn,magFilter:Tn,format:Hn,stencilBuffer:!1})}this.renderTarget1=t,this.renderTarget2=t.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.passes=[],void 0===Js&&console.error("EffectComposer relies on THREE.CopyShader"),this.copyPass=new Qs(Js)};ec.prototype={swapBuffers:function(){var n=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=n},addPass:function(n){this.passes.push(n)},insertPass:function(n,t){this.passes.splice(t,0,n)},render:function(n){this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2;var t,e,l=!1,r=this.passes.length;for(e=0;e<r;e++)if((t=this.passes[e]).enabled){if(t.render(this.renderer,this.writeBuffer,this.readBuffer,n,l),t.needsSwap){if(l){var i=this.renderer.context;i.stencilFunc(i.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,n),i.stencilFunc(i.EQUAL,1,4294967295)}this.swapBuffers()}t instanceof tc?l=!0:t instanceof nc&&(l=!1)}},reset:function(n){if(void 0===n){n=this.renderTarget1.clone();var t=this.renderer.getPixelRatio();n.setSize(Math.floor(this.renderer.context.canvas.width/t),Math.floor(this.renderer.context.canvas.height/t))}this.renderTarget1.dispose(),this.renderTarget1=n,this.renderTarget2.dispose(),this.renderTarget2=n.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(n,t){this.renderTarget1.setSize(n,t),this.renderTarget2.setSize(n,t)}},n.EffectComposer=ec;var lc=function(n,t,e,l,r){this.scene=n,this.camera=t,this.overrideMaterial=e,this.clearColor=l,this.clearAlpha=void 0!==r?r:1,this.oldClearColor=new me,this.oldClearAlpha=1,this.enabled=!0,this.clear=!0,this.needsSwap=!1};lc.prototype={render:function(n,t,e,l){this.scene.overrideMaterial=this.overrideMaterial,this.clearColor&&(this.oldClearColor.copy(n.getClearColor()),this.oldClearAlpha=n.getClearAlpha(),n.setClearColor(this.clearColor,this.clearAlpha)),n.render(this.scene,this.camera,e,this.clear),this.clearColor&&n.setClearColor(this.oldClearColor,this.oldClearAlpha),this.scene.overrideMaterial=null}},n.RenderPass=lc;var rc={uniforms:{tDiffuse:{type:"t",value:null},h:{type:"f",value:1/512},r:{type:"f",value:.35}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform float h;","uniform float r;","varying vec2 vUv;","void main() {","vec4 sum = vec4( 0.0 );","float hh = h * abs( r - vUv.y );","sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;","sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;","sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;","sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;","sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;","sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;","sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;","sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;","sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;","gl_FragColor = sum;","}"].join("\n")};n.HorizontalTiltShiftShader=rc;var ic={uniforms:{tDiffuse:{type:"t",value:null},v:{type:"f",value:1/512},r:{type:"f",value:.35}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform float v;","uniform float r;","varying vec2 vUv;","void main() {","vec4 sum = vec4( 0.0 );","float vv = v * abs( r - vUv.y );","sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;","sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;","sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;","sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;","sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;","sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;","sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;","sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;","sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;","gl_FragColor = sum;","}"].join("\n")};n.VerticalTiltShiftShader=ic;var uc={uniforms:{tDiffuse:{type:"t",value:null},resolution:{type:"v2",value:new kt(1/1024,1/512)}},vertexShader:["void main() {","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec2 resolution;","#define FXAA_REDUCE_MIN   (1.0/128.0)","#define FXAA_REDUCE_MUL   (1.0/8.0)","#define FXAA_SPAN_MAX     8.0","void main() {","vec3 rgbNW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ).xyz;","vec3 rgbNE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ).xyz;","vec3 rgbSW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ).xyz;","vec3 rgbSE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ).xyz;","vec4 rgbaM  = texture2D( tDiffuse,  gl_FragCoord.xy  * resolution );","vec3 rgbM  = rgbaM.xyz;","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float lumaNW = dot( rgbNW, luma );","float lumaNE = dot( rgbNE, luma );","float lumaSW = dot( rgbSW, luma );","float lumaSE = dot( rgbSE, luma );","float lumaM  = dot( rgbM,  luma );","float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );","float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );","vec2 dir;","dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));","dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));","float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );","float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );","dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),","max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),","dir * rcpDirMin)) * resolution;","vec4 rgbA = (1.0/2.0) * (","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (1.0/3.0 - 0.5)) +","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (2.0/3.0 - 0.5)));","vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (0.0/3.0 - 0.5)) +","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (3.0/3.0 - 0.5)));","float lumaB = dot(rgbB, vec4(luma, 0.0));","if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {","gl_FragColor = rgbA;","} else {","gl_FragColor = rgbB;","}","}"].join("\n")};n.FXAAShader=uc,Fs(),__webpack_require__(4670),Fs(),ye.sky={uniforms:{luminance:{type:"f",value:1},turbidity:{type:"f",value:2},reileigh:{type:"f",value:1},mieCoefficient:{type:"f",value:.005},mieDirectionalG:{type:"f",value:.8},sunPosition:{type:"v3",value:new Gt}},vertexShader:["varying vec3 vWorldPosition;","void main() {","vec4 worldPosition = modelMatrix * vec4( position, 1.0 );","vWorldPosition = worldPosition.xyz;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D skySampler;","uniform vec3 sunPosition;","varying vec3 vWorldPosition;","vec3 cameraPos = vec3(0., 0., 0.);","// uniform sampler2D sDiffuse;","// const float turbidity = 10.0; //","// const float reileigh = 2.; //","// const float luminance = 1.0; //","// const float mieCoefficient = 0.005;","// const float mieDirectionalG = 0.8;","uniform float luminance;","uniform float turbidity;","uniform float reileigh;","uniform float mieCoefficient;","uniform float mieDirectionalG;","// constants for atmospheric scattering","const float e = 2.71828182845904523536028747135266249775724709369995957;","const float pi = 3.141592653589793238462643383279502884197169;","const float n = 1.0003; // refractive index of air","const float N = 2.545E25; // number of molecules per unit volume for air at","// 288.15K and 1013mb (sea level -45 celsius)","const float pn = 0.035;\t// depolatization factor for standard air","// wavelength of used primaries, according to preetham","const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);","// mie stuff","// K coefficient for the primaries","const vec3 K = vec3(0.686, 0.678, 0.666);","const float v = 4.0;","// optical length at zenith for molecules","const float rayleighZenithLength = 8.4E3;","const float mieZenithLength = 1.25E3;","const vec3 up = vec3(0.0, 1.0, 0.0);","const float EE = 1000.0;","const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;","// 66 arc seconds -> degrees, and the cosine of that","// earth shadow hack","const float cutoffAngle = pi/1.95;","const float steepness = 1.5;","vec3 totalRayleigh(vec3 lambda)","{","return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));","}","// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE","vec3 simplifiedRayleigh()","{","return 0.0005 / vec3(94, 40, 18);","}","float rayleighPhase(float cosTheta)","{\t ","return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));","//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));","//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));","}","vec3 totalMie(vec3 lambda, vec3 K, float T)","{","float c = (0.2 * T ) * 10E-18;","return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;","}","float hgPhase(float cosTheta, float g)","{","return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));","}","float sunIntensity(float zenithAngleCos)","{","return EE * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos))/steepness)));","}","// float logLuminance(vec3 c)","// {","// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);","// }","// Filmic ToneMapping http://filmicgames.com/archives/75","float A = 0.15;","float B = 0.50;","float C = 0.10;","float D = 0.20;","float E = 0.02;","float F = 0.30;","float W = 1000.0;","vec3 Uncharted2Tonemap(vec3 x)","{","return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;","}","void main() ","{","float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);","// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;","// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);","float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));","vec3 sunDirection = normalize(sunPosition);","float sunE = sunIntensity(dot(sunDirection, up));","// extinction (absorbtion + out scattering) ","// rayleigh coefficients","vec3 betaR = simplifiedRayleigh() * reileighCoefficient;","// mie coefficients","vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;","// optical length","// cutoff angle at 90 to avoid singularity in next formula.","float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));","float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));","float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));","// combined extinction factor\t","vec3 Fex = exp(-(betaR * sR + betaM * sM));","// in scattering","float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);","float rPhase = rayleighPhase(cosTheta*0.5+0.5);","vec3 betaRTheta = betaR * rPhase;","float mPhase = hgPhase(cosTheta, mieDirectionalG);","vec3 betaMTheta = betaM * mPhase;","vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));","Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));","//nightsky","vec3 direction = normalize(vWorldPosition - cameraPos);","float theta = acos(direction.y); // elevation --\x3e y-axis, [-pi/2, pi/2]","float phi = atan(direction.z, direction.x); // azimuth --\x3e x-axis [-pi/2, pi/2]","vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);","// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;","vec3 L0 = vec3(0.1) * Fex;","// composition + solar disc","//if (cosTheta > sunAngularDiameterCos)","float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);","// if (normalize(vWorldPosition - cameraPos).y>0.0)","L0 += (sunE * 19000.0 * Fex)*sundisk;","vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));","vec3 texColor = (Lin+L0);   ","texColor *= 0.04 ;","texColor += vec3(0.0,0.001,0.0025)*0.3;","float g_fMaxLuminance = 1.0;","float fLumScaled = 0.1 / luminance;     ","float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); ","float ExposureBias = fLumCompressed;","vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);","vec3 color = curr*whiteScale;","vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));","gl_FragColor.rgb = retColor;","gl_FragColor.a = 1.0;","}"].join("\n")},["varying vec3 vPosition;","void main() {","vPosition = position;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),["uniform samplerCube cubemap;","varying vec3 vPosition;","void main() {","gl_FragColor = textureCube(cubemap, normalize(vPosition));","}"].join("\n");const oc=class{constructor(n){this.workerScript=n.workerScript,this.ready=!1,this.busy=!1,this.deferred=null}start(){return new Promise(((n,t)=>{this.worker=new Worker(this.workerScript);var e=l=>{l.data&&"startup"===l.data.type?(this.ready=!0,this.worker.removeEventListener("message",e),this.worker.addEventListener("message",(n=>{this.onMessage(n)})),n()):t()};this.worker.addEventListener("message",e)}))}exec(n,t,e){var l=Promise.deferred();return this.busy=!0,this.deferred=l,this.worker.postMessage({method:n,args:t},e),l.promise}onMessage(n){this.busy=!1,n.data&&"error"!==n.data.type&&"result"===n.data.type?this.deferred.resolve(n.data.payload):this.deferred.reject(n.data.payload)}};Promise.deferred=function(){var n={};return n.promise=new Promise(((t,e)=>{n.resolve=t,n.reject=e})),n},Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(n){if(null==this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof n)throw new TypeError("predicate must be a function");for(var t,e=Object(this),l=e.length>>>0,r=arguments[1],i=0;i<l;i++)if(t=e[i],n.call(r,t,i,e))return t}});const ac=class{constructor(n){this.numThreads=n.numThreads||2,this.workerScript=n.workerScript,this.workers=[],this.tasks=[]}createWorkers(){return new Promise(((n,t)=>{for(var e=[],l=0;l<this.numThreads;l++)e.push(this.createWorker());Promise.all(e).then((()=>{n()})).catch(t)}))}createWorker(){return new Promise(((n,t)=>{var e=new oc({workerScript:this.workerScript});return e.start().then((()=>{this.workers.push(e),n()})).catch(t)}))}getFreeWorker(){return this.workers.find((n=>!n.busy))}exec(n,t,e){var l={method:n,args:t,transferrables:e,deferred:Promise.deferred()};return this.tasks.push(l),this.processTasks(),l.deferred.promise}processTasks(){if(0!==this.tasks.length){var n=this.getFreeWorker();if(n){var t=this.tasks.shift();n.exec(t.method,t.args,t.transferrables).then((n=>{this.processTasks(),t.deferred.resolve(n)})).catch((n=>{this.processTasks(),t.deferred.reject(n)}))}}}};var sc;Promise.deferred=function(){var n={};return n.promise=new Promise(((t,e)=>{n.resolve=t,n.reject=e})),n};const cc={createWorkers:function(n,t){return(sc=new ac({numThreads:n||2,workerScript:t||"vizicities-worker.js"})).createWorkers()},exec:function(n,t,e){return sc.exec(n,t,e)}};Fs();let hc,pc,dc,fc,mc,vc,gc,yc,xc,bc,_c,wc={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},Mc={duration:.5,overwrite:!1,delay:0},Ec=1e8,Sc=1e-8,Tc=2*Math.PI,Ac=Tc/4,Lc=0,Pc=Math.sqrt,Cc=Math.cos,Rc=Math.sin,Oc=n=>"string"==typeof n,Dc=n=>"function"==typeof n,Ic=n=>"number"==typeof n,zc=n=>void 0===n,Nc=n=>"object"==typeof n,Bc=n=>!1!==n,Fc=()=>"undefined"!=typeof window,kc=n=>Dc(n)||Oc(n),Uc="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},jc=Array.isArray,Gc=/(?:-?\.?\d|\.)+/gi,Hc=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,Vc=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,Wc=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,qc=/[+-]=-?[.\d]+/,Xc=/[^,'"\[\]\s]+/gi,Yc=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,Zc={},Jc={},Kc=n=>(Jc=Th(n,Zc))&&Ld,Qc=(n,t)=>console.warn("Invalid property",n,"set to",t,"Missing plugin? gsap.registerPlugin()"),$c=(n,t)=>!t&&console.warn(n),nh=(n,t)=>n&&(Zc[n]=t)&&Jc&&(Jc[n]=t)||Zc,th=()=>0,eh={suppressEvents:!0,isStart:!0,kill:!1},lh={suppressEvents:!0,kill:!1},rh={suppressEvents:!0},ih={},uh=[],oh={},ah={},sh={},ch=30,hh=[],ph="",dh=n=>{let t,e,l=n[0];if(Nc(l)||Dc(l)||(n=[n]),!(t=(l._gsap||{}).harness)){for(e=hh.length;e--&&!hh[e].targetTest(l););t=hh[e]}for(e=n.length;e--;)n[e]&&(n[e]._gsap||(n[e]._gsap=new Gp(n[e],t)))||n.splice(e,1);return n},fh=n=>n._gsap||dh(lp(n))[0]._gsap,mh=(n,t,e)=>(e=n[t])&&Dc(e)?n[t]():zc(e)&&n.getAttribute&&n.getAttribute(t)||e,vh=(n,t)=>(n=n.split(",")).forEach(t)||n,gh=n=>Math.round(1e5*n)/1e5||0,yh=n=>Math.round(1e7*n)/1e7||0,xh=(n,t)=>{let e=t.charAt(0),l=parseFloat(t.substr(2));return n=parseFloat(n),"+"===e?n+l:"-"===e?n-l:"*"===e?n*l:n/l},bh=(n,t)=>{let e=t.length,l=0;for(;n.indexOf(t[l])<0&&++l<e;);return l<e},_h=()=>{let n,t,e=uh.length,l=uh.slice(0);for(oh={},uh.length=0,n=0;n<e;n++)t=l[n],t&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},wh=(n,t,e,l)=>{uh.length&&!pc&&_h(),n.render(t,e,l||pc&&t<0&&(n._initted||n._startAt)),uh.length&&!pc&&_h()},Mh=n=>{let t=parseFloat(n);return(t||0===t)&&(n+"").match(Xc).length<2?t:Oc(n)?n.trim():n},Eh=n=>n,Sh=(n,t)=>{for(let e in t)e in n||(n[e]=t[e]);return n},Th=(n,t)=>{for(let e in t)n[e]=t[e];return n},Ah=(n,t)=>{for(let e in t)"__proto__"!==e&&"constructor"!==e&&"prototype"!==e&&(n[e]=Nc(t[e])?Ah(n[e]||(n[e]={}),t[e]):t[e]);return n},Lh=(n,t)=>{let e,l={};for(e in n)e in t||(l[e]=n[e]);return l},Ph=n=>{let t=n.parent||fc,e=n.keyframes?(l=jc(n.keyframes),(n,t)=>{for(let e in t)e in n||"duration"===e&&l||"ease"===e||(n[e]=t[e])}):Sh;var l;if(Bc(n.inherit))for(;t;)e(n,t.vars.defaults),t=t.parent||t._dp;return n},Ch=(n,t,e="_first",l="_last",r)=>{let i,u=n[l];if(r)for(i=t[r];u&&u[r]>i;)u=u._prev;return u?(t._next=u._next,u._next=t):(t._next=n[e],n[e]=t),t._next?t._next._prev=t:n[l]=t,t._prev=u,t.parent=t._dp=n,t},Rh=(n,t,e="_first",l="_last")=>{let r=t._prev,i=t._next;r?r._next=i:n[e]===t&&(n[e]=i),i?i._prev=r:n[l]===t&&(n[l]=r),t._next=t._prev=t.parent=null},Oh=(n,t)=>{n.parent&&(!t||n.parent.autoRemoveChildren)&&n.parent.remove&&n.parent.remove(n),n._act=0},Dh=(n,t)=>{if(n&&(!t||t._end>n._dur||t._start<0)){let t=n;for(;t;)t._dirty=1,t=t.parent}return n},Ih=(n,t,e,l)=>n._startAt&&(pc?n._startAt.revert(lh):n.vars.immediateRender&&!n.vars.autoRevert||n._startAt.render(t,!0,l)),zh=n=>!n||n._ts&&zh(n.parent),Nh=n=>n._repeat?Bh(n._tTime,n=n.duration()+n._rDelay)*n:0,Bh=(n,t)=>{let e=Math.floor(n/=t);return n&&e===n?e-1:e},Fh=(n,t)=>(n-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur),kh=n=>n._end=yh(n._start+(n._tDur/Math.abs(n._ts||n._rts||Sc)||0)),Uh=(n,t)=>{let e=n._dp;return e&&e.smoothChildTiming&&n._ts&&(n._start=yh(e._time-(n._ts>0?t/n._ts:((n._dirty?n.totalDuration():n._tDur)-t)/-n._ts)),kh(n),e._dirty||Dh(e,n)),n},jh=(n,t)=>{let e;if((t._time||!t._dur&&t._initted||t._start<n._time&&(t._dur||!t.add))&&(e=Fh(n.rawTime(),t),(!t._dur||$h(0,t.totalDuration(),e)-t._tTime>Sc)&&t.render(e,!0)),Dh(n,t)._dp&&n._initted&&n._time>=n._dur&&n._ts){if(n._dur<n.duration())for(e=n;e._dp;)e.rawTime()>=0&&e.totalTime(e._tTime),e=e._dp;n._zTime=-1e-8}},Gh=(n,t,e,l)=>(t.parent&&Oh(t),t._start=yh((Ic(e)?e:e||n!==fc?Jh(n,e,t):n._time)+t._delay),t._end=yh(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Ch(n,t,"_first","_last",n._sort?"_start":0),qh(t)||(n._recent=t),l||jh(n,t),n._ts<0&&Uh(n,n._tTime),n),Hh=(n,t)=>(Zc.ScrollTrigger||Qc("scrollTrigger",t))&&Zc.ScrollTrigger.create(t,n),Vh=(n,t,e,l,r)=>(Jp(n,t,r),n._initted?!e&&n._pt&&!pc&&(n._dur&&!1!==n.vars.lazy||!n._dur&&n.vars.lazy)&&xc!==Pp.frame?(uh.push(n),n._lazy=[r,l],1):void 0:1),Wh=({parent:n})=>n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||Wh(n)),qh=({data:n})=>"isFromStart"===n||"isStart"===n,Xh=(n,t,e,l)=>{let r=n._repeat,i=yh(t)||0,u=n._tTime/n._tDur;return u&&!l&&(n._time*=i/n._dur),n._dur=i,n._tDur=r?r<0?1e10:yh(i*(r+1)+n._rDelay*r):i,u>0&&!l&&Uh(n,n._tTime=n._tDur*u),n.parent&&kh(n),e||Dh(n.parent,n),n},Yh=n=>n instanceof Vp?Dh(n):Xh(n,n._dur),Zh={_start:0,endTime:th,totalDuration:th},Jh=(n,t,e)=>{let l,r,i,u=n.labels,o=n._recent||Zh,a=n.duration()>=Ec?o.endTime(!1):n._dur;return Oc(t)&&(isNaN(t)||t in u)?(r=t.charAt(0),i="%"===t.substr(-1),l=t.indexOf("="),"<"===r||">"===r?(l>=0&&(t=t.replace(/=/,"")),("<"===r?o._start:o.endTime(o._repeat>=0))+(parseFloat(t.substr(1))||0)*(i?(l<0?o:e).totalDuration()/100:1)):l<0?(t in u||(u[t]=a),u[t]):(r=parseFloat(t.charAt(l-1)+t.substr(l+1)),i&&e&&(r=r/100*(jc(e)?e[0]:e).totalDuration()),l>1?Jh(n,t.substr(0,l-1),e)+r:a+r)):null==t?a:+t},Kh=(n,t,e)=>{let l,r,i=Ic(t[1]),u=(i?2:1)+(n<2?0:1),o=t[u];if(i&&(o.duration=t[1]),o.parent=e,n){for(l=o,r=e;r&&!("immediateRender"in l);)l=r.vars.defaults||{},r=Bc(r.vars.inherit)&&r.parent;o.immediateRender=Bc(l.immediateRender),n<2?o.runBackwards=1:o.startAt=t[u-1]}return new td(t[0],o,t[u+1])},Qh=(n,t)=>n||0===n?t(n):t,$h=(n,t,e)=>e<n?n:e>t?t:e,np=(n,t)=>Oc(n)&&(t=Yc.exec(n))?t[1]:"",tp=[].slice,ep=(n,t)=>n&&Nc(n)&&"length"in n&&(!t&&!n.length||n.length-1 in n&&Nc(n[0]))&&!n.nodeType&&n!==mc,lp=(n,t,e)=>dc&&!t&&dc.selector?dc.selector(n):!Oc(n)||e||!vc&&Cp()?jc(n)?((n,t,e=[])=>n.forEach((n=>Oc(n)&&!t||ep(n,1)?e.push(...lp(n)):e.push(n)))||e)(n,e):ep(n)?tp.call(n,0):n?[n]:[]:tp.call((t||gc).querySelectorAll(n),0),rp=n=>(n=lp(n)[0]||$c("Invalid scope")||{},t=>{let e=n.current||n.nativeElement||n;return lp(t,e.querySelectorAll?e:e===n?$c("Invalid scope")||gc.createElement("div"):n)}),ip=n=>n.sort((()=>.5-Math.random())),up=n=>{if(Dc(n))return n;let t=Nc(n)?n:{each:n},e=Bp(t.ease),l=t.from||0,r=parseFloat(t.base)||0,i={},u=l>0&&l<1,o=isNaN(l)||u,a=t.axis,s=l,c=l;return Oc(l)?s=c={center:.5,edges:.5,end:1}[l]||0:!u&&o&&(s=l[0],c=l[1]),(n,u,h)=>{let p,d,f,m,v,g,y,x,b,_=(h||t).length,w=i[_];if(!w){if(b="auto"===t.grid?0:(t.grid||[1,Ec])[1],!b){for(y=-Ec;y<(y=h[b++].getBoundingClientRect().left)&&b<_;);b--}for(w=i[_]=[],p=o?Math.min(b,_)*s-.5:l%b,d=b===Ec?0:o?_*c/b-.5:l/b|0,y=0,x=Ec,g=0;g<_;g++)f=g%b-p,m=d-(g/b|0),w[g]=v=a?Math.abs("y"===a?m:f):Pc(f*f+m*m),v>y&&(y=v),v<x&&(x=v);"random"===l&&ip(w),w.max=y-x,w.min=x,w.v=_=(parseFloat(t.amount)||parseFloat(t.each)*(b>_?_-1:a?"y"===a?_/b:b:Math.max(b,_/b))||0)*("edges"===l?-1:1),w.b=_<0?r-_:r,w.u=np(t.amount||t.each)||0,e=e&&_<0?zp(e):e}return _=(w[n]-w.min)/w.max||0,yh(w.b+(e?e(_):_)*w.v)+w.u}},op=n=>{let t=Math.pow(10,((n+"").split(".")[1]||"").length);return e=>{let l=yh(Math.round(parseFloat(e)/n)*n*t);return(l-l%1)/t+(Ic(e)?0:np(e))}},ap=(n,t)=>{let e,l,r=jc(n);return!r&&Nc(n)&&(e=r=n.radius||Ec,n.values?(n=lp(n.values),(l=!Ic(n[0]))&&(e*=e)):n=op(n.increment)),Qh(t,r?Dc(n)?t=>(l=n(t),Math.abs(l-t)<=e?l:t):t=>{let r,i,u=parseFloat(l?t.x:t),o=parseFloat(l?t.y:0),a=Ec,s=0,c=n.length;for(;c--;)l?(r=n[c].x-u,i=n[c].y-o,r=r*r+i*i):r=Math.abs(n[c]-u),r<a&&(a=r,s=c);return s=!e||a<=e?n[s]:t,l||s===t||Ic(t)?s:s+np(t)}:op(n))},sp=(n,t,e,l)=>Qh(jc(n)?!t:!0===e?!!(e=0):!l,(()=>jc(n)?n[~~(Math.random()*n.length)]:(e=e||1e-5)&&(l=e<1?10**((e+"").length-2):1)&&Math.floor(Math.round((n-e/2+Math.random()*(t-n+.99*e))/e)*e*l)/l)),cp=(n,t,e)=>Qh(e,(e=>n[~~t(e)])),hp=function(n,t,e){let l=t-n;return jc(n)?cp(n,hp(0,n.length),t):Qh(e,(t=>(l+(t-n)%l)%l+n))},pp=(n,t,e)=>{let l=t-n,r=2*l;return jc(n)?cp(n,pp(0,n.length-1),t):Qh(e,(t=>n+((t=(r+(t-n)%r)%r||0)>l?r-t:t)))},dp=n=>{let t,e,l,r,i=0,u="";for(;~(t=n.indexOf("random(",i));)l=n.indexOf(")",t),r="["===n.charAt(t+7),e=n.substr(t+7,l-t-7).match(r?Xc:Gc),u+=n.substr(i,t-i)+sp(r?e:+e[0],r?0:+e[1],+e[2]||1e-5),i=l+1;return u+n.substr(i,n.length-i)},fp=(n,t,e,l,r)=>{let i=t-n,u=l-e;return Qh(r,(t=>e+((t-n)/i*u||0)))},mp=(n,t,e,l)=>{let r=isNaN(n+t)?0:e=>(1-e)*n+e*t;if(!r){let i,u,o,a,s,c=Oc(n),h={};if(!0===e&&(l=1)&&(e=null),c)n={p:n},t={p:t};else if(jc(n)&&!jc(t)){for(o=[],a=n.length,s=a-2,u=1;u<a;u++)o.push(mp(n[u-1],n[u]));a--,r=n=>{n*=a;let t=Math.min(s,~~n);return o[t](n-t)},e=t}else l||(n=Th(jc(n)?[]:{},n));if(!o){for(i in t)Yp.call(h,n,i,"get",t[i]);r=t=>cd(t,h)||(c?n.p:n)}}return Qh(e,r)},vp=(n,t,e)=>{let l,r,i,u=n.labels,o=Ec;for(l in u)r=u[l]-t,r<0==!!e&&r&&o>(r=Math.abs(r))&&(i=l,o=r);return i},gp=(n,t,e)=>{let l,r,i,u=n.vars,o=u[t],a=dc,s=n._ctx;if(o)return l=u[t+"Params"],r=u.callbackScope||n,e&&uh.length&&_h(),s&&(dc=s),i=l?o.apply(r,l):o.call(r),dc=a,i},yp=n=>(Oh(n),n.scrollTrigger&&n.scrollTrigger.kill(!!pc),n.progress()<1&&gp(n,"onInterrupt"),n),xp=[],bp=n=>{if(Fc()&&n){let t=(n=!n.name&&n.default||n).name,e=Dc(n),l=t&&!e&&n.init?function(){this._props=[]}:n,r={init:th,render:cd,add:Yp,kill:pd,modifier:hd,rawVars:0},i={targetTest:0,get:0,getSetter:ud,aliases:{},register:0};if(Cp(),n!==l){if(ah[t])return;Sh(l,Sh(Lh(n,r),i)),Th(l.prototype,Th(r,Lh(n,i))),ah[l.prop=t]=l,n.targetTest&&(hh.push(l),ih[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}nh(t,l),n.register&&n.register(Ld,l,md)}else n&&xp.push(n)},_p=255,wp={aqua:[0,_p,_p],lime:[0,_p,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,_p],navy:[0,0,128],white:[_p,_p,_p],olive:[128,128,0],yellow:[_p,_p,0],orange:[_p,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[_p,0,0],pink:[_p,192,203],cyan:[0,_p,_p],transparent:[_p,_p,_p,0]},Mp=(n,t,e)=>(6*(n+=n<0?1:n>1?-1:0)<1?t+(e-t)*n*6:n<.5?e:3*n<2?t+(e-t)*(2/3-n)*6:t)*_p+.5|0,Ep=(n,t,e)=>{let l,r,i,u,o,a,s,c,h,p,d=n?Ic(n)?[n>>16,n>>8&_p,n&_p]:0:wp.black;if(!d){if(","===n.substr(-1)&&(n=n.substr(0,n.length-1)),wp[n])d=wp[n];else if("#"===n.charAt(0)){if(n.length<6&&(l=n.charAt(1),r=n.charAt(2),i=n.charAt(3),n="#"+l+l+r+r+i+i+(5===n.length?n.charAt(4)+n.charAt(4):"")),9===n.length)return d=parseInt(n.substr(1,6),16),[d>>16,d>>8&_p,d&_p,parseInt(n.substr(7),16)/255];d=[(n=parseInt(n.substr(1),16))>>16,n>>8&_p,n&_p]}else if("hsl"===n.substr(0,3))if(d=p=n.match(Gc),t){if(~n.indexOf("="))return d=n.match(Hc),e&&d.length<4&&(d[3]=1),d}else u=+d[0]%360/360,o=+d[1]/100,a=+d[2]/100,r=a<=.5?a*(o+1):a+o-a*o,l=2*a-r,d.length>3&&(d[3]*=1),d[0]=Mp(u+1/3,l,r),d[1]=Mp(u,l,r),d[2]=Mp(u-1/3,l,r);else d=n.match(Gc)||wp.transparent;d=d.map(Number)}return t&&!p&&(l=d[0]/_p,r=d[1]/_p,i=d[2]/_p,s=Math.max(l,r,i),c=Math.min(l,r,i),a=(s+c)/2,s===c?u=o=0:(h=s-c,o=a>.5?h/(2-s-c):h/(s+c),u=s===l?(r-i)/h+(r<i?6:0):s===r?(i-l)/h+2:(l-r)/h+4,u*=60),d[0]=~~(u+.5),d[1]=~~(100*o+.5),d[2]=~~(100*a+.5)),e&&d.length<4&&(d[3]=1),d},Sp=n=>{let t=[],e=[],l=-1;return n.split(Ap).forEach((n=>{let r=n.match(Vc)||[];t.push(...r),e.push(l+=r.length+1)})),t.c=e,t},Tp=(n,t,e)=>{let l,r,i,u,o="",a=(n+o).match(Ap),s=t?"hsla(":"rgba(",c=0;if(!a)return n;if(a=a.map((n=>(n=Ep(n,t,1))&&s+(t?n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:n.join(","))+")")),e&&(i=Sp(n),l=e.c,l.join(o)!==i.c.join(o)))for(r=n.replace(Ap,"1").split(Vc),u=r.length-1;c<u;c++)o+=r[c]+(~l.indexOf(c)?a.shift()||s+"0,0,0,0)":(i.length?i:a.length?a:e).shift());if(!r)for(r=n.split(Ap),u=r.length-1;c<u;c++)o+=r[c]+a[c];return o+r[u]},Ap=function(){let n,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(n in wp)t+="|"+n+"\\b";return new RegExp(t+")","gi")}(),Lp=/hsl[a]?\(/,Pp=function(){let n,t,e,l,r,i,u=Date.now,o=500,a=33,s=u(),c=s,h=1e3/240,p=h,d=[],f=e=>{let m,v,g,y,x=u()-c,b=!0===e;if(x>o&&(s+=x-a),c+=x,g=c-s,m=g-p,(m>0||b)&&(y=++l.frame,r=g-1e3*l.time,l.time=g/=1e3,p+=m+(m>=h?4:h-m),v=1),b||(n=t(f)),v)for(i=0;i<d.length;i++)d[i](g,r,y,e)};return l={time:0,frame:0,tick(){f(!0)},deltaRatio:n=>r/(1e3/(n||60)),wake(){yc&&(!vc&&Fc()&&(mc=vc=window,gc=mc.document||{},Zc.gsap=Ld,(mc.gsapVersions||(mc.gsapVersions=[])).push(Ld.version),Kc(Jc||mc.GreenSockGlobals||!mc.gsap&&mc||{}),e=mc.requestAnimationFrame,xp.forEach(bp)),n&&l.sleep(),t=e||(n=>setTimeout(n,p-1e3*l.time+1|0)),_c=1,f(2))},sleep(){(e?mc.cancelAnimationFrame:clearTimeout)(n),_c=0,t=th},lagSmoothing(n,t){o=n||1/0,a=Math.min(t||33,o)},fps(n){h=1e3/(n||240),p=1e3*l.time+h},add(n,t,e){let r=t?(t,e,i,u)=>{n(t,e,i,u),l.remove(r)}:n;return l.remove(n),d[e?"unshift":"push"](r),Cp(),r},remove(n,t){~(t=d.indexOf(n))&&d.splice(t,1)&&i>=t&&i--},_listeners:d},l}(),Cp=()=>!_c&&Pp.wake(),Rp={},Op=/^[\d.\-M][\d.\-,\s]/,Dp=/["']/g,Ip=n=>{let t,e,l,r={},i=n.substr(1,n.length-3).split(":"),u=i[0],o=1,a=i.length;for(;o<a;o++)e=i[o],t=o!==a-1?e.lastIndexOf(","):e.length,l=e.substr(0,t),r[u]=isNaN(l)?l.replace(Dp,"").trim():+l,u=e.substr(t+1).trim();return r},zp=n=>t=>1-n(1-t),Np=(n,t)=>{let e,l=n._first;for(;l;)l instanceof Vp?Np(l,t):!l.vars.yoyoEase||l._yoyo&&l._repeat||l._yoyo===t||(l.timeline?Np(l.timeline,t):(e=l._ease,l._ease=l._yEase,l._yEase=e,l._yoyo=t)),l=l._next},Bp=(n,t)=>n&&(Dc(n)?n:Rp[n]||(n=>{let t=(n+"").split("("),e=Rp[t[0]];return e&&t.length>1&&e.config?e.config.apply(null,~n.indexOf("{")?[Ip(t[1])]:(n=>{let t=n.indexOf("(")+1,e=n.indexOf(")"),l=n.indexOf("(",t);return n.substring(t,~l&&l<e?n.indexOf(")",e+1):e)})(n).split(",").map(Mh)):Rp._CE&&Op.test(n)?Rp._CE("",n):e})(n))||t,Fp=(n,t,e=(n=>1-t(1-n)),l=(n=>n<.5?t(2*n)/2:1-t(2*(1-n))/2))=>{let r,i={easeIn:t,easeOut:e,easeInOut:l};return vh(n,(n=>{Rp[n]=Zc[n]=i,Rp[r=n.toLowerCase()]=e;for(let t in i)Rp[r+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Rp[n+"."+t]=i[t]})),i},kp=n=>t=>t<.5?(1-n(1-2*t))/2:.5+n(2*(t-.5))/2,Up=(n,t,e)=>{let l=t>=1?t:1,r=(e||(n?.3:.45))/(t<1?t:1),i=r/Tc*(Math.asin(1/l)||0),u=n=>1===n?1:l*2**(-10*n)*Rc((n-i)*r)+1,o="out"===n?u:"in"===n?n=>1-u(1-n):kp(u);return r=Tc/r,o.config=(t,e)=>Up(n,t,e),o},jp=(n,t=1.70158)=>{let e=n=>n?--n*n*((t+1)*n+t)+1:0,l="out"===n?e:"in"===n?n=>1-e(1-n):kp(e);return l.config=t=>jp(n,t),l};vh("Linear,Quad,Cubic,Quart,Quint,Strong",((n,t)=>{let e=t<5?t+1:t;Fp(n+",Power"+(e-1),t?n=>n**e:n=>n,(n=>1-(1-n)**e),(n=>n<.5?(2*n)**e/2:1-(2*(1-n))**e/2))})),Rp.Linear.easeNone=Rp.none=Rp.Linear.easeIn,Fp("Elastic",Up("in"),Up("out"),Up()),((n,t)=>{let e=e=>e<.36363636363636365?n*e*e:e<.7272727272727273?n*(e-1.5/t)**2+.75:e<.9090909090909092?n*(e-=2.25/t)*e+.9375:n*(e-2.625/t)**2+.984375;Fp("Bounce",(n=>1-e(1-n)),e)})(7.5625,2.75),Fp("Expo",(n=>n?2**(10*(n-1)):0)),Fp("Circ",(n=>-(Pc(1-n*n)-1))),Fp("Sine",(n=>1===n?1:1-Cc(n*Ac))),Fp("Back",jp("in"),jp("out"),jp()),Rp.SteppedEase=Rp.steps=Zc.SteppedEase={config(n=1,t){let e=1/n,l=n+(t?0:1),r=t?1:0;return n=>((l*$h(0,.99999999,n)|0)+r)*e}},Mc.ease=Rp["quad.out"],vh("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(n=>ph+=n+","+n+"Params,"));class Gp{constructor(n,t){this.id=Lc++,n._gsap=this,this.target=n,this.harness=t,this.get=t?t.get:mh,this.set=t?t.getSetter:ud}}class Hp{constructor(n){this.vars=n,this._delay=+n.delay||0,(this._repeat=n.repeat===1/0?-2:n.repeat||0)&&(this._rDelay=n.repeatDelay||0,this._yoyo=!!n.yoyo||!!n.yoyoEase),this._ts=1,Xh(this,+n.duration,1,1),this.data=n.data,dc&&(this._ctx=dc,dc.data.push(this)),_c||Pp.wake()}delay(n){return n||0===n?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+n-this._delay),this._delay=n,this):this._delay}duration(n){return arguments.length?this.totalDuration(this._repeat>0?n+(n+this._rDelay)*this._repeat:n):this.totalDuration()&&this._dur}totalDuration(n){return arguments.length?(this._dirty=0,Xh(this,this._repeat<0?n:(n-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur}totalTime(n,t){if(Cp(),!arguments.length)return this._tTime;let e=this._dp;if(e&&e.smoothChildTiming&&this._ts){for(Uh(this,n),!e._dp||e.parent||jh(e,this);e&&e.parent;)e.parent._time!==e._start+(e._ts>=0?e._tTime/e._ts:(e.totalDuration()-e._tTime)/-e._ts)&&e.totalTime(e._tTime,!0),e=e.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&n<this._tDur||this._ts<0&&n>0||!this._tDur&&!n)&&Gh(this._dp,this,this._start-this._delay)}return(this._tTime!==n||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===Sc||!n&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=n),wh(this,n,t)),this}time(n,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),n+Nh(this))%(this._dur+this._rDelay)||(n?this._dur:0),t):this._time}totalProgress(n,t){return arguments.length?this.totalTime(this.totalDuration()*n,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio}progress(n,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?n:1-n)+Nh(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio}iteration(n,t){let e=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(n-1)*e,t):this._repeat?Bh(this._tTime,e)+1:1}timeScale(n){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===n)return this;let t=this.parent&&this._ts?Fh(this.parent._time,this):this._tTime;return this._rts=+n||0,this._ts=this._ps||-1e-8===n?0:this._rts,this.totalTime($h(-Math.abs(this._delay),this._tDur,t),!0),kh(this),(n=>{let t=n.parent;for(;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return n})(this)}paused(n){return arguments.length?(this._ps!==n&&(this._ps=n,n?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Cp(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==Sc&&(this._tTime-=Sc)))),this):this._ps}startTime(n){if(arguments.length){this._start=n;let t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Gh(t,this,n-this._delay),this}return this._start}endTime(n){return this._start+(Bc(n)?this.totalDuration():this.duration())/Math.abs(this._ts||1)}rawTime(n){let t=this.parent||this._dp;return t?n&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Fh(t.rawTime(n),this):this._tTime:this._tTime}revert(n=rh){let t=pc;return pc=n,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(n),this.totalTime(-.01,n.suppressEvents)),"nested"!==this.data&&!1!==n.kill&&this.kill(),pc=t,this}globalTime(n){let t=this,e=arguments.length?n:t.rawTime();for(;t;)e=t._start+e/(t._ts||1),t=t._dp;return!this.parent&&this._sat?this._sat.vars.immediateRender?-1/0:this._sat.globalTime(n):e}repeat(n){return arguments.length?(this._repeat=n===1/0?-2:n,Yh(this)):-2===this._repeat?1/0:this._repeat}repeatDelay(n){if(arguments.length){let t=this._time;return this._rDelay=n,Yh(this),t?this.time(t):this}return this._rDelay}yoyo(n){return arguments.length?(this._yoyo=n,this):this._yoyo}seek(n,t){return this.totalTime(Jh(this,n),Bc(t))}restart(n,t){return this.play().totalTime(n?-this._delay:0,Bc(t))}play(n,t){return null!=n&&this.seek(n,t),this.reversed(!1).paused(!1)}reverse(n,t){return null!=n&&this.seek(n||this.totalDuration(),t),this.reversed(!0).paused(!1)}pause(n,t){return null!=n&&this.seek(n,t),this.paused(!0)}resume(){return this.paused(!1)}reversed(n){return arguments.length?(!!n!==this.reversed()&&this.timeScale(-this._rts||(n?-1e-8:0)),this):this._rts<0}invalidate(){return this._initted=this._act=0,this._zTime=-1e-8,this}isActive(){let n,t=this.parent||this._dp,e=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(n=t.rawTime(!0))>=e&&n<this.endTime(!0)-Sc))}eventCallback(n,t,e){let l=this.vars;return arguments.length>1?(t?(l[n]=t,e&&(l[n+"Params"]=e),"onUpdate"===n&&(this._onUpdate=t)):delete l[n],this):l[n]}then(n){let t=this;return new Promise((e=>{let l=Dc(n)?n:Eh,r=()=>{let n=t.then;t.then=null,Dc(l)&&(l=l(t))&&(l.then||l===t)&&(t.then=n),e(l),t.then=n};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?r():t._prom=r}))}kill(){yp(this)}}Sh(Hp.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});class Vp extends Hp{constructor(n={},t){super(n),this.labels={},this.smoothChildTiming=!!n.smoothChildTiming,this.autoRemoveChildren=!!n.autoRemoveChildren,this._sort=Bc(n.sortChildren),fc&&Gh(n.parent||fc,this,t),n.reversed&&this.reverse(),n.paused&&this.paused(!0),n.scrollTrigger&&Hh(this,n.scrollTrigger)}to(n,t,e){return Kh(0,arguments,this),this}from(n,t,e){return Kh(1,arguments,this),this}fromTo(n,t,e,l){return Kh(2,arguments,this),this}set(n,t,e){return t.duration=0,t.parent=this,Ph(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new td(n,t,Jh(this,e),1),this}call(n,t,e){return Gh(this,td.delayedCall(0,n,t),e)}staggerTo(n,t,e,l,r,i,u){return e.duration=t,e.stagger=e.stagger||l,e.onComplete=i,e.onCompleteParams=u,e.parent=this,new td(n,e,Jh(this,r)),this}staggerFrom(n,t,e,l,r,i,u){return e.runBackwards=1,Ph(e).immediateRender=Bc(e.immediateRender),this.staggerTo(n,t,e,l,r,i,u)}staggerFromTo(n,t,e,l,r,i,u,o){return l.startAt=e,Ph(l).immediateRender=Bc(l.immediateRender),this.staggerTo(n,t,l,r,i,u,o)}render(n,t,e){let l,r,i,u,o,a,s,c,h,p,d,f,m=this._time,v=this._dirty?this.totalDuration():this._tDur,g=this._dur,y=n<=0?0:yh(n),x=this._zTime<0!=n<0&&(this._initted||!g);if(this!==fc&&y>v&&n>=0&&(y=v),y!==this._tTime||e||x){if(m!==this._time&&g&&(y+=this._time-m,n+=this._time-m),l=y,h=this._start,c=this._ts,a=!c,x&&(g||(m=this._zTime),(n||!t)&&(this._zTime=n)),this._repeat){if(d=this._yoyo,o=g+this._rDelay,this._repeat<-1&&n<0)return this.totalTime(100*o+n,t,e);if(l=yh(y%o),y===v?(u=this._repeat,l=g):(u=~~(y/o),u&&u===y/o&&(l=g,u--),l>g&&(l=g)),p=Bh(this._tTime,o),!m&&this._tTime&&p!==u&&this._tTime-p*o-this._dur<=0&&(p=u),d&&1&u&&(l=g-l,f=1),u!==p&&!this._lock){let n=d&&1&p,e=n===(d&&1&u);if(u<p&&(n=!n),m=n?0:y%g?g:y,this._lock=1,this.render(m||(f?0:yh(u*o)),t,!g)._lock=0,this._tTime=y,!t&&this.parent&&gp(this,"onRepeat"),this.vars.repeatRefresh&&!f&&(this.invalidate()._lock=1),m&&m!==this._time||a!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(g=this._dur,v=this._tDur,e&&(this._lock=2,m=n?g:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!f&&this.invalidate()),this._lock=0,!this._ts&&!a)return this;Np(this,f)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(s=((n,t,e)=>{let l;if(e>t)for(l=n._first;l&&l._start<=e;){if("isPause"===l.data&&l._start>t)return l;l=l._next}else for(l=n._last;l&&l._start>=e;){if("isPause"===l.data&&l._start<t)return l;l=l._prev}})(this,yh(m),yh(l)),s&&(y-=l-(l=s._start))),this._tTime=y,this._time=l,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=n,m=0),!m&&l&&!t&&!u&&(gp(this,"onStart"),this._tTime!==y))return this;if(l>=m&&n>=0)for(r=this._first;r;){if(i=r._next,(r._act||l>=r._start)&&r._ts&&s!==r){if(r.parent!==this)return this.render(n,t,e);if(r.render(r._ts>0?(l-r._start)*r._ts:(r._dirty?r.totalDuration():r._tDur)+(l-r._start)*r._ts,t,e),l!==this._time||!this._ts&&!a){s=0,i&&(y+=this._zTime=-1e-8);break}}r=i}else{r=this._last;let u=n<0?n:l;for(;r;){if(i=r._prev,(r._act||u<=r._end)&&r._ts&&s!==r){if(r.parent!==this)return this.render(n,t,e);if(r.render(r._ts>0?(u-r._start)*r._ts:(r._dirty?r.totalDuration():r._tDur)+(u-r._start)*r._ts,t,e||pc&&(r._initted||r._startAt)),l!==this._time||!this._ts&&!a){s=0,i&&(y+=this._zTime=u?-1e-8:Sc);break}}r=i}}if(s&&!t&&(this.pause(),s.render(l>=m?0:-1e-8)._zTime=l>=m?1:-1,this._ts))return this._start=h,kh(this),this.render(n,t,e);this._onUpdate&&!t&&gp(this,"onUpdate",!0),(y===v&&this._tTime>=this.totalDuration()||!y&&m)&&(h!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((n||!g)&&(y===v&&this._ts>0||!y&&this._ts<0)&&Oh(this,1),t||n<0&&!m||!y&&!m&&v||(gp(this,y===v&&n>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(y<v&&this.timeScale()>0)&&this._prom())))}return this}add(n,t){if(Ic(t)||(t=Jh(this,t,n)),!(n instanceof Hp)){if(jc(n))return n.forEach((n=>this.add(n,t))),this;if(Oc(n))return this.addLabel(n,t);if(!Dc(n))return this;n=td.delayedCall(0,n)}return this!==n?Gh(this,n,t):this}getChildren(n=!0,t=!0,e=!0,l=-Ec){let r=[],i=this._first;for(;i;)i._start>=l&&(i instanceof td?t&&r.push(i):(e&&r.push(i),n&&r.push(...i.getChildren(!0,t,e)))),i=i._next;return r}getById(n){let t=this.getChildren(1,1,1),e=t.length;for(;e--;)if(t[e].vars.id===n)return t[e]}remove(n){return Oc(n)?this.removeLabel(n):Dc(n)?this.killTweensOf(n):(Rh(this,n),n===this._recent&&(this._recent=this._last),Dh(this))}totalTime(n,t){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=yh(Pp.time-(this._ts>0?n/this._ts:(this.totalDuration()-n)/-this._ts))),super.totalTime(n,t),this._forcing=0,this):this._tTime}addLabel(n,t){return this.labels[n]=Jh(this,t),this}removeLabel(n){return delete this.labels[n],this}addPause(n,t,e){let l=td.delayedCall(0,t||th,e);return l.data="isPause",this._hasPause=1,Gh(this,l,Jh(this,n))}removePause(n){let t=this._first;for(n=Jh(this,n);t;)t._start===n&&"isPause"===t.data&&Oh(t),t=t._next}killTweensOf(n,t,e){let l=this.getTweensOf(n,e),r=l.length;for(;r--;)Wp!==l[r]&&l[r].kill(n,t);return this}getTweensOf(n,t){let e,l=[],r=lp(n),i=this._first,u=Ic(t);for(;i;)i instanceof td?bh(i._targets,r)&&(u?(!Wp||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&l.push(i):(e=i.getTweensOf(r,t)).length&&l.push(...e),i=i._next;return l}tweenTo(n,t){t=t||{};let e,l=this,r=Jh(l,n),{startAt:i,onStart:u,onStartParams:o,immediateRender:a}=t,s=td.to(l,Sh({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:r,overwrite:"auto",duration:t.duration||Math.abs((r-(i&&"time"in i?i.time:l._time))/l.timeScale())||Sc,onStart:()=>{if(l.pause(),!e){let n=t.duration||Math.abs((r-(i&&"time"in i?i.time:l._time))/l.timeScale());s._dur!==n&&Xh(s,n,0,1).render(s._time,!0,!0),e=1}u&&u.apply(s,o||[])}},t));return a?s.render(0):s}tweenFromTo(n,t,e){return this.tweenTo(t,Sh({startAt:{time:Jh(this,n)}},e))}recent(){return this._recent}nextLabel(n=this._time){return vp(this,Jh(this,n))}previousLabel(n=this._time){return vp(this,Jh(this,n),1)}currentLabel(n){return arguments.length?this.seek(n,!0):this.previousLabel(this._time+Sc)}shiftChildren(n,t,e=0){let l,r=this._first,i=this.labels;for(;r;)r._start>=e&&(r._start+=n,r._end+=n),r=r._next;if(t)for(l in i)i[l]>=e&&(i[l]+=n);return Dh(this)}invalidate(n){let t=this._first;for(this._lock=0;t;)t.invalidate(n),t=t._next;return super.invalidate(n)}clear(n=!0){let t,e=this._first;for(;e;)t=e._next,this.remove(e),e=t;return this._dp&&(this._time=this._tTime=this._pTime=0),n&&(this.labels={}),Dh(this)}totalDuration(n){let t,e,l,r=0,i=this,u=i._last,o=Ec;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-n:n));if(i._dirty){for(l=i.parent;u;)t=u._prev,u._dirty&&u.totalDuration(),e=u._start,e>o&&i._sort&&u._ts&&!i._lock?(i._lock=1,Gh(i,u,e-u._delay,1)._lock=0):o=e,e<0&&u._ts&&(r-=e,(!l&&!i._dp||l&&l.smoothChildTiming)&&(i._start+=e/i._ts,i._time-=e,i._tTime-=e),i.shiftChildren(-e,!1,-Infinity),o=0),u._end>r&&u._ts&&(r=u._end),u=t;Xh(i,i===fc&&i._time>r?i._time:r,1,1),i._dirty=0}return i._tDur}static updateRoot(n){if(fc._ts&&(wh(fc,Fh(n,fc)),xc=Pp.frame),Pp.frame>=ch){ch+=wc.autoSleep||120;let n=fc._first;if((!n||!n._ts)&&wc.autoSleep&&Pp._listeners.length<2){for(;n&&!n._ts;)n=n._next;n||Pp.sleep()}}}}Sh(Vp.prototype,{_lock:0,_hasPause:0,_forcing:0});let Wp,qp,Xp=function(n,t,e,l,r,i,u){let o,a,s,c,h,p,d,f,m=new md(this._pt,n,t,0,1,sd,null,r),v=0,g=0;for(m.b=e,m.e=l,e+="",(d=~(l+="").indexOf("random("))&&(l=dp(l)),i&&(f=[e,l],i(f,n,t),e=f[0],l=f[1]),a=e.match(Wc)||[];o=Wc.exec(l);)c=o[0],h=l.substring(v,o.index),s?s=(s+1)%5:"rgba("===h.substr(-5)&&(s=1),c!==a[g++]&&(p=parseFloat(a[g-1])||0,m._pt={_next:m._pt,p:h||1===g?h:",",s:p,c:"="===c.charAt(1)?xh(p,c)-p:parseFloat(c)-p,m:s&&s<4?Math.round:0},v=Wc.lastIndex);return m.c=v<l.length?l.substring(v,l.length):"",m.fp=u,(qc.test(l)||d)&&(m.e=0),this._pt=m,m},Yp=function(n,t,e,l,r,i,u,o,a,s){Dc(l)&&(l=l(r||0,n,i));let c,h=n[t],p="get"!==e?e:Dc(h)?a?n[t.indexOf("set")||!Dc(n["get"+t.substr(3)])?t:"get"+t.substr(3)](a):n[t]():h,d=Dc(h)?a?rd:ld:ed;if(Oc(l)&&(~l.indexOf("random(")&&(l=dp(l)),"="===l.charAt(1)&&(c=xh(p,l)+(np(p)||0),(c||0===c)&&(l=c))),!s||p!==l||qp)return isNaN(p*l)||""===l?(!h&&!(t in n)&&Qc(t,l),Xp.call(this,n,t,p,l,d,o||wc.stringFilter,a)):(c=new md(this._pt,n,t,+p||0,l-(p||0),"boolean"==typeof h?ad:od,0,d),a&&(c.fp=a),u&&c.modifier(u,this,n),this._pt=c)},Zp=(n,t,e,l,r,i)=>{let u,o,a,s;if(ah[n]&&!1!==(u=new ah[n]).init(r,u.rawVars?t[n]:((n,t,e,l,r)=>{if(Dc(n)&&(n=Qp(n,r,t,e,l)),!Nc(n)||n.style&&n.nodeType||jc(n)||Uc(n))return Oc(n)?Qp(n,r,t,e,l):n;let i,u={};for(i in n)u[i]=Qp(n[i],r,t,e,l);return u})(t[n],l,r,i,e),e,l,i)&&(e._pt=o=new md(e._pt,r,n,0,1,u.render,u,0,u.priority),e!==bc))for(a=e._ptLookup[e._targets.indexOf(r)],s=u._props.length;s--;)a[u._props[s]]=o;return u},Jp=(n,t,e)=>{let l,r,i,u,o,a,s,c,h,p,d,f,m,v=n.vars,{ease:g,startAt:y,immediateRender:x,lazy:b,onUpdate:_,onUpdateParams:w,callbackScope:M,runBackwards:E,yoyoEase:S,keyframes:T,autoRevert:A}=v,L=n._dur,P=n._startAt,C=n._targets,R=n.parent,O=R&&"nested"===R.data?R.vars.targets:C,D="auto"===n._overwrite&&!hc,I=n.timeline;if(I&&(!T||!g)&&(g="none"),n._ease=Bp(g,Mc.ease),n._yEase=S?zp(Bp(!0===S?g:S,Mc.ease)):0,S&&n._yoyo&&!n._repeat&&(S=n._yEase,n._yEase=n._ease,n._ease=S),n._from=!I&&!!v.runBackwards,!I||T&&!v.stagger){if(c=C[0]?fh(C[0]).harness:0,f=c&&v[c.prop],l=Lh(v,ih),P&&(P._zTime<0&&P.progress(1),t<0&&E&&x&&!A?P.render(-1,!0):P.revert(E&&L?lh:eh),P._lazy=0),y){if(Oh(n._startAt=td.set(C,Sh({data:"isStart",overwrite:!1,parent:R,immediateRender:!0,lazy:!P&&Bc(b),startAt:null,delay:0,onUpdate:_,onUpdateParams:w,callbackScope:M,stagger:0},y))),n._startAt._dp=0,n._startAt._sat=n,t<0&&(pc||!x&&!A)&&n._startAt.revert(lh),x&&L&&t<=0&&e<=0)return void(t&&(n._zTime=t))}else if(E&&L&&!P)if(t&&(x=!1),i=Sh({overwrite:!1,data:"isFromStart",lazy:x&&!P&&Bc(b),immediateRender:x,stagger:0,parent:R},l),f&&(i[c.prop]=f),Oh(n._startAt=td.set(C,i)),n._startAt._dp=0,n._startAt._sat=n,t<0&&(pc?n._startAt.revert(lh):n._startAt.render(-1,!0)),n._zTime=t,x){if(!t)return}else Jp(n._startAt,Sc,Sc);for(n._pt=n._ptCache=0,b=L&&Bc(b)||b&&!L,r=0;r<C.length;r++){if(o=C[r],s=o._gsap||dh(C)[r]._gsap,n._ptLookup[r]=p={},oh[s.id]&&uh.length&&_h(),d=O===C?r:O.indexOf(o),c&&!1!==(h=new c).init(o,f||l,n,d,O)&&(n._pt=u=new md(n._pt,o,h.name,0,1,h.render,h,0,h.priority),h._props.forEach((n=>{p[n]=u})),h.priority&&(a=1)),!c||f)for(i in l)ah[i]&&(h=Zp(i,l,n,d,o,O))?h.priority&&(a=1):p[i]=u=Yp.call(n,o,i,"get",l[i],d,O,0,v.stringFilter);n._op&&n._op[r]&&n.kill(o,n._op[r]),D&&n._pt&&(Wp=n,fc.killTweensOf(o,p,n.globalTime(t)),m=!n.parent,Wp=0),n._pt&&b&&(oh[s.id]=1)}a&&fd(n),n._onInit&&n._onInit(n)}n._onUpdate=_,n._initted=(!n._op||n._pt)&&!m,T&&t<=0&&I.render(Ec,!0,!0)},Kp=(n,t,e,l)=>{let r,i,u=t.ease||l||"power1.inOut";if(jc(t))i=e[n]||(e[n]=[]),t.forEach(((n,e)=>i.push({t:e/(t.length-1)*100,v:n,e:u})));else for(r in t)i=e[r]||(e[r]=[]),"ease"===r||i.push({t:parseFloat(n),v:t[r],e:u})},Qp=(n,t,e,l,r)=>Dc(n)?n.call(t,e,l,r):Oc(n)&&~n.indexOf("random(")?dp(n):n,$p=ph+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",nd={};vh($p+",id,stagger,delay,duration,paused,scrollTrigger",(n=>nd[n]=1));class td extends Hp{constructor(n,t,e,l){"number"==typeof t&&(e.duration=t,t=e,e=null),super(l?t:Ph(t));let r,i,u,o,a,s,c,h,{duration:p,delay:d,immediateRender:f,stagger:m,overwrite:v,keyframes:g,defaults:y,scrollTrigger:x,yoyoEase:b}=this.vars,_=t.parent||fc,w=(jc(n)||Uc(n)?Ic(n[0]):"length"in t)?[n]:lp(n);if(this._targets=w.length?dh(w):$c("GSAP target "+n+" not found. https://greensock.com",!wc.nullTargetWarn)||[],this._ptLookup=[],this._overwrite=v,g||m||kc(p)||kc(d)){if(t=this.vars,r=this.timeline=new Vp({data:"nested",defaults:y||{},targets:_&&"nested"===_.data?_.vars.targets:w}),r.kill(),r.parent=r._dp=this,r._start=0,m||kc(p)||kc(d)){if(o=w.length,c=m&&up(m),Nc(m))for(a in m)~$p.indexOf(a)&&(h||(h={}),h[a]=m[a]);for(i=0;i<o;i++)u=Lh(t,nd),u.stagger=0,b&&(u.yoyoEase=b),h&&Th(u,h),s=w[i],u.duration=+Qp(p,this,i,s,w),u.delay=(+Qp(d,this,i,s,w)||0)-this._delay,!m&&1===o&&u.delay&&(this._delay=d=u.delay,this._start+=d,u.delay=0),r.to(s,u,c?c(i,s,w):0),r._ease=Rp.none;r.duration()?p=d=0:this.timeline=0}else if(g){Ph(Sh(r.vars.defaults,{ease:"none"})),r._ease=Bp(g.ease||t.ease||"none");let n,e,l,o=0;if(jc(g))g.forEach((n=>r.to(w,n,">"))),r.duration();else{for(a in u={},g)"ease"===a||"easeEach"===a||Kp(a,g[a],u,g.easeEach);for(a in u)for(n=u[a].sort(((n,t)=>n.t-t.t)),o=0,i=0;i<n.length;i++)e=n[i],l={ease:e.e,duration:(e.t-(i?n[i-1].t:0))/100*p},l[a]=e.v,r.to(w,l,o),o+=l.duration;r.duration()<p&&r.to({},{duration:p-r.duration()})}}p||this.duration(p=r.duration())}else this.timeline=0;!0!==v||hc||(Wp=this,fc.killTweensOf(w),Wp=0),Gh(_,this,e),t.reversed&&this.reverse(),t.paused&&this.paused(!0),(f||!p&&!g&&this._start===yh(_._time)&&Bc(f)&&zh(this)&&"nested"!==_.data)&&(this._tTime=-1e-8,this.render(Math.max(0,-d)||0)),x&&Hh(this,x)}render(n,t,e){let l,r,i,u,o,a,s,c,h,p=this._time,d=this._tDur,f=this._dur,m=n<0,v=n>d-Sc&&!m?d:n<Sc?0:n;if(f){if(v!==this._tTime||!n||e||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(l=v,c=this.timeline,this._repeat){if(u=f+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*u+n,t,e);if(l=yh(v%u),v===d?(i=this._repeat,l=f):(i=~~(v/u),i&&i===v/u&&(l=f,i--),l>f&&(l=f)),a=this._yoyo&&1&i,a&&(h=this._yEase,l=f-l),o=Bh(this._tTime,u),l===p&&!e&&this._initted)return this._tTime=v,this;i!==o&&(c&&this._yEase&&Np(c,a),!this.vars.repeatRefresh||a||this._lock||(this._lock=e=1,this.render(yh(u*i),!0).invalidate()._lock=0))}if(!this._initted){if(Vh(this,m?n:l,e,t,v))return this._tTime=0,this;if(p!==this._time)return this;if(f!==this._dur)return this.render(n,t,e)}if(this._tTime=v,this._time=l,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=s=(h||this._ease)(l/f),this._from&&(this.ratio=s=1-s),l&&!p&&!t&&!i&&(gp(this,"onStart"),this._tTime!==v))return this;for(r=this._pt;r;)r.r(s,r.d),r=r._next;c&&c.render(n<0?n:!l&&a?-1e-8:c._dur*c._ease(l/this._dur),t,e)||this._startAt&&(this._zTime=n),this._onUpdate&&!t&&(m&&Ih(this,n,0,e),gp(this,"onUpdate")),this._repeat&&i!==o&&this.vars.onRepeat&&!t&&this.parent&&gp(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(m&&!this._onUpdate&&Ih(this,n,0,!0),(n||!f)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Oh(this,1),t||m&&!p||!(v||p||a)||(gp(this,v===d?"onComplete":"onReverseComplete",!0),this._prom&&!(v<d&&this.timeScale()>0)&&this._prom()))}}else((n,t,e,l)=>{let r,i,u,o=n.ratio,a=t<0||!t&&(!n._start&&Wh(n)&&(n._initted||!qh(n))||(n._ts<0||n._dp._ts<0)&&!qh(n))?0:1,s=n._rDelay,c=0;if(s&&n._repeat&&(c=$h(0,n._tDur,t),i=Bh(c,s),n._yoyo&&1&i&&(a=1-a),i!==Bh(n._tTime,s)&&(o=1-a,n.vars.repeatRefresh&&n._initted&&n.invalidate())),a!==o||pc||l||n._zTime===Sc||!t&&n._zTime){if(!n._initted&&Vh(n,t,l,e,c))return;for(u=n._zTime,n._zTime=t||(e?Sc:0),e||(e=t&&!u),n.ratio=a,n._from&&(a=1-a),n._time=0,n._tTime=c,r=n._pt;r;)r.r(a,r.d),r=r._next;t<0&&Ih(n,t,0,!0),n._onUpdate&&!e&&gp(n,"onUpdate"),c&&n._repeat&&!e&&n.parent&&gp(n,"onRepeat"),(t>=n._tDur||t<0)&&n.ratio===a&&(a&&Oh(n,1),e||pc||(gp(n,a?"onComplete":"onReverseComplete",!0),n._prom&&n._prom()))}else n._zTime||(n._zTime=t)})(this,n,t,e);return this}targets(){return this._targets}invalidate(n){return(!n||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(n),super.invalidate(n)}resetTo(n,t,e,l){_c||Pp.wake(),this._ts||this.play();let r,i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Jp(this,i),r=this._ease(i/this._dur),((n,t,e,l,r,i,u)=>{let o,a,s,c,h=(n._pt&&n._ptCache||(n._ptCache={}))[t];if(!h)for(h=n._ptCache[t]=[],s=n._ptLookup,c=n._targets.length;c--;){if(o=s[c][t],o&&o.d&&o.d._pt)for(o=o.d._pt;o&&o.p!==t&&o.fp!==t;)o=o._next;if(!o)return qp=1,n.vars[t]="+=0",Jp(n,u),qp=0,1;h.push(o)}for(c=h.length;c--;)a=h[c],o=a._pt||a,o.s=!l&&0!==l||r?o.s+(l||0)+i*o.c:l,o.c=e-o.s,a.e&&(a.e=gh(e)+np(a.e)),a.b&&(a.b=o.s+np(a.b))})(this,n,t,e,l,r,i)?this.resetTo(n,t,e,l):(Uh(this,0),this.parent||Ch(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))}kill(n,t="all"){if(!(n||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?yp(this):this;if(this.timeline){let e=this.timeline.totalDuration();return this.timeline.killTweensOf(n,t,Wp&&!0!==Wp.vars.overwrite)._first||yp(this),this.parent&&e!==this.timeline.totalDuration()&&Xh(this,this._dur*this.timeline._tDur/e,0,1),this}let e,l,r,i,u,o,a,s=this._targets,c=n?lp(n):s,h=this._ptLookup,p=this._pt;if((!t||"all"===t)&&((n,t)=>{let e=n.length,l=e===t.length;for(;l&&e--&&n[e]===t[e];);return e<0})(s,c))return"all"===t&&(this._pt=0),yp(this);for((e=this._op=this._op||[],"all"!==t&&(Oc(t)&&(u={},vh(t,(n=>u[n]=1)),t=u),t=((n,t)=>{let e,l,r,i,u=n[0]?fh(n[0]).harness:0,o=u&&u.aliases;if(!o)return t;for(l in e=Th({},t),o)if(l in e)for(i=o[l].split(","),r=i.length;r--;)e[i[r]]=e[l];return e})(s,t)),a=s.length);a--;)if(~c.indexOf(s[a]))for(u in l=h[a],"all"===t?(e[a]=t,i=l,r={}):(r=e[a]=e[a]||{},i=t),i)o=l&&l[u],o&&("kill"in o.d&&!0!==o.d.kill(u)||Rh(this,o,"_pt"),delete l[u]),"all"!==r&&(r[u]=1);return this._initted&&!this._pt&&p&&yp(this),this}static to(n,t){return new td(n,t,arguments[2])}static from(n,t){return Kh(1,arguments)}static delayedCall(n,t,e,l){return new td(t,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:n,onComplete:t,onReverseComplete:t,onCompleteParams:e,onReverseCompleteParams:e,callbackScope:l})}static fromTo(n,t,e){return Kh(2,arguments)}static set(n,t){return t.duration=0,t.repeatDelay||(t.repeat=0),new td(n,t)}static killTweensOf(n,t,e){return fc.killTweensOf(n,t,e)}}Sh(td.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),vh("staggerTo,staggerFrom,staggerFromTo",(n=>{td[n]=function(){let t=new Vp,e=tp.call(arguments,0);return e.splice("staggerFromTo"===n?5:4,0,0),t[n].apply(t,e)}}));let ed=(n,t,e)=>n[t]=e,ld=(n,t,e)=>n[t](e),rd=(n,t,e,l)=>n[t](l.fp,e),id=(n,t,e)=>n.setAttribute(t,e),ud=(n,t)=>Dc(n[t])?ld:zc(n[t])&&n.setAttribute?id:ed,od=(n,t)=>t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*n))/1e6,t),ad=(n,t)=>t.set(t.t,t.p,!!(t.s+t.c*n),t),sd=function(n,t){let e=t._pt,l="";if(!n&&t.b)l=t.b;else if(1===n&&t.e)l=t.e;else{for(;e;)l=e.p+(e.m?e.m(e.s+e.c*n):Math.round(1e4*(e.s+e.c*n))/1e4)+l,e=e._next;l+=t.c}t.set(t.t,t.p,l,t)},cd=function(n,t){let e=t._pt;for(;e;)e.r(n,e.d),e=e._next},hd=function(n,t,e,l){let r,i=this._pt;for(;i;)r=i._next,i.p===l&&i.modifier(n,t,e),i=r},pd=function(n){let t,e,l=this._pt;for(;l;)e=l._next,l.p===n&&!l.op||l.op===n?Rh(this,l,"_pt"):l.dep||(t=1),l=e;return!t},dd=(n,t,e,l)=>{l.mSet(n,t,l.m.call(l.tween,e,l.mt),l)},fd=n=>{let t,e,l,r,i=n._pt;for(;i;){for(t=i._next,e=l;e&&e.pr>i.pr;)e=e._next;(i._prev=e?e._prev:r)?i._prev._next=i:l=i,(i._next=e)?e._prev=i:r=i,i=t}n._pt=l};class md{constructor(n,t,e,l,r,i,u,o,a){this.t=t,this.s=l,this.c=r,this.p=e,this.r=i||od,this.d=u||this,this.set=o||ed,this.pr=a||0,this._next=n,n&&(n._prev=this)}modifier(n,t,e){this.mSet=this.mSet||this.set,this.set=dd,this.m=n,this.mt=e,this.tween=t}}vh(ph+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(n=>ih[n]=1)),Zc.TweenMax=Zc.TweenLite=td,Zc.TimelineLite=Zc.TimelineMax=Vp,fc=new Vp({sortChildren:!1,defaults:Mc,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),wc.stringFilter=n=>{let t,e=n.join(" ");if(Ap.lastIndex=0,Ap.test(e))return t=Lp.test(e),n[1]=Tp(n[1],t),n[0]=Tp(n[0],t,Sp(n[1])),!0};let vd=[],gd={},yd=[],xd=0,bd=0,_d=n=>(gd[n]||yd).map((n=>n())),wd=()=>{let n=Date.now(),t=[];n-xd>2&&(_d("matchMediaInit"),vd.forEach((n=>{let e,l,r,i,u=n.queries,o=n.conditions;for(l in u)e=mc.matchMedia(u[l]).matches,e&&(r=1),e!==o[l]&&(o[l]=e,i=1);i&&(n.revert(),r&&t.push(n))})),_d("matchMediaRevert"),t.forEach((n=>n.onMatch(n))),xd=n,_d("matchMedia"))};class Md{constructor(n,t){this.selector=t&&rp(t),this.data=[],this._r=[],this.isReverted=!1,this.id=bd++,n&&this.add(n)}add(n,t,e){Dc(n)&&(e=t,t=n,n=Dc);let l=this,r=function(){let n,r=dc,i=l.selector;return r&&r!==l&&r.data.push(l),e&&(l.selector=rp(e)),dc=l,n=t.apply(l,arguments),Dc(n)&&l._r.push(n),dc=r,l.selector=i,l.isReverted=!1,n};return l.last=r,n===Dc?r(l):n?l[n]=r:r}ignore(n){let t=dc;dc=null,n(this),dc=t}getTweens(){let n=[];return this.data.forEach((t=>t instanceof Md?n.push(...t.getTweens()):t instanceof td&&!(t.parent&&"nested"===t.parent.data)&&n.push(t))),n}clear(){this._r.length=this.data.length=0}kill(n,t){if(n){let t=this.getTweens();this.data.forEach((n=>{"isFlip"===n.data&&(n.revert(),n.getChildren(!0,!0,!1).forEach((n=>t.splice(t.indexOf(n),1))))})),t.map((n=>({g:n.globalTime(0),t:n}))).sort(((n,t)=>t.g-n.g||-1/0)).forEach((t=>t.t.revert(n))),this.data.forEach((t=>!(t instanceof td)&&t.revert&&t.revert(n))),this._r.forEach((t=>t(n,this))),this.isReverted=!0}else this.data.forEach((n=>n.kill&&n.kill()));if(this.clear(),t){let n=vd.length;for(;n--;)vd[n].id===this.id&&vd.splice(n,1)}}revert(n){this.kill(n||{})}}class Ed{constructor(n){this.contexts=[],this.scope=n}add(n,t,e){Nc(n)||(n={matches:n});let l,r,i,u=new Md(0,e||this.scope),o=u.conditions={};for(r in dc&&!u.selector&&(u.selector=dc.selector),this.contexts.push(u),t=u.add("onMatch",t),u.queries=n,n)"all"===r?i=1:(l=mc.matchMedia(n[r]),l&&(vd.indexOf(u)<0&&vd.push(u),(o[r]=l.matches)&&(i=1),l.addListener?l.addListener(wd):l.addEventListener("change",wd)));return i&&t(u),this}revert(n){this.kill(n||{})}kill(n){this.contexts.forEach((t=>t.kill(n,!0)))}}const Sd={registerPlugin(...n){n.forEach((n=>bp(n)))},timeline:n=>new Vp(n),getTweensOf:(n,t)=>fc.getTweensOf(n,t),getProperty(n,t,e,l){Oc(n)&&(n=lp(n)[0]);let r=fh(n||{}).get,i=e?Eh:Mh;return"native"===e&&(e=""),n?t?i((ah[t]&&ah[t].get||r)(n,t,e,l)):(t,e,l)=>i((ah[t]&&ah[t].get||r)(n,t,e,l)):n},quickSetter(n,t,e){if((n=lp(n)).length>1){let l=n.map((n=>Ld.quickSetter(n,t,e))),r=l.length;return n=>{let t=r;for(;t--;)l[t](n)}}n=n[0]||{};let l=ah[t],r=fh(n),i=r.harness&&(r.harness.aliases||{})[t]||t,u=l?t=>{let r=new l;bc._pt=0,r.init(n,e?t+e:t,bc,0,[n]),r.render(1,r),bc._pt&&cd(1,bc)}:r.set(n,i);return l?u:t=>u(n,i,e?t+e:t,r,1)},quickTo(n,t,e){let l=Ld.to(n,Th({[t]:"+=0.1",paused:!0},e||{})),r=(n,e,r)=>l.resetTo(t,n,e,r);return r.tween=l,r},isTweening:n=>fc.getTweensOf(n,!0).length>0,defaults:n=>(n&&n.ease&&(n.ease=Bp(n.ease,Mc.ease)),Ah(Mc,n||{})),config:n=>Ah(wc,n||{}),registerEffect({name:n,effect:t,plugins:e,defaults:l,extendTimeline:r}){(e||"").split(",").forEach((t=>t&&!ah[t]&&!Zc[t]&&$c(n+" effect requires "+t+" plugin."))),sh[n]=(n,e,r)=>t(lp(n),Sh(e||{},l),r),r&&(Vp.prototype[n]=function(t,e,l){return this.add(sh[n](t,Nc(e)?e:(l=e)&&{},this),l)})},registerEase(n,t){Rp[n]=Bp(t)},parseEase(n,t){return arguments.length?Bp(n,t):Rp},getById:n=>fc.getById(n),exportRoot(n={},t){let e,l,r=new Vp(n);for(r.smoothChildTiming=Bc(n.smoothChildTiming),fc.remove(r),r._dp=0,r._time=r._tTime=fc._time,e=fc._first;e;)l=e._next,!t&&!e._dur&&e instanceof td&&e.vars.onComplete===e._targets[0]||Gh(r,e,e._start-e._delay),e=l;return Gh(fc,r,0),r},context:(n,t)=>n?new Md(n,t):dc,matchMedia:n=>new Ed(n),matchMediaRefresh:()=>vd.forEach((n=>{let t,e,l=n.conditions;for(e in l)l[e]&&(l[e]=!1,t=1);t&&n.revert()}))||wd(),addEventListener(n,t){let e=gd[n]||(gd[n]=[]);~e.indexOf(t)||e.push(t)},removeEventListener(n,t){let e=gd[n],l=e&&e.indexOf(t);l>=0&&e.splice(l,1)},utils:{wrap:hp,wrapYoyo:pp,distribute:up,random:sp,snap:ap,normalize:(n,t,e)=>fp(n,t,0,1,e),getUnit:np,clamp:(n,t,e)=>Qh(e,(e=>$h(n,t,e))),splitColor:Ep,toArray:lp,selector:rp,mapRange:fp,pipe:(...n)=>t=>n.reduce(((n,t)=>t(n)),t),unitize:(n,t)=>e=>n(parseFloat(e))+(t||np(e)),interpolate:mp,shuffle:ip},install:Kc,effects:sh,ticker:Pp,updateRoot:Vp.updateRoot,plugins:ah,globalTimeline:fc,core:{PropTween:md,globals:nh,Tween:td,Timeline:Vp,Animation:Hp,getCache:fh,_removeLinkedListItem:Rh,reverting:()=>pc,context:n=>(n&&dc&&(dc.data.push(n),n._ctx=dc),dc),suppressOverwrites:n=>hc=n}};vh("to,from,fromTo,delayedCall,set,killTweensOf",(n=>Sd[n]=td[n])),Pp.add(Vp.updateRoot),bc=Sd.to({},{duration:0});let Td=(n,t)=>{let e=n._pt;for(;e&&e.p!==t&&e.op!==t&&e.fp!==t;)e=e._next;return e},Ad=(n,t)=>({name:n,rawVars:1,init(n,e,l){l._onInit=n=>{let l,r;if(Oc(e)&&(l={},vh(e,(n=>l[n]=1)),e=l),t){for(r in l={},e)l[r]=t(e[r]);e=l}((n,t)=>{let e,l,r,i=n._targets;for(e in t)for(l=i.length;l--;)r=n._ptLookup[l][e],r&&(r=r.d)&&(r._pt&&(r=Td(r,e)),r&&r.modifier&&r.modifier(t[e],n,i[l],e))})(n,e)}}});const Ld=Sd.registerPlugin({name:"attr",init(n,t,e,l,r){let i,u,o;for(i in this.tween=e,t)o=n.getAttribute(i)||"",u=this.add(n,"setAttribute",(o||0)+"",t[i],l,r,0,0,i),u.op=i,u.b=o,this._props.push(i)},render(n,t){let e=t._pt;for(;e;)pc?e.set(e.t,e.p,e.b,e):e.r(n,e.d),e=e._next}},{name:"endArray",init(n,t){let e=t.length;for(;e--;)this.add(n,e,n[e]||0,t[e],0,0,0,0,0,1)}},Ad("roundProps",op),Ad("modifiers"),Ad("snap",ap))||Sd;td.version=Vp.version=Ld.version="3.12.2",yc=1,Fc()&&Cp();const{Power0:Pd,Power1:Cd,Power2:Rd,Power3:Od,Power4:Dd,Linear:Id,Quad:zd,Cubic:Nd,Quart:Bd,Quint:Fd,Strong:kd,Elastic:Ud,Back:jd,SteppedEase:Gd,Bounce:Hd,Sine:Vd,Expo:Wd,Circ:qd}=Rp;n.OrbitControls=function(n,t){this.object=n,this.domElement=void 0!==t?t:document,this.enabled=!0,this.target=new Gt,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!1,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={LEFT:v.LEFT,MIDDLE:v.MIDDLE,RIGHT:v.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return s.phi},this.getAzimuthalAngle=function(){return s.theta},this.saveState=function(){e.target0.copy(e.target),e.position0.copy(e.object.position),e.zoom0=e.object.zoom},this.reset=function(){e.target.copy(e.target0),e.object.position.copy(e.position0),e.object.zoom=e.zoom0,e.object.updateProjectionMatrix(),e.dispatchEvent(l),e.update(),o=u.NONE},this.update=function(){var t=new Gt,r=(new jt).setFromUnitVectors(n.up,new Gt(0,1,0)),i=r.clone().inverse(),f=new Gt,m=new jt;return function(){var n=e.object.position;return t.copy(n).sub(e.target),t.applyQuaternion(r),s.setFromVector3(t),e.autoRotate&&o===u.NONE&&S(2*Math.PI/60/60*e.autoRotateSpeed),s.theta+=c.theta,s.phi+=c.phi,s.theta=Math.max(e.minAzimuthAngle,Math.min(e.maxAzimuthAngle,s.theta)),s.phi=Math.max(e.minPolarAngle,Math.min(e.maxPolarAngle,s.phi)),s.makeSafe(),s.radius*=h,s.radius=Math.max(e.minDistance,Math.min(e.maxDistance,s.radius)),e.target.add(p),t.setFromSpherical(s),t.applyQuaternion(i),n.copy(e.target).add(t),e.object.lookAt(e.target),!0===e.enableDamping?(c.theta*=1-e.dampingFactor,c.phi*=1-e.dampingFactor,p.multiplyScalar(1-e.dampingFactor)):(c.set(0,0,0),p.set(0,0,0)),h=1,!!(d||f.distanceToSquared(e.object.position)>a||8*(1-m.dot(e.object.quaternion))>a)&&(e.dispatchEvent(l),f.copy(e.object.position),m.copy(e.object.quaternion),d=!1,!0)}}(),this.dispose=function(){e.domElement.removeEventListener("contextmenu",j,!1),e.domElement.removeEventListener("mousedown",D,!1),e.domElement.removeEventListener("wheel",N,!1),e.domElement.removeEventListener("touchstart",F,!1),e.domElement.removeEventListener("touchend",U,!1),e.domElement.removeEventListener("touchmove",k,!1),document.removeEventListener("mousemove",I,!1),document.removeEventListener("mouseup",z,!1),window.removeEventListener("keydown",B,!1)};var e=this,l={type:"change"},r={type:"start"},i={type:"end"},u={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY_PAN:4},o=u.NONE,a=1e-6,s=new ms,c=new ms,h=1,p=new Gt,d=!1,f=new kt,m=new kt,g=new kt,y=new kt,x=new kt,b=new kt,_=new kt,w=new kt,M=new kt;function E(){return Math.pow(.95,e.zoomSpeed)}function S(n){c.theta-=n}function T(n){c.phi-=n}var A=function(){var n=new Gt;return function(t,e){n.setFromMatrixColumn(e,0),n.multiplyScalar(-t),p.add(n)}}(),L=function(){var n=new Gt;return function(t,l){!0===e.screenSpacePanning?n.setFromMatrixColumn(l,1):(n.setFromMatrixColumn(l,0),n.crossVectors(e.object.up,n)),n.multiplyScalar(t),p.add(n)}}(),P=function(){var n=new Gt;return function(t,l){var r=e.domElement===document?e.domElement.body:e.domElement;if(e.object.isPerspectiveCamera){var i=e.object.position;n.copy(i).sub(e.target);var u=n.length();u*=Math.tan(e.object.fov/2*Math.PI/180),A(2*t*u/r.clientHeight,e.object.matrix),L(2*l*u/r.clientHeight,e.object.matrix)}else e.object.isOrthographicCamera?(A(t*(e.object.right-e.object.left)/e.object.zoom/r.clientWidth,e.object.matrix),L(l*(e.object.top-e.object.bottom)/e.object.zoom/r.clientHeight,e.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),e.enablePan=!1)}}();function C(n){e.object.isPerspectiveCamera?h/=n:e.object.isOrthographicCamera?(e.object.zoom=Math.max(e.minZoom,Math.min(e.maxZoom,e.object.zoom*n)),e.object.updateProjectionMatrix(),d=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),e.enableZoom=!1)}function R(n){e.object.isPerspectiveCamera?h*=n:e.object.isOrthographicCamera?(e.object.zoom=Math.max(e.minZoom,Math.min(e.maxZoom,e.object.zoom/n)),e.object.updateProjectionMatrix(),d=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),e.enableZoom=!1)}function O(n){y.set(n.clientX,n.clientY)}function D(n){if(!1!==e.enabled){switch(n.preventDefault(),e.domElement.focus?e.domElement.focus():window.focus(),n.button){case e.mouseButtons.LEFT:if(n.ctrlKey||n.metaKey||n.shiftKey){if(!1===e.enablePan)return;O(n),o=u.PAN}else{if(!1===e.enableRotate)return;!function(n){f.set(n.clientX,n.clientY)}(n),o=u.ROTATE}break;case e.mouseButtons.MIDDLE:if(!1===e.enableZoom)return;!function(n){_.set(n.clientX,n.clientY)}(n),o=u.DOLLY;break;case e.mouseButtons.RIGHT:if(!1===e.enablePan)return;O(n),o=u.PAN}o!==u.NONE&&(document.addEventListener("mousemove",I,!1),document.addEventListener("mouseup",z,!1),e.dispatchEvent(r))}}function I(n){if(!1!==e.enabled)switch(n.preventDefault(),o){case u.ROTATE:if(!1===e.enableRotate)return;!function(n){m.set(n.clientX,n.clientY),g.subVectors(m,f).multiplyScalar(e.rotateSpeed);var t=e.domElement===document?e.domElement.body:e.domElement;S(2*Math.PI*g.x/t.clientHeight),T(2*Math.PI*g.y/t.clientHeight),f.copy(m),e.update()}(n);break;case u.DOLLY:if(!1===e.enableZoom)return;!function(n){w.set(n.clientX,n.clientY),M.subVectors(w,_),M.y>0?C(E()):M.y<0&&R(E()),_.copy(w),e.update()}(n);break;case u.PAN:if(!1===e.enablePan)return;!function(n){x.set(n.clientX,n.clientY),b.subVectors(x,y).multiplyScalar(e.panSpeed),P(b.x,b.y),y.copy(x),e.update()}(n)}}function z(n){!1!==e.enabled&&(document.removeEventListener("mousemove",I,!1),document.removeEventListener("mouseup",z,!1),e.dispatchEvent(i),o=u.NONE)}function N(n){!1===e.enabled||!1===e.enableZoom||o!==u.NONE&&o!==u.ROTATE||(n.preventDefault(),n.stopPropagation(),e.dispatchEvent(r),function(n){n.deltaY<0?R(E()):n.deltaY>0&&C(E()),e.update()}(n),e.dispatchEvent(i))}function B(n){!1!==e.enabled&&!1!==e.enableKeys&&!1!==e.enablePan&&function(n){switch(n.preventDefault(),n.keyCode){case e.keys.UP:P(0,e.keyPanSpeed),e.update();break;case e.keys.BOTTOM:P(0,-e.keyPanSpeed),e.update();break;case e.keys.LEFT:P(e.keyPanSpeed,0),e.update();break;case e.keys.RIGHT:P(-e.keyPanSpeed,0),e.update()}}(n)}function F(n){if(!1!==e.enabled){switch(n.preventDefault(),n.touches.length){case 1:if(!1===e.enableRotate)return;!function(n){f.set(n.touches[0].pageX,n.touches[0].pageY)}(n),o=u.TOUCH_ROTATE;break;case 2:if(!1===e.enableZoom&&!1===e.enablePan)return;!function(n){if(e.enableZoom){var t=n.touches[0].pageX-n.touches[1].pageX,l=n.touches[0].pageY-n.touches[1].pageY,r=Math.sqrt(t*t+l*l);_.set(0,r)}if(e.enablePan){var i=.5*(n.touches[0].pageX+n.touches[1].pageX),u=.5*(n.touches[0].pageY+n.touches[1].pageY);y.set(i,u)}}(n),o=u.TOUCH_DOLLY_PAN;break;default:o=u.NONE}o!==u.NONE&&e.dispatchEvent(r)}}function k(n){if(!1!==e.enabled)switch(n.preventDefault(),n.stopPropagation(),n.touches.length){case 1:if(!1===e.enableRotate)return;if(o!==u.TOUCH_ROTATE)return;!function(n){m.set(n.touches[0].pageX,n.touches[0].pageY),g.subVectors(m,f).multiplyScalar(e.rotateSpeed);var t=e.domElement===document?e.domElement.body:e.domElement;S(2*Math.PI*g.x/t.clientHeight),T(2*Math.PI*g.y/t.clientHeight),f.copy(m),e.update()}(n);break;case 2:if(!1===e.enableZoom&&!1===e.enablePan)return;if(o!==u.TOUCH_DOLLY_PAN)return;!function(n){if(e.enableZoom){var t=n.touches[0].pageX-n.touches[1].pageX,l=n.touches[0].pageY-n.touches[1].pageY,r=Math.sqrt(t*t+l*l);w.set(0,r),M.set(0,Math.pow(w.y/_.y,e.zoomSpeed)),C(M.y),_.copy(w)}if(e.enablePan){var i=.5*(n.touches[0].pageX+n.touches[1].pageX),u=.5*(n.touches[0].pageY+n.touches[1].pageY);x.set(i,u),b.subVectors(x,y).multiplyScalar(e.panSpeed),P(b.x,b.y),y.copy(x)}e.update()}(n);break;default:o=u.NONE}}function U(n){!1!==e.enabled&&(e.dispatchEvent(i),o=u.NONE)}function j(n){!1!==e.enabled&&n.preventDefault()}e.domElement.addEventListener("contextmenu",j,!1),e.domElement.addEventListener("mousedown",D,!1),e.domElement.addEventListener("wheel",N,!1),e.domElement.addEventListener("touchstart",F,!1),e.domElement.addEventListener("touchend",U,!1),e.domElement.addEventListener("touchmove",k,!1),window.addEventListener("keydown",B,!1),this.update()},n.OrbitControls.prototype=Object.create(t.prototype),n.OrbitControls.prototype.constructor=n.OrbitControls,Object.defineProperties(n.OrbitControls.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(n){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!n}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(n){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!n}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(n){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!n}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(n){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!n}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(n){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!n}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(n){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=n}}}),Fs(),__webpack_require__(9593),Math.PI,BoxHelper=function(n){var t=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),e=new Float32Array(24),l=new Xe;l.setIndex(new Ie(t,1)),l.addAttribute("position",new Ie(e,3)),Ei.call(this,l,new wi({linewidth:2,color:16711680})),void 0!==n&&this.update(n)},BoxHelper.prototype=Object.create(Ei.prototype),BoxHelper.prototype.constructor=BoxHelper,BoxHelper.prototype.update=function(){var n=new le;return function(t){if(n.setFromObject(t),!n.isEmpty()){var e=n.min,l=n.max,r=this.geometry.attributes.position,i=r.array;i[0]=l.x,i[1]=l.y,i[2]=l.z,i[3]=e.x,i[4]=l.y,i[5]=l.z,i[6]=e.x,i[7]=e.y,i[8]=l.z,i[9]=l.x,i[10]=e.y,i[11]=l.z,i[12]=l.x,i[13]=l.y,i[14]=e.z,i[15]=e.x,i[16]=l.y,i[17]=e.z,i[18]=e.x,i[19]=e.y,i[20]=e.z,i[21]=l.x,i[22]=e.y,i[23]=e.z,r.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),__webpack_require__(7643);var Xd=__webpack_require__(9087),Yd=__webpack_require__(9370),Zd=__webpack_require__.n(Yd),Jd=__webpack_require__(9187),Kd=__webpack_require__.n(Jd);const Qd=function(n,t,e){var l,r,i,u,o,a=Us()({},{top:1,bottom:0,closed:!0},e),s=n.length;return a.top===a.bottom?(l=n.map((function(n){return[n[0],a.top,n[1]]})),r=t,i=t):function(){l=[],n.forEach((function(n){l.push([n[0],a.top,n[1]])})),n.forEach((function(n){l.push([n[0],a.bottom,n[1]])})),r=[];for(var e=0;e<s;e++)e===s-1?(r.push([e+s,s,e]),r.push([0,e,s])):(r.push([e+s,e+s+1,e]),r.push([e+1,e,e+s+1]));if(o=[].concat(r),a.closed){var c=t,h=c.map((function(n){return n.map((function(n){return n+s}))}));h=h.map((function(n){return[n[0],n[2],n[1]]})),r=r.concat(c).concat(h),i=c,u=h}}(),{positions:l,faces:r,top:i,bottom:u,sides:o}};var $d,nf,tf,ef=new me(16777215),lf=new me(6710886),rf=(nf=function(n){for(var t=n[0][0].length,e={vertices:[],holes:[],dimensions:t},l=0,r=0;r<n.length;r++){for(var i=0;i<n[r].length;i++)for(var u=0;u<t;u++)e.vertices.push(n[r][i][u]);r>0&&(l+=n[r-1].length,e.holes.push(l))}return e},tf=function(n,t,e){var l=Kd()(n,t,e),r=[];for(i=0,il=l.length;i<il;i+=3)r.push(l.slice(i,i+3));return r},{defaultStyle:{color:"#ffffff",outline:!1,outlineColor:"#000000",transparent:!1,opacity:1,blending:L,height:0,lineOpacity:1,lineTransparent:!1,lineColor:"#ffffff",lineWidth:1,lineBlending:L},collectFeatures:function(n,t,e){var l=[];if(e){for(var r in n.objects)t.length>0&&!t.includes(r)||l.push(Xd.feature(n,n.objects[r]));return Zd()(l)}if(n.type)return Array.isArray(n)?Zd()(n):n;for(var i in n)t.length>0&&!t.includes(i)||n[i].type&&l.push(n[i]);return Zd()(l)},lineStringAttributes:$d=function(n,t,e){var l,r=[],i=[];return n.forEach(((u,o)=>{i.push([t.r,t.g,t.b]),r.push([u[0],e,u[1]]),l=n[o+1]?n[o+1]:u,i.push([t.r,t.g,t.b]),r.push([l[0],e,l[1]])})),{vertices:r,colours:i}},multiLineStringAttributes:function(n,t,e){var l,r=[],i=[];return n.forEach((n=>{(l=$d(n,t,e)).vertices.forEach((n=>{r.push(n)})),l.colours.forEach((n=>{i.push(n)}))})),{vertices:r,colours:i}},polygonAttributes:function(n,t,e){var l=nf(n),r=tf(l.vertices,l.holes,l.dimensions),u=[];for(i=0,il=l.vertices.length;i<il;i+=l.dimensions)u.push(l.vertices.slice(i,i+l.dimensions));var o,a=Qd(u,r,{bottom:0,top:e}),s=t.clone().multiply(ef),c=t.clone().multiply(lf),h=a.positions,p=[],d=[];a.top.forEach(((n,e)=>{(o=[]).push([t.r,t.g,t.b]),o.push([t.r,t.g,t.b]),o.push([t.r,t.g,t.b]),p.push(n),d.push(o)}));var f=!0;return a.sides&&(f&&(f=!1),a.sides.forEach(((n,t)=>{o=[],t%2==0?(o.push([c.r,c.g,c.b]),o.push([c.r,c.g,c.b]),o.push([s.r,s.g,s.b])):(o.push([s.r,s.g,s.b]),o.push([s.r,s.g,s.b]),o.push([c.r,c.g,c.b])),p.push(n),d.push(o)}))),{vertices:h,faces:p,colours:d,flat:f}}});const uf=rf;var of,af,sf=__webpack_require__(8731),cf=(of=new sf.TextEncoder("utf-8"),af=new sf.TextDecoder("utf-8"),{mergeFloat32Arrays:function(n){var t,e=0,l=new Int32Array(2*n.length),r=0;n.forEach(((n,i)=>{t=n.length,e+=t,l.set([r,r+t],2*i),r+=t}));var i=new Float32Array(e);return n.forEach(((n,t)=>{i.set(n,l[2*t])})),[i,l]},splitFloat32Array:function(n){for(var t,e=n[0],l=n[1],r=[],i=0;i<l.length/2;i++)t=2*i,r.push(e.subarray(l[t],l[t+1]));return r},mergeUint8Arrays:function(n){var t,e=0,l=new Int32Array(2*n.length),r=0;n.forEach(((n,i)=>{t=n.length,e+=t,l.set([r,r+t],2*i),r+=t}));var i=new Uint8Array(e);return n.forEach(((n,t)=>{i.set(n,l[2*t])})),[i,l]},splitUint8Array:function(n){for(var t,e=n[0],l=n[1],r=[],i=0;i<l.length/2;i++)t=2*i,r.push(e.subarray(l[t],l[t+1]));return r},mergeAttributes:function(n){var t={};n.forEach((n=>{for(var e in n)t[e]||(t[e]=0),t[e]+=n[e].length}));var e={};for(var l in t)e[l]=new Float32Array(t[l]);var r={};return n.forEach((n=>{for(var t in n)r[t]||(r[t]=0),e[t].set(n[t],r[t]),r[t]+=n[t].length})),e},createLineGeometry:function(n,t){var e,l,r,i,u=new Xe,o=new Float32Array(3*n.verticesCount),a=new Float32Array(3*n.verticesCount);n.pickingIds&&(e=new Float32Array(n.verticesCount));for(var s=0,c=0;c<n.vertices.length;c++){l=n.vertices[c],r=n.colours[c],e&&(i=n.pickingIds[c]);for(var h=0;h<l.length;h++){var p=l[h][0]+t.x,d=l[h][1],f=l[h][2]+t.y,m=r[h];o[3*s+0]=p,o[3*s+1]=d,o[3*s+2]=f,a[3*s+0]=m[0],a[3*s+1]=m[1],a[3*s+2]=m[2],e&&(e[s]=i),s++}}return u.addAttribute("position",new Ie(o,3)),u.addAttribute("color",new Ie(a,3)),e&&u.addAttribute("pickingId",new Ie(e,1)),u.computeBoundingBox(),u},createGeometry:function(n,t){var e,l=new Xe,r=new Float32Array(9*n.facesCount),i=new Float32Array(9*n.facesCount),u=new Float32Array(9*n.facesCount);n.pickingIds&&(e=new Float32Array(3*n.facesCount));for(var o,a,s,c,h,p=new Gt,d=new Gt,f=new Gt,m=new Gt,v=new Gt,g=0,y=0;y<n.faces.length;y++){a=n.faces[y],s=n.vertices[y],c=n.colours[y],e&&(h=n.pickingIds[y]);for(var x=0;x<a.length;x++){var b=s[o=a[x][0]][0]+t.x,_=s[o][1],w=s[o][2]+t.y,M=c[x][0],E=s[o=a[x][1]][0]+t.x,S=s[o][1],T=s[o][2]+t.y,A=c[x][1],L=s[o=a[x][2]][0]+t.x,P=s[o][1],C=s[o][2]+t.y,R=c[x][2];p.set(b,_,w),d.set(E,S,T),f.set(L,P,C),m.subVectors(f,d),v.subVectors(p,d),m.cross(v),m.normalize();var O=m.x,D=m.y,I=m.z;r[9*g+0]=b,r[9*g+1]=_,r[9*g+2]=w,i[9*g+0]=O,i[9*g+1]=D,i[9*g+2]=I,u[9*g+0]=M[0],u[9*g+1]=M[1],u[9*g+2]=M[2],r[9*g+3]=E,r[9*g+4]=S,r[9*g+5]=T,i[9*g+3]=O,i[9*g+4]=D,i[9*g+5]=I,u[9*g+3]=A[0],u[9*g+4]=A[1],u[9*g+5]=A[2],r[9*g+6]=L,r[9*g+7]=P,r[9*g+8]=C,i[9*g+6]=O,i[9*g+7]=D,i[9*g+8]=I,u[9*g+6]=R[0],u[9*g+7]=R[1],u[9*g+8]=R[2],e&&(e[3*g+0]=h,e[3*g+1]=h,e[3*g+2]=h),g++}}return l.addAttribute("position",new Ie(r,3)),l.addAttribute("normal",new Ie(i,3)),l.addAttribute("color",new Ie(u,3)),e&&l.addAttribute("pickingId",new Ie(e,1)),l.computeBoundingBox(),l},stringToUint8Array:function(n){return of.encode(n)},uint8ArrayToString:function(n){return af.decode(n)},fillTypedArray:function(n,t){for(var e=0;e<n.length;e++)n[e]=t}});const hf=cf,pf={vertexShader:["attribute float pickingId;","","varying vec4 worldId;","","void main() {","  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );","  vec3 a = fract(vec3(1.0/255.0, 1.0/(255.0*255.0), 1.0/(255.0*255.0*255.0)) * pickingId);","  a -= a.xxy * vec3(0.0, 1.0/255.0, 1.0/255.0);","  worldId = vec4(a,1);","  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#ifdef GL_ES\n","precision highp float;\n","#endif\n","","varying vec4 worldId;","","void main() {","  gl_FragColor = worldId;","}"].join("\n")};var df=function(){dl.call(this,{uniforms:{size:{type:"f",value:.01},scale:{type:"f",value:400}},vertexShader:pf.vertexShader,fragmentShader:pf.fragmentShader}),this.linePadding=2};(df.prototype=Object.create(dl.prototype)).constructor=df,df.prototype.setPointSize=function(n){this.uniforms.size.value=n},df.prototype.setPointScale=function(n){this.uniforms.scale.value=n};var ff=__webpack_require__(4017);__webpack_require__(3614),__webpack_require__(8929);const mf={wrapNum:function(n,t,e){var l=t[1],r=t[0],i=l-r;return n===l&&e?n:((n-r)%i+i)%i+r}};mf.extrudePolygon=Qd,mf.GeoJSON=uf,mf.Buffer=hf,mf.Worker=cc,mf.Stringify=ff.Z,__webpack_require__(3762)})()})();
//# sourceMappingURL=vizicities.js.map